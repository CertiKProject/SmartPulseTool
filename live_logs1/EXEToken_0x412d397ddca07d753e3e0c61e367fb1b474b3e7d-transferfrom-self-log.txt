This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 16:10:20,117 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 16:10:20,119 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 16:10:20,127 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 16:10:20,127 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 16:10:20,128 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 16:10:20,129 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 16:10:20,130 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 16:10:20,131 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 16:10:20,131 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 16:10:20,132 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 16:10:20,132 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 16:10:20,132 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 16:10:20,133 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 16:10:20,133 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 16:10:20,134 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 16:10:20,134 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 16:10:20,135 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 16:10:20,136 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 16:10:20,137 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 16:10:20,138 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 16:10:20,138 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 16:10:20,139 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 16:10:20,140 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 16:10:20,140 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 16:10:20,140 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 16:10:20,140 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 16:10:20,141 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 16:10:20,141 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 16:10:20,142 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 16:10:20,142 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 16:10:20,143 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 16:10:20,143 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 16:10:20,144 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 16:10:20,145 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 16:10:20,145 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 16:10:20,146 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 16:10:20,146 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 16:10:20,147 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 16:10:20,148 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 16:10:20,149 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 16:10:20,149 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 16:10:20,164 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 16:10:20,164 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 16:10:20,165 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 16:10:20,165 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 16:10:20,165 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 16:10:20,165 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 16:10:20,165 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 16:10:20,165 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 16:10:20,165 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 16:10:20,165 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 16:10:20,165 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 16:10:20,165 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 16:10:20,166 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 16:10:20,166 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 16:10:20,166 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 16:10:20,184 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 16:10:20,198 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 16:10:20,202 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 16:10:20,203 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 16:10:20,204 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 16:10:20,204 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl
[2020-11-25 16:10:20,205 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl'
[2020-11-25 16:10:20,310 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 16:10:20,311 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 16:10:20,311 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 16:10:20,311 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 16:10:20,312 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 16:10:20,328 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/1) ...
[2020-11-25 16:10:20,330 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/1) ...
[2020-11-25 16:10:20,365 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/1) ...
[2020-11-25 16:10:20,366 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/1) ...
[2020-11-25 16:10:20,389 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/1) ...
[2020-11-25 16:10:20,402 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/1) ...
[2020-11-25 16:10:20,412 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/1) ...
[2020-11-25 16:10:20,427 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 16:10:20,428 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 16:10:20,428 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 16:10:20,430 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 16:10:20,434 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/1) ...
[2020-11-25 16:10:20,453 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(EXEToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:10:20,459 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(EXEToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:10:20,467 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(EXEToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:10:20,477 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=sender_s1113 || p2!=msg.sender ) && sender_s1113==recipient_s1113 ) && amount_s1113<=_balances_ERC20[this][sender_s1113] ) && amount_s1113<=_allowed_ERC20[this][sender_s1113][msg.sender] ) && amount_s1113>=0 ) && amount_s1113<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s1113]>=0 ) && _balances_ERC20[this][recipient_s1113]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s1113]>=0 ) && _balances_ERC20[this][sender_s1113]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowed_ERC20[this][sender_s1113][msg.sender]>=0 ) && _allowed_ERC20[this][sender_s1113][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],BinaryExpression[COMPEQ,IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[recipient_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 16:10:20,480 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowed_ERC20[this][sender_s1113][msg.sender]==( ( old(_allowed_ERC20[this][sender_s1113][msg.sender]) ) - amount_s1113 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowed_ERC20[this][p1][p2]==( old(_allowed_ERC20[this][p1][p2]) ) ) && _lockTimes_EXEToken[this]==( old(_lockTimes_EXEToken[this]) ) ) && _lockAmounts_EXEToken[this]==( old(_lockAmounts_EXEToken[this]) ) ) && stopped_Stoppable[this]==( old(stopped_Stoppable[this]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_EXEToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[sender_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]],IdentifierExpression[amount_s1113,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowed_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_lockTimes_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_lockTimes_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_lockAmounts_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_lockAmounts_EXEToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[stopped_Stoppable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[stopped_Stoppable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_EXEToken>]]]]]]
[2020-11-25 16:10:20,486 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(EXEToken.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= _balances_ERC20[this][from] && value <= _allowed_ERC20[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowed_ERC20[this][from][msg.sender] >= 0 && _allowed_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(EXEToken.transferFrom(from, to, value), return == true && _allowed_ERC20[this][from][msg.sender] == old(_allowed_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2]) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this]) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this]) && stopped_Stoppable[this] == old(stopped_Stoppable[this]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 16:10:20,486 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_EXEToken0) ==> ( <>AP(success_transferFrom_EXEToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 16:10:20,500 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:10:20 PropertyContainer
[2020-11-25 16:10:20,501 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 16:10:20,501 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 16:10:20,501 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 16:10:20,501 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 16:10:20,502 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/2) ...
[2020-11-25 16:10:20,502 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 16:10:20,503 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 16:10:20,523 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:10:20" (2/2) ...
[2020-11-25 16:10:20,523 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 16:10:20,524 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 16:10:20,524 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 16:10:20,524 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 16:10:20,524 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/2) ...
[2020-11-25 16:10:20,583 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 16:10:20,584 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:10:20,584 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 16:10:20,584 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 16:10:20,584 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:10:20,584 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:10:20,584 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:10:20,584 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:10:20,584 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:10:20,585 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:10:20,585 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 16:10:20,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 16:10:20,585 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 16:10:20,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 16:10:20,585 INFO  L130     BoogieDeclarations]: Found specification of procedure _isOwner_Ownable__success
[2020-11-25 16:10:20,585 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 16:10:20,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 16:10:20,586 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 16:10:20,586 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:10:20,586 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 16:10:20,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 16:10:20,586 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 16:10:20,586 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 16:10:20,586 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 16:10:20,586 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 16:10:20,586 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 16:10:20,587 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 16:10:20,587 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:10:20,587 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 16:10:20,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 16:10:20,587 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 16:10:20,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 16:10:20,587 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 16:10:20,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 16:10:20,587 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 16:10:20,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 16:10:20,587 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 16:10:20,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 16:10:20,588 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 16:10:20,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 16:10:20,588 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:10:20,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 16:10:20,588 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:10:20,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 16:10:20,588 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:10:20,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 16:10:20,588 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:10:20,589 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:10:20,589 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:10:20,589 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 16:10:20,589 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 16:10:20,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 16:10:20,589 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 16:10:20,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 16:10:20,589 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 16:10:20,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 16:10:20,589 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 16:10:20,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 16:10:20,589 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 16:10:20,589 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 16:10:20,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 16:10:20,590 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 16:10:20,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 16:10:20,590 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 16:10:20,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 16:10:20,590 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20Burnable__success
[2020-11-25 16:10:20,590 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable_NoBaseCtor__success
[2020-11-25 16:10:20,590 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable
[2020-11-25 16:10:20,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable
[2020-11-25 16:10:20,590 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable
[2020-11-25 16:10:20,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable
[2020-11-25 16:10:20,590 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable
[2020-11-25 16:10:20,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable
[2020-11-25 16:10:20,591 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable
[2020-11-25 16:10:20,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable
[2020-11-25 16:10:20,591 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken_NoBaseCtor__success
[2020-11-25 16:10:20,591 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken
[2020-11-25 16:10:20,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken
[2020-11-25 16:10:20,591 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EXEToken__success
[2020-11-25 16:10:20,591 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken
[2020-11-25 16:10:20,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken
[2020-11-25 16:10:20,591 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken
[2020-11-25 16:10:20,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken
[2020-11-25 16:10:20,591 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken
[2020-11-25 16:10:20,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure _isLocked~address~uint256_EXEToken__success
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken
[2020-11-25 16:10:20,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken
[2020-11-25 16:10:20,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure enabled_pre__success
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 16:10:20,592 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Stoppable
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Stoppable
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_EXEToken
[2020-11-25 16:10:20,593 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 16:10:20,594 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 16:10:20,594 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:10:20,594 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 16:10:20,594 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 16:10:20,594 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:10:20,594 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:10:20,594 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:10:20,595 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:10:20,595 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:10:20,595 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:10:20,596 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 16:10:20,596 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 16:10:20,596 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 16:10:20,596 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 16:10:20,597 INFO  L130     BoogieDeclarations]: Found specification of procedure _isOwner_Ownable__fail
[2020-11-25 16:10:20,597 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:10:20,597 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:10:20,597 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 16:10:20,598 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:10:20,598 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 16:10:20,598 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 16:10:20,598 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:10:20,599 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 16:10:20,599 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 16:10:20,599 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 16:10:20,599 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 16:10:20,600 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 16:10:20,600 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:10:20,600 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 16:10:20,600 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:10:20,600 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:10:20,601 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:10:20,601 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:10:20,601 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:10:20,602 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:10:20,602 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:10:20,602 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:10:20,602 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:10:20,603 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:10:20,603 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:10:20,603 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:10:20,603 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:10:20,603 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:10:20,604 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 16:10:20,604 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 16:10:20,604 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 16:10:20,604 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 16:10:20,605 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 16:10:20,605 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 16:10:20,605 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 16:10:20,605 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 16:10:20,606 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 16:10:20,606 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 16:10:20,606 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 16:10:20,606 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 16:10:20,606 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 16:10:20,607 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 16:10:20,607 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 16:10:20,607 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 16:10:20,607 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20Burnable__fail
[2020-11-25 16:10:20,607 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable_NoBaseCtor__fail
[2020-11-25 16:10:20,608 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable__success
[2020-11-25 16:10:20,608 INFO  L130     BoogieDeclarations]: Found specification of procedure Stoppable_Stoppable__fail
[2020-11-25 16:10:20,608 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable__success
[2020-11-25 16:10:20,608 INFO  L130     BoogieDeclarations]: Found specification of procedure stop_Stoppable__fail
[2020-11-25 16:10:20,608 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable__success
[2020-11-25 16:10:20,608 INFO  L130     BoogieDeclarations]: Found specification of procedure start_Stoppable__fail
[2020-11-25 16:10:20,608 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable__success
[2020-11-25 16:10:20,608 INFO  L130     BoogieDeclarations]: Found specification of procedure stopped_Stoppable__fail
[2020-11-25 16:10:20,608 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken_NoBaseCtor__fail
[2020-11-25 16:10:20,608 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken__success
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure EXEToken_EXEToken__fail
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_EXEToken__fail
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken__success
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_EXEToken__fail
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken__success
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure setLock~address~uint256~uint256_EXEToken__fail
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken__success
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure getLock~address_EXEToken__fail
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure _isLocked~address~uint256_EXEToken__fail
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken__success
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_EXEToken__fail
[2020-11-25 16:10:20,609 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken__success
[2020-11-25 16:10:20,610 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_EXEToken__fail
[2020-11-25 16:10:20,610 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 16:10:20,610 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 16:10:20,610 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 16:10:20,610 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 16:10:20,610 INFO  L130     BoogieDeclarations]: Found specification of procedure enabled_pre__fail
[2020-11-25 16:10:20,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 16:10:20,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 16:10:20,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 16:10:20,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 16:10:20,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 16:10:20,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 16:10:20,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isOwner_Ownable__fail
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isOwner_Ownable__success
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 16:10:20,612 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 16:10:20,613 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 16:10:20,614 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 16:10:20,615 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 16:10:20,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 16:10:20,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 16:10:20,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 16:10:20,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 16:10:20,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 16:10:20,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 16:10:20,616 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 16:10:20,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 16:10:20,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 16:10:20,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 16:10:20,617 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20Burnable__fail
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20Burnable__success
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable_NoBaseCtor__fail
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable_NoBaseCtor__success
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable__fail
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure Stoppable_Stoppable__success
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable__fail
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure stop_Stoppable__success
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable__fail
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure start_Stoppable__success
[2020-11-25 16:10:20,618 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable__fail
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure stopped_Stoppable__success
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken_NoBaseCtor__fail
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken_NoBaseCtor__success
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken__fail
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure EXEToken_EXEToken__success
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EXEToken__fail
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_EXEToken__success
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken__fail
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_EXEToken__success
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken__fail
[2020-11-25 16:10:20,619 INFO  L138     BoogieDeclarations]: Found implementation of procedure setLock~address~uint256~uint256_EXEToken__success
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken__fail
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure getLock~address_EXEToken__success
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isLocked~address~uint256_EXEToken__fail
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure _isLocked~address~uint256_EXEToken__success
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken__fail
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_EXEToken__success
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken__fail
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_EXEToken__success
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 16:10:20,620 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure enabled_pre__fail
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure enabled_pre__success
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 16:10:20,621 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Stoppable
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Stoppable
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_EXEToken
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 16:10:20,622 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 16:10:20,622 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 16:10:21,185 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:10:21,389 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:10:21,389 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:10:21,390 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 16:10:21,614 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 16:10:21,614 INFO  L286             CfgBuilder]: Removed 8 assue(true) statements.
[2020-11-25 16:10:21,617 INFO  L202        PluginConnector]: Adding new model EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:10:21 BoogieIcfgContainer
[2020-11-25 16:10:21,617 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:10:20" (2/2) ...
[2020-11-25 16:10:21,617 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 16:10:21,618 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@44198ef4 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:10:21, skipping insertion in model container
[2020-11-25 16:10:21,618 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 16:10:21,618 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 16:10:21,618 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 16:10:21,619 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 16:10:21,620 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/3) ...
[2020-11-25 16:10:21,620 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@28dd79cd and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:10:21, skipping insertion in model container
[2020-11-25 16:10:21,620 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:10:20" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 16:10:21,656 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:10:21 NWAContainer
[2020-11-25 16:10:21,657 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 16:10:21,657 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 16:10:21,657 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 16:10:21,658 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 16:10:21,658 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:10:21" (3/4) ...
[2020-11-25 16:10:21,659 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@5eafaec3 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:10:21, skipping insertion in model container
[2020-11-25 16:10:21,659 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:10:21" (4/4) ...
[2020-11-25 16:10:21,662 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 16:10:21,667 INFO  L110   BuchiProductObserver]: Initial RCFG 2514 locations, 3422 edges
[2020-11-25 16:10:21,668 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 16:10:21,680 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 16:10:23,452 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 16:10:23,459 INFO  L110   BuchiProductObserver]: BuchiProgram size 6234 locations, 11169 edges
[2020-11-25 16:10:23,460 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:10:23 BoogieIcfgContainer
[2020-11-25 16:10:23,460 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 16:10:23,460 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 16:10:23,460 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 16:10:23,461 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 16:10:23,462 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:10:23" (1/1) ...
[2020-11-25 16:10:23,574 INFO  L313           BlockEncoder]: Initial Icfg 6234 locations, 11169 edges
[2020-11-25 16:10:23,574 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 16:10:23,574 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 16:10:23,574 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 16:10:23,575 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 16:10:23,587 INFO  L70    emoveInfeasibleEdges]: Removed 159 edges and 19 locations because of local infeasibility
[2020-11-25 16:10:23,599 INFO  L70        RemoveSinkStates]: Removed 80 edges and 53 locations by removing sink states
[2020-11-25 16:10:23,612 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 16:10:23,616 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 16:10:23,619 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 16:10:23,620 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 16:10:23,623 INFO  L313           BlockEncoder]: Encoded RCFG 6128 locations, 10880 edges
[2020-11-25 16:10:23,623 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:10:23 BasicIcfg
[2020-11-25 16:10:23,623 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 16:10:23,624 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 16:10:23,624 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 16:10:23,625 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 16:10:23,625 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:10:23,625 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 04:10:20" (1/6) ...
[2020-11-25 16:10:23,627 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@22406e55 and model type EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:10:23, skipping insertion in model container
[2020-11-25 16:10:23,627 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:10:23,627 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 04:10:20" (2/6) ...
[2020-11-25 16:10:23,627 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@22406e55 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:10:23, skipping insertion in model container
[2020-11-25 16:10:23,627 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:10:23,627 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 04:10:21" (3/6) ...
[2020-11-25 16:10:23,627 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@22406e55 and model type EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:10:23, skipping insertion in model container
[2020-11-25 16:10:23,627 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:10:23,627 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 04:10:21" (4/6) ...
[2020-11-25 16:10:23,628 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@22406e55 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 04:10:23, skipping insertion in model container
[2020-11-25 16:10:23,628 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:10:23,628 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 04:10:23" (5/6) ...
[2020-11-25 16:10:23,628 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@22406e55 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 04:10:23, skipping insertion in model container
[2020-11-25 16:10:23,628 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 16:10:23,628 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 04:10:23" (6/6) ...
[2020-11-25 16:10:23,629 INFO  L404   chiAutomizerObserver]: Analyzing ICFG EXEToken_0x412d397ddca07d753e3e0c61e367fb1b474b3e7d_transferfrom-self.bpl_BEv2
[2020-11-25 16:10:23,659 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 16:10:23,660 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 16:10:23,660 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 16:10:23,660 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 16:10:23,660 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 16:10:23,660 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 16:10:23,660 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 16:10:23,660 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 16:10:23,660 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 16:10:23,698 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6128 states.
[2020-11-25 16:10:23,756 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:10:23,757 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:23,757 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:23,764 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:23,764 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:23,764 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 16:10:23,764 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6128 states.
[2020-11-25 16:10:23,787 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:10:23,787 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:23,787 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:23,788 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:23,788 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND TRUE   revert
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND TRUE   choice == 21
[L6891]              gas := gas - 21000;
[L6892]  COND FALSE  !(gas >= 0)
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:10:23,801 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:23,801 INFO  L82        PathProgramCache]: Analyzing trace with hash -689840653, now seen corresponding path program 1 times
[2020-11-25 16:10:23,806 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:23,825 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:10:23,859 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:10:23,861 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:10:23,861 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:10:24,245 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:10:24,253 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:10:24,254 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:10:24,255 INFO  L87              Difference]: Start difference. First operand 6128 states. Second operand 3 states.
[2020-11-25 16:10:24,559 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:10:24,559 INFO  L93              Difference]: Finished difference Result 3833 states and 4416 transitions.
[2020-11-25 16:10:24,559 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:10:24,560 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3833 states and 4416 transitions.
[2020-11-25 16:10:24,579 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:10:24,605 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3833 states to 3833 states and 4416 transitions.
[2020-11-25 16:10:24,606 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 16:10:24,608 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 851
[2020-11-25 16:10:24,608 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3833 states and 4416 transitions.
[2020-11-25 16:10:24,616 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:10:24,616 INFO  L728         BuchiCegarLoop]: Abstraction has 3833 states and 4416 transitions.
[2020-11-25 16:10:24,643 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3833 states and 4416 transitions.
[2020-11-25 16:10:24,706 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3833 to 3833.
[2020-11-25 16:10:24,706 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3833 states.
[2020-11-25 16:10:24,715 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3833 states to 3833 states and 4416 transitions.
[2020-11-25 16:10:24,716 INFO  L751         BuchiCegarLoop]: Abstraction has 3833 states and 4416 transitions.
[2020-11-25 16:10:24,716 INFO  L631         BuchiCegarLoop]: Abstraction has 3833 states and 4416 transitions.
[2020-11-25 16:10:24,716 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 16:10:24,716 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3833 states and 4416 transitions.
[2020-11-25 16:10:24,728 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:10:24,728 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:24,728 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:24,731 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:24,731 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND TRUE   revert
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND FALSE  !(__exception)
[L2129]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4596]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6068]  COND FALSE  !(!!stopped_Stoppable[this])
[L4596]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND TRUE   revert
[L2129]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2130]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _allowed_ERC20[this][sender_s1113][msgsender_MSG] == old(_allowed_ERC20[this][sender_s1113][msgsender_MSG]) - amount_s1113) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND FALSE  !(__exception)
[L2129]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4596]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6068]  COND FALSE  !(!!stopped_Stoppable[this])
[L4596]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND TRUE   revert
[L2129]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2130]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _allowed_ERC20[this][sender_s1113][msgsender_MSG] == old(_allowed_ERC20[this][sender_s1113][msgsender_MSG]) - amount_s1113) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:10:24,737 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:24,737 INFO  L82        PathProgramCache]: Analyzing trace with hash 1609721371, now seen corresponding path program 1 times
[2020-11-25 16:10:24,738 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:24,750 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:10:24,781 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:10:24,781 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:10:24,781 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:10:24,782 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:10:24,783 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:10:24,783 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:10:24,783 INFO  L87              Difference]: Start difference. First operand 3833 states and 4416 transitions. cyclomatic complexity: 585 Second operand 3 states.
[2020-11-25 16:10:24,913 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:10:24,913 INFO  L93              Difference]: Finished difference Result 5011 states and 5800 transitions.
[2020-11-25 16:10:24,913 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:10:24,914 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5011 states and 5800 transitions.
[2020-11-25 16:10:24,930 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:10:24,949 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5011 states to 5011 states and 5800 transitions.
[2020-11-25 16:10:24,949 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1188
[2020-11-25 16:10:24,950 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1188
[2020-11-25 16:10:24,950 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5011 states and 5800 transitions.
[2020-11-25 16:10:24,956 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:10:24,956 INFO  L728         BuchiCegarLoop]: Abstraction has 5011 states and 5800 transitions.
[2020-11-25 16:10:24,960 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5011 states and 5800 transitions.
[2020-11-25 16:10:24,999 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5011 to 4237.
[2020-11-25 16:10:24,999 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4237 states.
[2020-11-25 16:10:25,004 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4237 states to 4237 states and 4866 transitions.
[2020-11-25 16:10:25,004 INFO  L751         BuchiCegarLoop]: Abstraction has 4237 states and 4866 transitions.
[2020-11-25 16:10:25,004 INFO  L631         BuchiCegarLoop]: Abstraction has 4237 states and 4866 transitions.
[2020-11-25 16:10:25,004 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 16:10:25,004 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4237 states and 4866 transitions.
[2020-11-25 16:10:25,009 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:10:25,010 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:25,010 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:25,012 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:25,012 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND TRUE   !(account_s654 != null)
[L3742]              revert := true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND TRUE   revert
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND FALSE  !(__exception)
[L2129]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4596]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6068]  COND TRUE   !!stopped_Stoppable[this]
[L6069]              revert := true;
[L4596]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND TRUE   revert
[L2129]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2130]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _allowed_ERC20[this][sender_s1113][msgsender_MSG] == old(_allowed_ERC20[this][sender_s1113][msgsender_MSG]) - amount_s1113) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND FALSE  !(__exception)
[L2129]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4596]  CALL        call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6068]  COND TRUE   !!stopped_Stoppable[this]
[L6069]              revert := true;
[L4596]  RET         call enabled_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4597]  COND TRUE   revert
[L2129]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2130]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((__ret_0_ == true && _allowed_ERC20[this][sender_s1113][msgsender_MSG] == old(_allowed_ERC20[this][sender_s1113][msgsender_MSG]) - amount_s1113) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowed_ERC20[this][p1][p2] == old(_allowed_ERC20[this][p1][p2])) && _lockTimes_EXEToken[this] == old(_lockTimes_EXEToken[this])) && _lockAmounts_EXEToken[this] == old(_lockAmounts_EXEToken[this])) && stopped_Stoppable[this] == old(stopped_Stoppable[this])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                 revert := revert_hold;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:10:25,016 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:25,017 INFO  L82        PathProgramCache]: Analyzing trace with hash -2020624154, now seen corresponding path program 1 times
[2020-11-25 16:10:25,017 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:25,032 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:10:25,093 INFO  L134       CoverageAnalysis]: Checked inductivity of 131 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 131 trivial. 0 not checked.
[2020-11-25 16:10:25,093 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:10:25,093 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 16:10:25,094 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:10:25,094 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 16:10:25,094 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 16:10:25,094 INFO  L87              Difference]: Start difference. First operand 4237 states and 4866 transitions. cyclomatic complexity: 631 Second operand 3 states.
[2020-11-25 16:10:25,173 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:10:25,173 INFO  L93              Difference]: Finished difference Result 5011 states and 5622 transitions.
[2020-11-25 16:10:25,173 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 16:10:25,173 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5011 states and 5622 transitions.
[2020-11-25 16:10:25,189 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 16:10:25,208 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5011 states to 4657 states and 5204 transitions.
[2020-11-25 16:10:25,208 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1061
[2020-11-25 16:10:25,209 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1099
[2020-11-25 16:10:25,209 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4657 states and 5204 transitions.
[2020-11-25 16:10:25,214 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:10:25,214 INFO  L728         BuchiCegarLoop]: Abstraction has 4657 states and 5204 transitions.
[2020-11-25 16:10:25,218 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4657 states and 5204 transitions.
[2020-11-25 16:10:25,266 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4657 to 3991.
[2020-11-25 16:10:25,266 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3991 states.
[2020-11-25 16:10:25,271 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3991 states to 3991 states and 4378 transitions.
[2020-11-25 16:10:25,271 INFO  L751         BuchiCegarLoop]: Abstraction has 3991 states and 4378 transitions.
[2020-11-25 16:10:25,271 INFO  L631         BuchiCegarLoop]: Abstraction has 3991 states and 4378 transitions.
[2020-11-25 16:10:25,271 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 16:10:25,271 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3991 states and 4378 transitions.
[2020-11-25 16:10:25,276 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 16:10:25,276 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:25,276 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:25,279 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:25,279 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND TRUE   !!__tmp__stopped_Stoppable[this]
[L6061]              revert := true;
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND TRUE   !!__tmp__stopped_Stoppable[this]
[L6061]              revert := true;
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:10:25,285 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:25,285 INFO  L82        PathProgramCache]: Analyzing trace with hash 1525857196, now seen corresponding path program 1 times
[2020-11-25 16:10:25,286 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:25,302 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:10:25,389 INFO  L134       CoverageAnalysis]: Checked inductivity of 136 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 136 trivial. 0 not checked.
[2020-11-25 16:10:25,390 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:10:25,390 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 16:10:25,390 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:10:25,390 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 16:10:25,390 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-11-25 16:10:25,390 INFO  L87              Difference]: Start difference. First operand 3991 states and 4378 transitions. cyclomatic complexity: 389 Second operand 13 states.
[2020-11-25 16:10:28,587 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:10:28,587 INFO  L93              Difference]: Finished difference Result 6537 states and 7239 transitions.
[2020-11-25 16:10:28,587 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 16:10:28,587 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6537 states and 7239 transitions.
[2020-11-25 16:10:28,605 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-25 16:10:28,623 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6537 states to 6527 states and 7227 transitions.
[2020-11-25 16:10:28,623 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1542
[2020-11-25 16:10:28,624 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1542
[2020-11-25 16:10:28,625 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6527 states and 7227 transitions.
[2020-11-25 16:10:28,630 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:10:28,630 INFO  L728         BuchiCegarLoop]: Abstraction has 6527 states and 7227 transitions.
[2020-11-25 16:10:28,634 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6527 states and 7227 transitions.
[2020-11-25 16:10:28,708 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6527 to 5625.
[2020-11-25 16:10:28,708 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5625 states.
[2020-11-25 16:10:28,715 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5625 states to 5625 states and 6304 transitions.
[2020-11-25 16:10:28,715 INFO  L751         BuchiCegarLoop]: Abstraction has 5625 states and 6304 transitions.
[2020-11-25 16:10:28,715 INFO  L631         BuchiCegarLoop]: Abstraction has 5625 states and 6304 transitions.
[2020-11-25 16:10:28,715 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 16:10:28,715 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5625 states and 6304 transitions.
[2020-11-25 16:10:28,722 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 16:10:28,722 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:28,722 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:28,725 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:28,725 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND TRUE   !(b_s82 <= a_s82)
[L3127]              revert := true;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND TRUE   revert
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND TRUE   !(b_s82 <= a_s82)
[L3127]              revert := true;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND TRUE   revert
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:10:28,738 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:28,738 INFO  L82        PathProgramCache]: Analyzing trace with hash 1210174393, now seen corresponding path program 1 times
[2020-11-25 16:10:28,738 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:28,752 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:10:28,896 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 137 trivial. 0 not checked.
[2020-11-25 16:10:28,896 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:10:28,897 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [17] imperfect sequences [] total 17
[2020-11-25 16:10:28,897 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:10:28,897 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 18 interpolants.
[2020-11-25 16:10:28,897 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=34, Invalid=272, Unknown=0, NotChecked=0, Total=306
[2020-11-25 16:10:28,897 INFO  L87              Difference]: Start difference. First operand 5625 states and 6304 transitions. cyclomatic complexity: 683 Second operand 18 states.
[2020-11-25 16:10:31,884 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:10:31,885 INFO  L93              Difference]: Finished difference Result 5941 states and 6819 transitions.
[2020-11-25 16:10:31,885 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 16:10:31,885 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5941 states and 6819 transitions.
[2020-11-25 16:10:31,899 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 28
[2020-11-25 16:10:31,917 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5941 states to 5941 states and 6819 transitions.
[2020-11-25 16:10:31,917 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1469
[2020-11-25 16:10:31,918 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1469
[2020-11-25 16:10:31,918 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5941 states and 6819 transitions.
[2020-11-25 16:10:31,923 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:10:31,923 INFO  L728         BuchiCegarLoop]: Abstraction has 5941 states and 6819 transitions.
[2020-11-25 16:10:31,926 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5941 states and 6819 transitions.
[2020-11-25 16:10:31,966 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5941 to 5861.
[2020-11-25 16:10:31,966 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5861 states.
[2020-11-25 16:10:31,973 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5861 states to 5861 states and 6631 transitions.
[2020-11-25 16:10:31,973 INFO  L751         BuchiCegarLoop]: Abstraction has 5861 states and 6631 transitions.
[2020-11-25 16:10:31,973 INFO  L631         BuchiCegarLoop]: Abstraction has 5861 states and 6631 transitions.
[2020-11-25 16:10:31,973 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 16:10:31,973 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5861 states and 6631 transitions.
[2020-11-25 16:10:31,979 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-25 16:10:31,979 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:31,979 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:31,981 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:31,981 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND TRUE   !!__var_31
[L4576]              revert := true;
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND TRUE   choice == 21
[L6891]              gas := gas - 21000;
[L6892]  COND FALSE  !(gas >= 0)
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:10:31,985 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:31,985 INFO  L82        PathProgramCache]: Analyzing trace with hash 79915899, now seen corresponding path program 1 times
[2020-11-25 16:10:31,986 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:31,998 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:10:32,098 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 139 trivial. 0 not checked.
[2020-11-25 16:10:32,098 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:10:32,098 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 16:10:32,099 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:10:32,099 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 16:10:32,099 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=24, Invalid=132, Unknown=0, NotChecked=0, Total=156
[2020-11-25 16:10:32,099 INFO  L87              Difference]: Start difference. First operand 5861 states and 6631 transitions. cyclomatic complexity: 778 Second operand 13 states.
[2020-11-25 16:10:34,578 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:10:34,578 INFO  L93              Difference]: Finished difference Result 10049 states and 11642 transitions.
[2020-11-25 16:10:34,578 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 16:10:34,579 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10049 states and 11642 transitions.
[2020-11-25 16:10:34,601 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 40
[2020-11-25 16:10:34,629 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10049 states to 10049 states and 11642 transitions.
[2020-11-25 16:10:34,629 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2430
[2020-11-25 16:10:34,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2430
[2020-11-25 16:10:34,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10049 states and 11642 transitions.
[2020-11-25 16:10:34,637 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:10:34,637 INFO  L728         BuchiCegarLoop]: Abstraction has 10049 states and 11642 transitions.
[2020-11-25 16:10:34,641 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10049 states and 11642 transitions.
[2020-11-25 16:10:34,700 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10049 to 8979.
[2020-11-25 16:10:34,701 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8979 states.
[2020-11-25 16:10:34,713 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8979 states to 8979 states and 10448 transitions.
[2020-11-25 16:10:34,713 INFO  L751         BuchiCegarLoop]: Abstraction has 8979 states and 10448 transitions.
[2020-11-25 16:10:34,713 INFO  L631         BuchiCegarLoop]: Abstraction has 8979 states and 10448 transitions.
[2020-11-25 16:10:34,713 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 16:10:34,713 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8979 states and 10448 transitions.
[2020-11-25 16:10:34,723 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 32
[2020-11-25 16:10:34,723 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:34,723 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:34,724 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:34,724 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND TRUE   !(value_s512 <= __tmp___balances_ERC20[this][from_s512])
[L3547]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND TRUE   choice == 21
[L6891]              gas := gas - 21000;
[L6892]  COND FALSE  !(gas >= 0)
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:10:34,728 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:34,728 INFO  L82        PathProgramCache]: Analyzing trace with hash 1006528369, now seen corresponding path program 1 times
[2020-11-25 16:10:34,728 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:34,741 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:10:34,953 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 10 proven. 0 refuted. 0 times theorem prover too weak. 129 trivial. 0 not checked.
[2020-11-25 16:10:34,954 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:10:34,954 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-25 16:10:34,954 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:10:34,954 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 16:10:34,954 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=51, Invalid=549, Unknown=0, NotChecked=0, Total=600
[2020-11-25 16:10:34,954 INFO  L87              Difference]: Start difference. First operand 8979 states and 10448 transitions. cyclomatic complexity: 1479 Second operand 25 states.
[2020-11-25 16:10:39,790 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:10:39,791 INFO  L93              Difference]: Finished difference Result 9243 states and 11230 transitions.
[2020-11-25 16:10:39,791 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 16:10:39,791 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9243 states and 11230 transitions.
[2020-11-25 16:10:39,815 INFO  L131   ngComponentsAnalysis]: Automaton has 12 accepting balls. 68
[2020-11-25 16:10:39,845 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9243 states to 9243 states and 11230 transitions.
[2020-11-25 16:10:39,845 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2301
[2020-11-25 16:10:39,846 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2301
[2020-11-25 16:10:39,846 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9243 states and 11230 transitions.
[2020-11-25 16:10:39,854 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:10:39,854 INFO  L728         BuchiCegarLoop]: Abstraction has 9243 states and 11230 transitions.
[2020-11-25 16:10:39,858 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9243 states and 11230 transitions.
[2020-11-25 16:10:39,922 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9243 to 9105.
[2020-11-25 16:10:39,922 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9105 states.
[2020-11-25 16:10:39,938 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9105 states to 9105 states and 10793 transitions.
[2020-11-25 16:10:39,938 INFO  L751         BuchiCegarLoop]: Abstraction has 9105 states and 10793 transitions.
[2020-11-25 16:10:39,938 INFO  L631         BuchiCegarLoop]: Abstraction has 9105 states and 10793 transitions.
[2020-11-25 16:10:39,939 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 16:10:39,939 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9105 states and 10793 transitions.
[2020-11-25 16:10:39,951 INFO  L131   ngComponentsAnalysis]: Automaton has 7 accepting balls. 46
[2020-11-25 16:10:39,951 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:39,951 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:39,953 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:39,953 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND FALSE  !(!(value_s512 <= __tmp___balances_ERC20[this][from_s512]))
[L3550]  COND TRUE   !(value_s512 <= __tmp___allowed_ERC20[this][from_s512][msgsender_MSG])
[L3551]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND TRUE   choice == 21
[L6891]              gas := gas - 21000;
[L6892]  COND FALSE  !(gas >= 0)
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:10:39,956 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:39,957 INFO  L82        PathProgramCache]: Analyzing trace with hash -74739500, now seen corresponding path program 1 times
[2020-11-25 16:10:39,957 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:39,970 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:10:40,126 INFO  L134       CoverageAnalysis]: Checked inductivity of 139 backedges. 8 proven. 0 refuted. 0 times theorem prover too weak. 131 trivial. 0 not checked.
[2020-11-25 16:10:40,127 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:10:40,127 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 16:10:40,127 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 16:10:40,127 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 16:10:40,127 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 16:10:40,128 INFO  L87              Difference]: Start difference. First operand 9105 states and 10793 transitions. cyclomatic complexity: 1703 Second operand 16 states.
[2020-11-25 16:10:42,667 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:10:42,668 INFO  L93              Difference]: Finished difference Result 9253 states and 11443 transitions.
[2020-11-25 16:10:42,668 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 21 states. 
[2020-11-25 16:10:42,668 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9253 states and 11443 transitions.
[2020-11-25 16:10:42,693 INFO  L131   ngComponentsAnalysis]: Automaton has 13 accepting balls. 76
[2020-11-25 16:10:42,723 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9253 states to 9253 states and 11443 transitions.
[2020-11-25 16:10:42,723 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2324
[2020-11-25 16:10:42,724 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2324
[2020-11-25 16:10:42,724 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9253 states and 11443 transitions.
[2020-11-25 16:10:42,732 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:10:42,732 INFO  L728         BuchiCegarLoop]: Abstraction has 9253 states and 11443 transitions.
[2020-11-25 16:10:42,736 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9253 states and 11443 transitions.
[2020-11-25 16:10:42,800 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9253 to 9163.
[2020-11-25 16:10:42,800 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9163 states.
[2020-11-25 16:10:42,817 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9163 states to 9163 states and 11097 transitions.
[2020-11-25 16:10:42,817 INFO  L751         BuchiCegarLoop]: Abstraction has 9163 states and 11097 transitions.
[2020-11-25 16:10:42,817 INFO  L631         BuchiCegarLoop]: Abstraction has 9163 states and 11097 transitions.
[2020-11-25 16:10:42,817 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 16:10:42,817 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9163 states and 11097 transitions.
[2020-11-25 16:10:42,829 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 62
[2020-11-25 16:10:42,829 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:42,829 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:42,830 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:42,830 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND FALSE  !(!(value_s512 <= __tmp___balances_ERC20[this][from_s512]))
[L3550]  COND FALSE  !(!(value_s512 <= __tmp___allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3554]              __var_7 := null;
[L3555]  COND TRUE   !(to_s512 != null)
[L3556]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND TRUE   choice == 21
[L6891]              gas := gas - 21000;
[L6892]  COND FALSE  !(gas >= 0)
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:10:42,833 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:42,833 INFO  L82        PathProgramCache]: Analyzing trace with hash 1512865655, now seen corresponding path program 1 times
[2020-11-25 16:10:42,834 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:42,847 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:10:42,863 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:10:42,960 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:42,960 INFO  L82        PathProgramCache]: Analyzing trace with hash 1874439341, now seen corresponding path program 1 times
[2020-11-25 16:10:42,960 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:42,962 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 16:10:42,968 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 16:10:42,968 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 16:10:42,968 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 16:10:42,968 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 16:10:42,968 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 16:10:42,968 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 16:10:42,968 INFO  L87              Difference]: Start difference. First operand 9163 states and 11097 transitions. cyclomatic complexity: 1953 Second operand 4 states.
[2020-11-25 16:10:43,387 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 16:10:43,388 INFO  L93              Difference]: Finished difference Result 9809 states and 12441 transitions.
[2020-11-25 16:10:43,388 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 16:10:43,388 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9809 states and 12441 transitions.
[2020-11-25 16:10:43,434 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 124
[2020-11-25 16:10:43,487 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9809 states to 9809 states and 12441 transitions.
[2020-11-25 16:10:43,487 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2360
[2020-11-25 16:10:43,489 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2360
[2020-11-25 16:10:43,489 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9809 states and 12441 transitions.
[2020-11-25 16:10:43,500 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 16:10:43,500 INFO  L728         BuchiCegarLoop]: Abstraction has 9809 states and 12441 transitions.
[2020-11-25 16:10:43,505 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9809 states and 12441 transitions.
[2020-11-25 16:10:43,636 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9809 to 9188.
[2020-11-25 16:10:43,636 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9188 states.
[2020-11-25 16:10:43,674 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9188 states to 9188 states and 10953 transitions.
[2020-11-25 16:10:43,674 INFO  L751         BuchiCegarLoop]: Abstraction has 9188 states and 10953 transitions.
[2020-11-25 16:10:43,674 INFO  L631         BuchiCegarLoop]: Abstraction has 9188 states and 10953 transitions.
[2020-11-25 16:10:43,674 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 16:10:43,674 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9188 states and 10953 transitions.
[2020-11-25 16:10:43,685 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 62
[2020-11-25 16:10:43,685 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 16:10:43,685 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 16:10:43,687 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 16:10:43,687 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_EXEToken0 := false;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L7038]              assume null == 0;
[L7039]  CALL        call this := FreshRefGenerator__success();
[L3029]              havoc newRef;
[L3030]              assume Alloc[newRef] == false;
[L3031]              Alloc[newRef] := true;
[L3032]              assume newRef != null;
[L7039]  RET         call this := FreshRefGenerator__success();
[L7040]              assume now >= 0;
[L7041]              assume DType[this] == EXEToken;
[L7042]              assume msgvalue_MSG == 0;
[L7043]              gas := gas - 53000;
[L7044]  CALL        call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L7045]              assume !revert && gas >= 0;
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND FALSE  !(choice == 21)
[L6896]  COND FALSE  !(choice == 20)
[L6902]  COND FALSE  !(choice == 19)
[L6908]  COND FALSE  !(choice == 18)
[L6914]  COND FALSE  !(choice == 17)
[L6920]  COND FALSE  !(choice == 16)
[L6927]  COND FALSE  !(choice == 15)
[L6934]  COND TRUE   choice == 14
[L6935]              gas := gas - 21000;
[L6936]  COND TRUE   gas >= 0
[L6937]              assume amount_s1113 >= 0 && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6938]              assume msgvalue_MSG == 0;
[L6939]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND FALSE  !(!(value_s512 <= __tmp___balances_ERC20[this][from_s512]))
[L3550]  COND FALSE  !(!(value_s512 <= __tmp___allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3554]              __var_7 := null;
[L3555]  COND TRUE   !(to_s512 != null)
[L3556]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L7048]  RET         call CorralChoice_EXEToken(this);

Loop:
[L7048]  CALL        call CorralChoice_EXEToken(this);
[L6824]              havoc msgsender_MSG;
[L6825]              havoc msgvalue_MSG;
[L6826]              havoc choice;
[L6827]              havoc __ret_0_owner;
[L6828]              havoc newOwner_s184;
[L6829]              havoc __ret_0_totalSupply;
[L6830]              havoc owner_s312;
[L6831]              havoc __ret_0_balanceOf;
[L6832]              havoc owner_s328;
[L6833]              havoc spender_s328;
[L6834]              havoc __ret_0_allowance;
[L6835]              havoc recipient_s1083;
[L6836]              havoc amount_s1083;
[L6837]              havoc __ret_0_transfer;
[L6838]              havoc spender_s425;
[L6839]              havoc value_s425;
[L6840]              havoc __ret_0_approve;
[L6841]              havoc sender_s1113;
[L6842]              havoc recipient_s1113;
[L6843]              havoc amount_s1113;
[L6844]              havoc __ret_0_transferFrom;
[L6845]              havoc spender_s562;
[L6846]              havoc addedValue_s562;
[L6847]              havoc __ret_0_increaseAllowance;
[L6848]              havoc spender_s612;
[L6849]              havoc subtractedValue_s612;
[L6850]              havoc __ret_0_decreaseAllowance;
[L6851]              havoc name_s778;
[L6852]              havoc symbol_s778;
[L6853]              havoc decimals_s778;
[L6854]              havoc __ret_0_name;
[L6855]              havoc __ret_0_symbol;
[L6856]              havoc __ret_0_decimals;
[L6857]              havoc value_s817;
[L6858]              havoc from_s830;
[L6859]              havoc value_s830;
[L6860]              havoc __ret_0_stopped;
[L6861]              havoc name_s916;
[L6862]              havoc symbol_s916;
[L6863]              havoc totalSupply_s916;
[L6864]              havoc decimals_s916;
[L6865]              havoc account_s942;
[L6866]              havoc amount_s942;
[L6867]              havoc __ret_0_mint;
[L6868]              havoc account_s988;
[L6869]              havoc releaseTime_s988;
[L6870]              havoc amount_s988;
[L6871]              havoc account_s1006;
[L6872]              havoc lockTime_s1006;
[L6873]              havoc lockAmount_s1006;
[L6874]              havoc tmpNow;
[L6875]              havoc gas;
[L6876]              assume gas > 4000000 && gas <= 8000000;
[L6877]              tmpNow := now;
[L6878]              havoc now;
[L6879]              assume now > tmpNow;
[L6880]              assume msgsender_MSG != null;
[L6881]              assume DType[msgsender_MSG] != SafeMath;
[L6882]              assume DType[msgsender_MSG] != Ownable;
[L6883]              assume DType[msgsender_MSG] != IERC20;
[L6884]              assume DType[msgsender_MSG] != ERC20;
[L6885]              assume DType[msgsender_MSG] != ERC20Detailed;
[L6886]              assume DType[msgsender_MSG] != ERC20Burnable;
[L6887]              assume DType[msgsender_MSG] != Stoppable;
[L6888]              assume DType[msgsender_MSG] != EXEToken;
[L6889]              Alloc[msgsender_MSG] := true;
[L6890]  COND TRUE   choice == 21
[L6891]              gas := gas - 21000;
[L6892]  COND TRUE   gas >= 0
[L6893]              assume msgvalue_MSG == 0;
[L6894]  CALL        call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L247]   CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L247]   RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L248]               assume !revert && gas >= 0;
[L6894]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);
[L7048]  RET         call CorralChoice_EXEToken(this);

[2020-11-25 16:10:43,690 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:43,690 INFO  L82        PathProgramCache]: Analyzing trace with hash 1512865655, now seen corresponding path program 2 times
[2020-11-25 16:10:43,691 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:43,704 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:10:43,718 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:10:43,757 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:43,757 INFO  L82        PathProgramCache]: Analyzing trace with hash 269513374, now seen corresponding path program 1 times
[2020-11-25 16:10:43,757 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:43,760 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:10:43,763 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:10:43,768 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 16:10:43,768 INFO  L82        PathProgramCache]: Analyzing trace with hash -592495980, now seen corresponding path program 1 times
[2020-11-25 16:10:43,769 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 16:10:43,783 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:10:43,800 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 673 to 1327
[2020-11-25 16:10:44,208 WARN  L188               SmtUtils]: Spent 129.00 ms on a formula simplification that was a NOOP. DAG size: 310
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.003s / 0.007s total
Resizing node table from 7933 to 15859
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
[2020-11-25 16:10:44,394 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 16:10:44,819 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 115 DAG size of output: 114
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 16:10:45,370 WARN  L188               SmtUtils]: Spent 438.00 ms on a formula simplification. DAG size of input: 289 DAG size of output: 272
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-25 16:10:45,726 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification that was a NOOP. DAG size: 296
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 16:10:46,345 WARN  L188               SmtUtils]: Spent 170.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 134
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #6: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #7: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 16:10:46,468 WARN  L188               SmtUtils]: Spent 102.00 ms on a formula simplification. DAG size of input: 102 DAG size of output: 67
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 16:10:46,758 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification. DAG size of input: 104 DAG size of output: 95
[2020-11-25 16:10:47,120 WARN  L188               SmtUtils]: Spent 360.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 188
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #9: 14051 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 14051 to 28099
Garbage collection #10: 28099 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 28099 to 56197
[2020-11-25 16:10:49,116 WARN  L188               SmtUtils]: Spent 1.85 s on a formula simplification. DAG size of input: 357 DAG size of output: 146
[2020-11-25 16:10:49,712 WARN  L188               SmtUtils]: Spent 594.00 ms on a formula simplification that was a NOOP. DAG size: 316
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 15859 to 31699
[2020-11-25 16:10:57,934 WARN  L188               SmtUtils]: Spent 8.09 s on a formula simplification. DAG size of input: 393 DAG size of output: 277
[2020-11-25 16:11:03,114 WARN  L188               SmtUtils]: Spent 5.18 s on a formula simplification. DAG size of input: 349 DAG size of output: 325
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #8: 14051 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 14051 to 28099
Garbage collection #9: 28099 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 28099 to 56197
Garbage collection #10: 56197 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 56197 to 106189
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #8: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #9: 19763 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19763 to 39521
Garbage collection #10: 39521 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 39521 to 79039
Garbage collection #11: 79039 nodes / 0 free / 0.002s / 0.003s total
Resizing node table from 79039 to 129037
Garbage collection #12: 129037 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 129037 to 179033
[2020-11-25 16:11:09,404 WARN  L188               SmtUtils]: Spent 5.91 s on a formula simplification. DAG size of input: 886 DAG size of output: 202
[2020-11-25 16:11:10,637 WARN  L188               SmtUtils]: Spent 1.23 s on a formula simplification that was a NOOP. DAG size: 395
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #8: 19763 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19763 to 39521
Garbage collection #9: 39521 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 39521 to 79039
[2020-11-25 16:11:17,573 WARN  L188               SmtUtils]: Spent 6.71 s on a formula simplification. DAG size of input: 459 DAG size of output: 326
[2020-11-25 16:11:18,960 WARN  L188               SmtUtils]: Spent 1.38 s on a formula simplification. DAG size of input: 564 DAG size of output: 518
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
[2020-11-25 16:11:19,704 WARN  L188               SmtUtils]: Spent 709.00 ms on a formula simplification. DAG size of input: 269 DAG size of output: 234
[2020-11-25 16:11:19,998 WARN  L188               SmtUtils]: Spent 273.00 ms on a formula simplification that was a NOOP. DAG size: 357
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #8: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #9: 19763 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19763 to 39521
[2020-11-25 16:11:20,700 WARN  L188               SmtUtils]: Spent 670.00 ms on a formula simplification. DAG size of input: 247 DAG size of output: 234
[2020-11-25 16:11:21,149 WARN  L188               SmtUtils]: Spent 447.00 ms on a formula simplification. DAG size of input: 359 DAG size of output: 358
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #9: 31699 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 31699 to 63397
[2020-11-25 16:11:22,382 WARN  L188               SmtUtils]: Spent 1.21 s on a formula simplification. DAG size of input: 373 DAG size of output: 353
[2020-11-25 16:11:22,397 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:11:22,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 16:11:22,422 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 04:11:22 BasicIcfg
[2020-11-25 16:11:22,423 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 16:11:22,423 INFO  L168              Benchmark]: Toolchain (without parser) took 62112.65 ms. Allocated memory was 1.0 GB in the beginning and 3.4 GB in the end (delta: 2.4 GB). Free memory was 940.6 MB in the beginning and 1.9 GB in the end (delta: -979.3 MB). Peak memory consumption was 2.6 GB. Max. memory is 15.3 GB.
[2020-11-25 16:11:22,423 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:11:22,423 INFO  L168              Benchmark]: Boogie Preprocessor took 116.52 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 919.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:22,424 INFO  L168              Benchmark]: UtopiaSpecLang took 72.62 ms. Allocated memory is still 1.0 GB. Free memory was 919.0 MB in the beginning and 908.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:22,424 INFO  L168              Benchmark]: Boogie Printer took 22.19 ms. Allocated memory is still 1.0 GB. Free memory is still 908.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 16:11:22,424 INFO  L168              Benchmark]: RCFGBuilder took 1094.10 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 908.3 MB in the beginning and 998.4 MB in the end (delta: -90.1 MB). Peak memory consumption was 196.6 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:22,424 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.86 ms. Allocated memory is still 1.1 GB. Free memory was 998.4 MB in the beginning and 991.0 MB in the end (delta: 7.4 MB). Peak memory consumption was 7.4 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:22,425 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1802.93 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 162.0 MB). Free memory was 991.0 MB in the beginning and 904.4 MB in the end (delta: 86.6 MB). Peak memory consumption was 503.7 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:22,425 INFO  L168              Benchmark]: BlockEncodingV2 took 163.43 ms. Allocated memory is still 1.3 GB. Free memory was 904.4 MB in the beginning and 815.5 MB in the end (delta: 88.9 MB). Peak memory consumption was 88.9 MB. Max. memory is 15.3 GB.
[2020-11-25 16:11:22,425 INFO  L168              Benchmark]: BuchiAutomizer took 58799.01 ms. Allocated memory was 1.3 GB in the beginning and 3.4 GB in the end (delta: 2.2 GB). Free memory was 815.5 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
[2020-11-25 16:11:22,427 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6234 locations, 11169 edges
  - StatisticsResult: Encoded RCFG
    6128 locations, 10880 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 116.52 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 919.0 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 72.62 ms. Allocated memory is still 1.0 GB. Free memory was 919.0 MB in the beginning and 908.3 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 22.19 ms. Allocated memory is still 1.0 GB. Free memory is still 908.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 1094.10 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 62.4 MB). Free memory was 908.3 MB in the beginning and 998.4 MB in the end (delta: -90.1 MB). Peak memory consumption was 196.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.86 ms. Allocated memory is still 1.1 GB. Free memory was 998.4 MB in the beginning and 991.0 MB in the end (delta: 7.4 MB). Peak memory consumption was 7.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1802.93 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 162.0 MB). Free memory was 991.0 MB in the beginning and 904.4 MB in the end (delta: 86.6 MB). Peak memory consumption was 503.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 163.43 ms. Allocated memory is still 1.3 GB. Free memory was 904.4 MB in the beginning and 815.5 MB in the end (delta: 88.9 MB). Peak memory consumption was 88.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 58799.01 ms. Allocated memory was 1.3 GB in the beginning and 3.4 GB in the end (delta: 2.2 GB). Free memory was 815.5 MB in the beginning and 1.9 GB in the end (delta: -1.1 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2514 locations, 3422 edges
  - StatisticsResult: BuchiProgram size
    6234 locations, 11169 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.9 modules have a trivial ranking function, the largest among these consists of 25 locations. The remainder module has 9188 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 58.7s and 10 iterations.  TraceHistogramMax:5. Analysis of lassos took 40.2s. Construction of modules took 12.3s. BÃ¼chi inclusion checks took 4.6s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 9 MinimizatonAttempts, 4341 StatesRemovedByMinimization, 8 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 9188 states and ocurred in iteration 9.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 40199 SDtfs, 48896 SDslu, 58942 SDs, 0 SdLazy, 261294 SolverSat, 9856 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 12.3s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(427332528) = (new EXEToken)({from : 427332519, name : 427332523, symbol : 427332522, totalSupply : 427332520, decimals : 0});
[L1770]              havoc __exception;
[L1771]              revert := false;
[L1772]  COND FALSE  !(__exception)
[L1799]  CALL        call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4315]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4315]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4316]  COND FALSE  !(revert)
[L4319]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L3927]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3927]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3902]              assume msgsender_MSG != null;
[L3903]              Balance[this] := 0;
[L3904]              _name_ERC20Detailed[this] := 427332508;
[L3905]              _symbol_ERC20Detailed[this] := 427332508;
[L3906]              _decimals_ERC20Detailed[this] := 0;
[L3908]              _name_ERC20Detailed[this] := name_s778;
[L3909]              _symbol_ERC20Detailed[this] := symbol_s778;
[L3910]              _decimals_ERC20Detailed[this] := decimals_s778;
[L3931]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s778, symbol_s778, decimals_s778);
[L3932]  COND FALSE  !(revert)
[L4319]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, decimals_s916);
[L4320]  COND FALSE  !(revert)
[L4323]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4323]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4324]  COND FALSE  !(revert)
[L4327]  CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4007]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L4007]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4008]  COND FALSE  !(revert)
[L4011]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3398]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3352]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3337]              assume msgsender_MSG != null;
[L3338]              Balance[this] := 0;
[L3352]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3353]  COND FALSE  !(revert)
[L3398]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3399]  COND FALSE  !(revert)
[L3402]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3374]              assume msgsender_MSG != null;
[L3375]              Balance[this] := 0;
[L3376]              _balances_ERC20[this] := zeroRefintArr();
[L3377]              sum__balances0[this] := 0;
[L3378]              _allowed_ERC20[this] := zeroRefRefintArr();
[L3379]              sum__allowed1[this] := 0;
[L3380]              _totalSupply_ERC20[this] := 0;
[L3402]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3403]  COND FALSE  !(revert)
[L4011]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4012]  COND FALSE  !(revert)
[L4015]  CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3984]              assume msgsender_MSG != null;
[L3985]              Balance[this] := 0;
[L4015]  RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4016]  COND FALSE  !(revert)
[L4327]  RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4328]  COND FALSE  !(revert)
[L4331]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4331]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4332]  COND FALSE  !(revert)
[L4335]  CALL        call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4157]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3221]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3204]              assume msgsender_MSG != null;
[L3205]              Balance[this] := 0;
[L3206]              _owner_Ownable[this] := null;
[L3208]              _owner_Ownable[this] := msgsender_MSG;
[L3221]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3222]  COND FALSE  !(revert)
[L4157]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4158]  COND FALSE  !(revert)
[L4161]  CALL        call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4137]              assume msgsender_MSG != null;
[L4138]              Balance[this] := 0;
[L4139]              stopped_Stoppable[this] := false;
[L4161]  RET         call Stoppable_Stoppable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4162]  COND FALSE  !(revert)
[L4335]  RET         call Stoppable_Stoppable__success(this, msgsender_MSG, msgvalue_MSG);
[L4336]  COND FALSE  !(revert)
[L4339]  CALL        call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4251]              assume msgsender_MSG != null;
[L4252]              Balance[this] := 0;
[L4253]              _lockTimes_EXEToken[this] := zeroRefintArr();
[L4254]              sum__lockTimes2[this] := 0;
[L4255]              _lockAmounts_EXEToken[this] := zeroRefintArr();
[L4256]              sum__lockAmounts3[this] := 0;
[L4258]  COND TRUE   DType[this] == EXEToken
[L4259]  CALL        call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L4259]  RET         call __var_23 := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4260]  COND FALSE  !(revert)
[L4266]              __var_24 := decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4267]  COND TRUE   DType[this] == EXEToken
[L4268]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3740]              __var_15 := null;
[L3741]  COND FALSE  !(!(account_s654 != null))
[L3745]  CALL        call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3745]  RET         call __var_16 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s654);
[L3746]  COND FALSE  !(revert)
[L3749]              _totalSupply_ERC20[this] := __var_16;
[L3750]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3162]              c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3163]  COND FALSE  !(!(c_s106 >= a_s106))
[L3167]              __ret_0_ := c_s106;
[L3750]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s654], amount_s654);
[L3751]  COND FALSE  !(revert)
[L3754]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s654];
[L3755]              _balances_ERC20[this][account_s654] := __var_17;
[L3756]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s654];
[L3757]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4268]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_23, nonlinearMul(totalSupply_s916, nonlinearPow(10, decimals_s916 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L4269]  COND FALSE  !(revert)
[L4339]  RET         call EXEToken_EXEToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L4340]  COND FALSE  !(revert)
[L1799]  RET         call EXEToken_EXEToken__success(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
[L1800]              assume !revert && gas >= 0;
[L7044]  RET         call EXEToken_EXEToken(this, msgsender_MSG, msgvalue_MSG, name_s916, symbol_s916, totalSupply_s916, decimals_s916);
EXEToken(427332528).transferFrom~address~address~uint256.gas(3979002)({from : 427332526, sender : 0, recipient : 0, amount : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != sender_s1113 || p2 != msgsender_MSG) && sender_s1113 == recipient_s1113) && amount_s1113 <= _balances_ERC20[this][sender_s1113]) && amount_s1113 <= _allowed_ERC20[this][sender_s1113][msgsender_MSG]) && amount_s1113 >= 0) && amount_s1113 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s1113] >= 0) && _balances_ERC20[this][recipient_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s1113] >= 0) && _balances_ERC20[this][sender_s1113] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] >= 0) && _allowed_ERC20[this][sender_s1113][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_EXEToken0 := true;
[L3]                 call_transferFrom_EXEToken0 := false;
[L3]                 revert := revert_hold;
[L2100]              havoc __exception;
[L2101]              revert := false;
[L2102]  COND TRUE   __exception
[L2103]              __tmp__Balance := Balance;
[L2104]              __tmp__DType := DType;
[L2105]              __tmp__Alloc := Alloc;
[L2106]              __tmp__balance_ADDR := balance_ADDR;
[L2107]              __tmp__M_Ref_int := M_Ref_int;
[L2108]              __tmp__sum__balances0 := sum__balances0;
[L2109]              __tmp__alloc__allowed_ERC20_lvl0 := alloc__allowed_ERC20_lvl0;
[L2110]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2111]              __tmp__sum__allowed1 := sum__allowed1;
[L2112]              __tmp__sum__lockTimes2 := sum__lockTimes2;
[L2113]              __tmp__sum__lockAmounts3 := sum__lockAmounts3;
[L2114]              __tmp__Length := Length;
[L2115]              __tmp__now := now;
[L2116]              __tmp___owner_Ownable := _owner_Ownable;
[L2117]              __tmp___balances_ERC20 := _balances_ERC20;
[L2118]              __tmp___allowed_ERC20 := _allowed_ERC20;
[L2119]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2120]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2121]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2122]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2123]              __tmp__stopped_Stoppable := stopped_Stoppable;
[L2124]              __tmp___lockTimes_EXEToken := _lockTimes_EXEToken;
[L2125]              __tmp___lockAmounts_EXEToken := _lockAmounts_EXEToken;
[L2126]  CALL        call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4567]  CALL        call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6060]  COND FALSE  !(!!__tmp__stopped_Stoppable[this])
[L4567]  RET         call enabled_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L4568]  COND FALSE  !(revert)
[L4571]  CALL        call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4451]  COND TRUE   __tmp__DType[this] == EXEToken
[L4452]  CALL        call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4452]  RET         call __var_25 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4453]  COND FALSE  !(revert)
[L4459]  COND TRUE   __tmp__DType[this] == EXEToken
[L4460]  CALL        call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L3422]              __ret_0_ := __tmp___balances_ERC20[this][owner_s312];
[L4460]  RET         call __var_27 := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s1055);
[L4461]  COND FALSE  !(revert)
[L4467]  CALL        call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L3126]  COND FALSE  !(!(b_s82 <= a_s82))
[L3130]              c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3131]              __ret_0_ := c_s82;
[L4467]  RET         call __var_26 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __var_27, __tmp___lockAmounts_EXEToken[this][account_s1055]);
[L4468]  COND FALSE  !(revert)
[L4471]              __ret_0_ := ((__tmp___lockTimes_EXEToken[this][account_s1055] != 0 && __tmp___lockAmounts_EXEToken[this][account_s1055] != 0) && __tmp___lockTimes_EXEToken[this][account_s1055] > __tmp__now) && (__var_25 <= __tmp___lockAmounts_EXEToken[this][account_s1055] || __var_26 < amount_s1055);
[L4571]  RET         call __var_31 := _isLocked~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, amount_s1113);
[L4572]  COND FALSE  !(revert)
[L4575]  COND FALSE  !(!!__var_31)
[L4579]  COND TRUE   __tmp__DType[this] == EXEToken
[L4580]  CALL        call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L3546]  COND FALSE  !(!(value_s512 <= __tmp___balances_ERC20[this][from_s512]))
[L3550]  COND FALSE  !(!(value_s512 <= __tmp___allowed_ERC20[this][from_s512][msgsender_MSG]))
[L3554]              __var_7 := null;
[L3555]  COND TRUE   !(to_s512 != null)
[L3556]              revert := true;
[L4580]  RET         call __var_32 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L4581]  COND TRUE   revert
[L2126]  RET         call __ret_0_ := transferFrom~address~address~uint256_EXEToken__fail(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);
[L2127]              assume revert || gas < 0;
[L6939]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_EXEToken(this, msgsender_MSG, msgvalue_MSG, sender_s1113, recipient_s1113, amount_s1113);

Loop:
Ownable(427332528).owner.gas(3979001)({from : 427332511});
[L218]               havoc __exception;
[L219]               revert := false;
[L220]   COND FALSE  !(__exception)
[L247]   CALL        call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3235]              __ret_0_ := _owner_Ownable[this];
[L247]   RET         call __ret_0_ := owner_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L248]               assume !revert && gas >= 0;
[L6894]  RET         call __ret_0_owner := owner_Ownable(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
