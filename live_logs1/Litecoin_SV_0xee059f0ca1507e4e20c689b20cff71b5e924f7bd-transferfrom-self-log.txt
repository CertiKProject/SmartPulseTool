This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:37:56,703 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:37:56,704 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:37:56,714 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:37:56,715 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:37:56,715 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:37:56,716 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:37:56,718 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:37:56,719 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:37:56,719 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:37:56,720 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:37:56,720 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:37:56,721 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:37:56,722 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:37:56,722 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:37:56,723 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:37:56,724 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:37:56,725 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:37:56,726 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:37:56,727 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:37:56,728 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:37:56,729 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:37:56,730 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:37:56,731 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:37:56,731 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:37:56,731 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:37:56,732 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:37:56,732 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:37:56,732 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:37:56,733 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:37:56,733 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:37:56,733 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:37:56,734 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:37:56,734 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:37:56,735 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:37:56,735 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:37:56,736 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:37:56,736 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:37:56,736 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:37:56,737 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:37:56,737 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:37:56,737 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:37:56,745 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:37:56,745 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:37:56,746 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:37:56,746 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:37:56,746 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:37:56,746 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:37:56,746 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:37:56,746 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:37:56,746 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:37:56,746 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:37:56,746 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:37:56,747 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:37:56,747 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:37:56,747 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:37:56,747 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:37:56,747 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:37:56,747 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:37:56,747 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:37:56,747 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:37:56,747 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:37:56,747 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:37:56,748 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:37:56,748 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:37:56,748 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:37:56,748 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:37:56,748 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:37:56,769 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:37:56,783 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:37:56,785 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:37:56,786 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:37:56,787 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:37:56,787 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl
[2020-11-24 20:37:56,787 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl'
[2020-11-24 20:37:56,871 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:37:56,872 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:37:56,872 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:37:56,873 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:37:56,873 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:37:56,888 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/1) ...
[2020-11-24 20:37:56,890 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/1) ...
[2020-11-24 20:37:56,918 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/1) ...
[2020-11-24 20:37:56,919 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/1) ...
[2020-11-24 20:37:56,938 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/1) ...
[2020-11-24 20:37:56,947 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/1) ...
[2020-11-24 20:37:56,954 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/1) ...
[2020-11-24 20:37:56,963 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:37:56,963 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:37:56,964 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:37:56,965 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:37:56,969 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/1) ...
[2020-11-24 20:37:56,989 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(Litecoin_SV.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Litecoin_SV[this][from] && value <= allowed_Litecoin_SV[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][from] >= 0 &&  balances_Litecoin_SV[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Litecoin_SV[this][from][msg.sender] >= 0 && allowed_Litecoin_SV[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transferFrom(from, to, value), return == true && allowed_Litecoin_SV[this][from][msg.sender] == old(allowed_Litecoin_SV[this][from][msg.sender]) - value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this]) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:37:56,994 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(Litecoin_SV.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Litecoin_SV[this][from] && value <= allowed_Litecoin_SV[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][from] >= 0 &&  balances_Litecoin_SV[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Litecoin_SV[this][from][msg.sender] >= 0 && allowed_Litecoin_SV[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transferFrom(from, to, value), return == true && allowed_Litecoin_SV[this][from][msg.sender] == old(allowed_Litecoin_SV[this][from][msg.sender]) - value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this]) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:37:57,002 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(Litecoin_SV.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Litecoin_SV[this][from] && value <= allowed_Litecoin_SV[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][from] >= 0 &&  balances_Litecoin_SV[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Litecoin_SV[this][from][msg.sender] >= 0 && allowed_Litecoin_SV[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transferFrom(from, to, value), return == true && allowed_Litecoin_SV[this][from][msg.sender] == old(allowed_Litecoin_SV[this][from][msg.sender]) - value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this]) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:37:57,010 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s470 || p2!=msg.sender ) && from_s470==to_s470 ) && tokens_s470<=balances_Litecoin_SV[this][from_s470] ) && tokens_s470<=allowed_Litecoin_SV[this][from_s470][msg.sender] ) && tokens_s470>=0 ) && tokens_s470<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Litecoin_SV[this][to_s470]>=0 ) && balances_Litecoin_SV[this][to_s470]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_Litecoin_SV[this][from_s470]>=0 ) && balances_Litecoin_SV[this][from_s470]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_Litecoin_SV[this][from_s470][msg.sender]>=0 ) && allowed_Litecoin_SV[this][from_s470][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],BinaryExpression[COMPEQ,IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>],IdentifierExpression[to_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[to_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:37:57,013 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( success_s470==true && allowed_Litecoin_SV[this][from_s470][msg.sender]==( ( old(allowed_Litecoin_SV[this][from_s470][msg.sender]) ) - tokens_s470 ) ) && _totalSupply_Litecoin_SV[this]==( old(_totalSupply_Litecoin_SV[this]) ) ) && balances_Litecoin_SV[this]==( old(balances_Litecoin_SV[this]) ) ) && allowed_Litecoin_SV[this][p1][p2]==( old(allowed_Litecoin_SV[this][p1][p2]) ) ) && businessName_Litecoin_SV[this]==( old(businessName_Litecoin_SV[this]) ) ) && businessCountry_Litecoin_SV[this]==( old(businessCountry_Litecoin_SV[this]) ) ) && symbol_Litecoin_SV[this]==( old(symbol_Litecoin_SV[this]) ) ) && name_Litecoin_SV[this]==( old(name_Litecoin_SV[this]) ) ) && decimals_Litecoin_SV[this]==( old(decimals_Litecoin_SV[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s470,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_Litecoin_SV>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[from_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]],IdentifierExpression[tokens_s470,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[businessName_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[businessName_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[businessCountry_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[businessCountry_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_Litecoin_SV,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_Litecoin_SV>]]]]]]
[2020-11-24 20:37:57,018 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(Litecoin_SV.transferFrom(from, to, value), (p1 != from || p2 != msg.sender) && from == to && value <= balances_Litecoin_SV[this][from] && value <= allowed_Litecoin_SV[this][from][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][to] >= 0 && balances_Litecoin_SV[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_Litecoin_SV[this][from] >= 0 &&  balances_Litecoin_SV[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_Litecoin_SV[this][from][msg.sender] >= 0 && allowed_Litecoin_SV[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(Litecoin_SV.transferFrom(from, to, value), return == true && allowed_Litecoin_SV[this][from][msg.sender] == old(allowed_Litecoin_SV[this][from][msg.sender]) - value && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this]) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this]) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2]) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this]) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this]) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this]) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this]) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-24 20:37:57,018 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_Litecoin_SV0) ==> ( <>AP(success_transferFrom_Litecoin_SV0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:37:57,027 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:37:57 PropertyContainer
[2020-11-24 20:37:57,027 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:37:57,027 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:37:57,027 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:37:57,027 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:37:57,028 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/2) ...
[2020-11-24 20:37:57,029 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:37:57,029 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:37:57,044 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:37:57" (2/2) ...
[2020-11-24 20:37:57,044 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:37:57,044 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:37:57,044 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:37:57,044 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:37:57,045 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/2) ...
[2020-11-24 20:37:57,098 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:37:57,098 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:37:57,098 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:37:57,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:37:57,099 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-24 20:37:57,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-24 20:37:57,099 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-24 20:37:57,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-24 20:37:57,099 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-24 20:37:57,099 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-24 20:37:57,099 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-24 20:37:57,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-24 20:37:57,100 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-24 20:37:57,100 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-24 20:37:57,100 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-24 20:37:57,100 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-24 20:37:57,100 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-24 20:37:57,100 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-24 20:37:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-24 20:37:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-24 20:37:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-24 20:37:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-24 20:37:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-24 20:37:57,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-24 20:37:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-24 20:37:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-24 20:37:57,101 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-24 20:37:57,101 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-24 20:37:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-24 20:37:57,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-24 20:37:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-24 20:37:57,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-24 20:37:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-24 20:37:57,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-24 20:37:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-24 20:37:57,102 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-24 20:37:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__success
[2020-11-24 20:37:57,102 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Litecoin_SV
[2020-11-24 20:37:57,103 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Litecoin_SV
[2020-11-24 20:37:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Litecoin_SV
[2020-11-24 20:37:57,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Litecoin_SV
[2020-11-24 20:37:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_Litecoin_SV
[2020-11-24 20:37:57,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_Litecoin_SV
[2020-11-24 20:37:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Litecoin_SV__success
[2020-11-24 20:37:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_Litecoin_SV
[2020-11-24 20:37:57,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_Litecoin_SV
[2020-11-24 20:37:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure businessName_Litecoin_SV
[2020-11-24 20:37:57,104 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessName_Litecoin_SV
[2020-11-24 20:37:57,104 INFO  L130     BoogieDeclarations]: Found specification of procedure businessCountry_Litecoin_SV
[2020-11-24 20:37:57,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessCountry_Litecoin_SV
[2020-11-24 20:37:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Litecoin_SV
[2020-11-24 20:37:57,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Litecoin_SV
[2020-11-24 20:37:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Litecoin_SV
[2020-11-24 20:37:57,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Litecoin_SV
[2020-11-24 20:37:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Litecoin_SV
[2020-11-24 20:37:57,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Litecoin_SV
[2020-11-24 20:37:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Litecoin_SV
[2020-11-24 20:37:57,105 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Litecoin_SV
[2020-11-24 20:37:57,105 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:37:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:37:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:37:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:37:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:37:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:37:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-24 20:37:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-24 20:37:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 20:37:57,106 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 20:37:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-24 20:37:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-24 20:37:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Litecoin_SV
[2020-11-24 20:37:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:37:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:37:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:37:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:37:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:37:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-24 20:37:57,107 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-24 20:37:57,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__fail
[2020-11-24 20:37:57,109 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV__success
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure Litecoin_SV_Litecoin_SV__fail
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Litecoin_SV__success
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_Litecoin_SV__fail
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Litecoin_SV__success
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_Litecoin_SV__fail
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Litecoin_SV__success
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_Litecoin_SV__fail
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Litecoin_SV__success
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_Litecoin_SV__fail
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Litecoin_SV__success
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_Litecoin_SV__fail
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Litecoin_SV__success
[2020-11-24 20:37:57,110 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_Litecoin_SV__fail
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__success
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__fail
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_Litecoin_SV__fail
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__success
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__fail
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure businessName_Litecoin_SV__success
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure businessName_Litecoin_SV__fail
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure businessCountry_Litecoin_SV__success
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure businessCountry_Litecoin_SV__fail
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Litecoin_SV__success
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Litecoin_SV__fail
[2020-11-24 20:37:57,111 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Litecoin_SV__success
[2020-11-24 20:37:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Litecoin_SV__fail
[2020-11-24 20:37:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Litecoin_SV__success
[2020-11-24 20:37:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Litecoin_SV__fail
[2020-11-24 20:37:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Litecoin_SV__success
[2020-11-24 20:37:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_Litecoin_SV__fail
[2020-11-24 20:37:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:37:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:37:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:37:57,112 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:37:57,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:37:57,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:37:57,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:37:57,112 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:37:57,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:37:57,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:37:57,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-24 20:37:57,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-24 20:37:57,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-24 20:37:57,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-24 20:37:57,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-24 20:37:57,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-24 20:37:57,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-24 20:37:57,113 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-24 20:37:57,114 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__fail
[2020-11-24 20:37:57,115 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV_NoBaseCtor__success
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV__fail
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure Litecoin_SV_Litecoin_SV__success
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Litecoin_SV__fail
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_Litecoin_SV__success
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Litecoin_SV__fail
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_Litecoin_SV__success
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Litecoin_SV__fail
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_Litecoin_SV__success
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Litecoin_SV__fail
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_Litecoin_SV__success
[2020-11-24 20:37:57,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Litecoin_SV__fail
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_Litecoin_SV__success
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Litecoin_SV__fail
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_Litecoin_SV__success
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__fail
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_Litecoin_SV__success
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Litecoin_SV__fail
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_Litecoin_SV__success
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__fail
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_Litecoin_SV__success
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessName_Litecoin_SV__fail
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessName_Litecoin_SV__success
[2020-11-24 20:37:57,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessCountry_Litecoin_SV__fail
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure businessCountry_Litecoin_SV__success
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Litecoin_SV__fail
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Litecoin_SV__success
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Litecoin_SV__fail
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Litecoin_SV__success
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Litecoin_SV__fail
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Litecoin_SV__success
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Litecoin_SV__fail
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_Litecoin_SV__success
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:37:57,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-24 20:37:57,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-24 20:37:57,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-24 20:37:57,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Litecoin_SV
[2020-11-24 20:37:57,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:37:57,120 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:37:57,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:37:57,566 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:37:57,575 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:37:57,575 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:37:57,576 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:37:57,792 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:37:57,792 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-24 20:37:57,794 INFO  L202        PluginConnector]: Adding new model Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:37:57 BoogieIcfgContainer
[2020-11-24 20:37:57,794 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:37:57" (2/2) ...
[2020-11-24 20:37:57,795 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:37:57,795 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3f402a7c and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:37:57, skipping insertion in model container
[2020-11-24 20:37:57,795 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:37:57,795 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:37:57,795 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:37:57,797 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:37:57,797 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/3) ...
[2020-11-24 20:37:57,797 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@704f12a2 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:37:57, skipping insertion in model container
[2020-11-24 20:37:57,797 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:37:57" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:37:57,838 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:37:57 NWAContainer
[2020-11-24 20:37:57,838 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:37:57,838 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:37:57,838 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:37:57,839 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:37:57,840 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:37:57" (3/4) ...
[2020-11-24 20:37:57,840 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@6f9c5268 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:37:57, skipping insertion in model container
[2020-11-24 20:37:57,840 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:37:57" (4/4) ...
[2020-11-24 20:37:57,843 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:37:57,847 INFO  L110   BuchiProductObserver]: Initial RCFG 1707 locations, 2139 edges
[2020-11-24 20:37:57,847 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:37:57,858 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:37:59,254 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:37:59,260 INFO  L110   BuchiProductObserver]: BuchiProgram size 4038 locations, 6915 edges
[2020-11-24 20:37:59,260 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:37:59 BoogieIcfgContainer
[2020-11-24 20:37:59,260 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:37:59,260 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:37:59,260 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:37:59,262 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:37:59,262 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:37:59" (1/1) ...
[2020-11-24 20:37:59,347 INFO  L313           BlockEncoder]: Initial Icfg 4038 locations, 6915 edges
[2020-11-24 20:37:59,347 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:37:59,348 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:37:59,348 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:37:59,348 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:37:59,360 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-24 20:37:59,367 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-24 20:37:59,378 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:37:59,382 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:37:59,385 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:37:59,385 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:37:59,389 INFO  L313           BlockEncoder]: Encoded RCFG 3978 locations, 6755 edges
[2020-11-24 20:37:59,390 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:37:59 BasicIcfg
[2020-11-24 20:37:59,390 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:37:59,390 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:37:59,390 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:37:59,392 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:37:59,392 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:37:59,392 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:37:56" (1/6) ...
[2020-11-24 20:37:59,393 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5affbfb7 and model type Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:37:59, skipping insertion in model container
[2020-11-24 20:37:59,394 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:37:59,394 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:37:57" (2/6) ...
[2020-11-24 20:37:59,394 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5affbfb7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:37:59, skipping insertion in model container
[2020-11-24 20:37:59,394 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:37:59,394 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:37:57" (3/6) ...
[2020-11-24 20:37:59,394 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5affbfb7 and model type Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:37:59, skipping insertion in model container
[2020-11-24 20:37:59,394 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:37:59,394 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:37:57" (4/6) ...
[2020-11-24 20:37:59,394 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5affbfb7 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:37:59, skipping insertion in model container
[2020-11-24 20:37:59,395 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:37:59,395 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:37:59" (5/6) ...
[2020-11-24 20:37:59,395 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5affbfb7 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:37:59, skipping insertion in model container
[2020-11-24 20:37:59,395 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:37:59,395 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:37:59" (6/6) ...
[2020-11-24 20:37:59,396 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Litecoin_SV_0xee059f0ca1507e4e20c689b20cff71b5e924f7bd_transferfrom-self.bpl_BEv2
[2020-11-24 20:37:59,422 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:37:59,422 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:37:59,422 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:37:59,423 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:37:59,423 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:37:59,423 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:37:59,423 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:37:59,423 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:37:59,423 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:37:59,455 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3978 states.
[2020-11-24 20:37:59,515 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:37:59,516 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:37:59,516 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:37:59,526 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:37:59,526 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:37:59,526 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:37:59,526 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3978 states.
[2020-11-24 20:37:59,552 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:37:59,552 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:37:59,552 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:37:59,554 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:37:59,554 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND TRUE   revert
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:37:59,572 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:37:59,572 INFO  L82        PathProgramCache]: Analyzing trace with hash -1305822097, now seen corresponding path program 1 times
[2020-11-24 20:37:59,576 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:37:59,598 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:37:59,635 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:37:59,637 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:37:59,638 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:37:59,874 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:37:59,886 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:37:59,886 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:37:59,888 INFO  L87              Difference]: Start difference. First operand 3978 states. Second operand 3 states.
[2020-11-24 20:38:00,108 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:00,108 INFO  L93              Difference]: Finished difference Result 2798 states and 3039 transitions.
[2020-11-24 20:38:00,109 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:38:00,110 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2798 states and 3039 transitions.
[2020-11-24 20:38:00,125 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:38:00,142 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2798 states to 2798 states and 3039 transitions.
[2020-11-24 20:38:00,143 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:38:00,146 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 980
[2020-11-24 20:38:00,146 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2798 states and 3039 transitions.
[2020-11-24 20:38:00,152 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:00,152 INFO  L728         BuchiCegarLoop]: Abstraction has 2798 states and 3039 transitions.
[2020-11-24 20:38:00,174 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2798 states and 3039 transitions.
[2020-11-24 20:38:00,222 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2798 to 2798.
[2020-11-24 20:38:00,222 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2798 states.
[2020-11-24 20:38:00,229 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2798 states to 2798 states and 3039 transitions.
[2020-11-24 20:38:00,230 INFO  L751         BuchiCegarLoop]: Abstraction has 2798 states and 3039 transitions.
[2020-11-24 20:38:00,230 INFO  L631         BuchiCegarLoop]: Abstraction has 2798 states and 3039 transitions.
[2020-11-24 20:38:00,230 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:38:00,230 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2798 states and 3039 transitions.
[2020-11-24 20:38:00,239 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:38:00,240 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:00,240 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:00,242 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:00,243 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND TRUE   revert
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND TRUE   !(b_s45 <= a_s45)
[L2248]              revert := true;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND TRUE   revert
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND TRUE   !(b_s45 <= a_s45)
[L2248]              revert := true;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND TRUE   revert
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:00,248 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:00,248 INFO  L82        PathProgramCache]: Analyzing trace with hash 1765555809, now seen corresponding path program 1 times
[2020-11-24 20:38:00,249 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:00,261 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:00,289 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:38:00,289 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:38:00,289 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:38:00,291 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:00,291 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:38:00,291 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:38:00,291 INFO  L87              Difference]: Start difference. First operand 2798 states and 3039 transitions. cyclomatic complexity: 243 Second operand 4 states.
[2020-11-24 20:38:00,810 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:00,810 INFO  L93              Difference]: Finished difference Result 4090 states and 4627 transitions.
[2020-11-24 20:38:00,810 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:38:00,810 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4090 states and 4627 transitions.
[2020-11-24 20:38:00,828 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-24 20:38:00,847 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4090 states to 3970 states and 4499 transitions.
[2020-11-24 20:38:00,848 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1330
[2020-11-24 20:38:00,849 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1340
[2020-11-24 20:38:00,849 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3970 states and 4499 transitions.
[2020-11-24 20:38:00,857 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:00,857 INFO  L728         BuchiCegarLoop]: Abstraction has 3970 states and 4499 transitions.
[2020-11-24 20:38:00,861 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3970 states and 4499 transitions.
[2020-11-24 20:38:00,889 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3970 to 2834.
[2020-11-24 20:38:00,889 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2834 states.
[2020-11-24 20:38:00,892 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2834 states to 2834 states and 3031 transitions.
[2020-11-24 20:38:00,892 INFO  L751         BuchiCegarLoop]: Abstraction has 2834 states and 3031 transitions.
[2020-11-24 20:38:00,892 INFO  L631         BuchiCegarLoop]: Abstraction has 2834 states and 3031 transitions.
[2020-11-24 20:38:00,892 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:38:00,892 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2834 states and 3031 transitions.
[2020-11-24 20:38:00,898 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:38:00,898 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:00,898 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:00,900 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:00,900 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:00,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:00,903 INFO  L82        PathProgramCache]: Analyzing trace with hash -740347545, now seen corresponding path program 1 times
[2020-11-24 20:38:00,904 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:00,918 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:01,100 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:38:01,101 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:38:01,101 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-24 20:38:01,101 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:01,101 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 20:38:01,102 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-24 20:38:01,102 INFO  L87              Difference]: Start difference. First operand 2834 states and 3031 transitions. cyclomatic complexity: 199 Second operand 15 states.
[2020-11-24 20:38:03,167 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:03,167 INFO  L93              Difference]: Finished difference Result 3086 states and 3332 transitions.
[2020-11-24 20:38:03,167 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 20:38:03,167 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3086 states and 3332 transitions.
[2020-11-24 20:38:03,177 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 20:38:03,185 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3086 states to 3086 states and 3332 transitions.
[2020-11-24 20:38:03,186 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1099
[2020-11-24 20:38:03,186 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1099
[2020-11-24 20:38:03,186 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3086 states and 3332 transitions.
[2020-11-24 20:38:03,189 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:03,189 INFO  L728         BuchiCegarLoop]: Abstraction has 3086 states and 3332 transitions.
[2020-11-24 20:38:03,192 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3086 states and 3332 transitions.
[2020-11-24 20:38:03,216 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3086 to 2997.
[2020-11-24 20:38:03,217 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2997 states.
[2020-11-24 20:38:03,220 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2997 states to 2997 states and 3211 transitions.
[2020-11-24 20:38:03,221 INFO  L751         BuchiCegarLoop]: Abstraction has 2997 states and 3211 transitions.
[2020-11-24 20:38:03,221 INFO  L631         BuchiCegarLoop]: Abstraction has 2997 states and 3211 transitions.
[2020-11-24 20:38:03,221 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:38:03,221 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2997 states and 3211 transitions.
[2020-11-24 20:38:03,226 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:38:03,226 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:03,226 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:03,228 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:03,228 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:03,232 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:03,232 INFO  L82        PathProgramCache]: Analyzing trace with hash -1430593996, now seen corresponding path program 1 times
[2020-11-24 20:38:03,233 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:03,293 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:03,980 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification. DAG size of input: 112 DAG size of output: 87
[2020-11-24 20:38:04,138 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 78
[2020-11-24 20:38:04,407 WARN  L188               SmtUtils]: Spent 177.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 89
[2020-11-24 20:38:04,582 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 128 DAG size of output: 77
[2020-11-24 20:38:04,793 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 84
[2020-11-24 20:38:05,240 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-24 20:38:05,240 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:38:05,240 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-24 20:38:05,240 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:05,241 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-24 20:38:05,241 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=76, Invalid=916, Unknown=0, NotChecked=0, Total=992
[2020-11-24 20:38:05,241 INFO  L87              Difference]: Start difference. First operand 2997 states and 3211 transitions. cyclomatic complexity: 218 Second operand 32 states.
[2020-11-24 20:38:18,483 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:18,483 INFO  L93              Difference]: Finished difference Result 3065 states and 3322 transitions.
[2020-11-24 20:38:18,483 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-24 20:38:18,484 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3065 states and 3322 transitions.
[2020-11-24 20:38:18,489 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-24 20:38:18,496 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3065 states to 3065 states and 3322 transitions.
[2020-11-24 20:38:18,496 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1115
[2020-11-24 20:38:18,496 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1115
[2020-11-24 20:38:18,496 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3065 states and 3322 transitions.
[2020-11-24 20:38:18,499 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:18,499 INFO  L728         BuchiCegarLoop]: Abstraction has 3065 states and 3322 transitions.
[2020-11-24 20:38:18,501 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3065 states and 3322 transitions.
[2020-11-24 20:38:18,521 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3065 to 3048.
[2020-11-24 20:38:18,522 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3048 states.
[2020-11-24 20:38:18,524 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3048 states to 3048 states and 3277 transitions.
[2020-11-24 20:38:18,525 INFO  L751         BuchiCegarLoop]: Abstraction has 3048 states and 3277 transitions.
[2020-11-24 20:38:18,525 INFO  L631         BuchiCegarLoop]: Abstraction has 3048 states and 3277 transitions.
[2020-11-24 20:38:18,525 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:38:18,525 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3048 states and 3277 transitions.
[2020-11-24 20:38:18,528 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:38:18,528 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:18,528 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:18,529 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:18,530 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:18,534 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:18,534 INFO  L82        PathProgramCache]: Analyzing trace with hash 189881176, now seen corresponding path program 1 times
[2020-11-24 20:38:18,534 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:18,542 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:18,607 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-24 20:38:18,607 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:38:18,607 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-24 20:38:18,608 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:18,608 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-24 20:38:18,608 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-24 20:38:18,608 INFO  L87              Difference]: Start difference. First operand 3048 states and 3277 transitions. cyclomatic complexity: 235 Second operand 14 states.
[2020-11-24 20:38:20,069 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:20,069 INFO  L93              Difference]: Finished difference Result 3138 states and 3421 transitions.
[2020-11-24 20:38:20,070 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 20:38:20,070 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3138 states and 3421 transitions.
[2020-11-24 20:38:20,075 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-24 20:38:20,082 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3138 states to 3138 states and 3421 transitions.
[2020-11-24 20:38:20,082 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1124
[2020-11-24 20:38:20,083 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1124
[2020-11-24 20:38:20,083 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3138 states and 3421 transitions.
[2020-11-24 20:38:20,085 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:20,085 INFO  L728         BuchiCegarLoop]: Abstraction has 3138 states and 3421 transitions.
[2020-11-24 20:38:20,088 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3138 states and 3421 transitions.
[2020-11-24 20:38:20,105 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3138 to 3048.
[2020-11-24 20:38:20,105 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3048 states.
[2020-11-24 20:38:20,108 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3048 states to 3048 states and 3277 transitions.
[2020-11-24 20:38:20,108 INFO  L751         BuchiCegarLoop]: Abstraction has 3048 states and 3277 transitions.
[2020-11-24 20:38:20,108 INFO  L631         BuchiCegarLoop]: Abstraction has 3048 states and 3277 transitions.
[2020-11-24 20:38:20,108 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:38:20,108 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3048 states and 3277 transitions.
[2020-11-24 20:38:20,112 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:38:20,112 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:20,112 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:20,113 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:20,113 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND FALSE  !(revert)
[L2686]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] - __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2687]              __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2688]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] + __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2689]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2690]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND TRUE   !(c_s23 >= a_s23)
[L2222]              revert := true;
[L2690]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2691]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND FALSE  !(revert)
[L2686]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] - __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2687]              __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2688]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] + __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2689]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2690]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND TRUE   !(c_s23 >= a_s23)
[L2222]              revert := true;
[L2690]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2691]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:20,117 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:20,117 INFO  L82        PathProgramCache]: Analyzing trace with hash 1506747848, now seen corresponding path program 1 times
[2020-11-24 20:38:20,117 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:20,127 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:20,202 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-24 20:38:20,202 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:38:20,203 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-24 20:38:20,203 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:20,203 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-24 20:38:20,203 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=239, Unknown=0, NotChecked=0, Total=272
[2020-11-24 20:38:20,203 INFO  L87              Difference]: Start difference. First operand 3048 states and 3277 transitions. cyclomatic complexity: 235 Second operand 17 states.
[2020-11-24 20:38:21,904 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:21,904 INFO  L93              Difference]: Finished difference Result 3083 states and 3335 transitions.
[2020-11-24 20:38:21,905 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 20:38:21,905 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3083 states and 3335 transitions.
[2020-11-24 20:38:21,909 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-24 20:38:21,915 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3083 states to 3083 states and 3335 transitions.
[2020-11-24 20:38:21,915 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1124
[2020-11-24 20:38:21,916 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1124
[2020-11-24 20:38:21,916 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3083 states and 3335 transitions.
[2020-11-24 20:38:21,918 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:21,918 INFO  L728         BuchiCegarLoop]: Abstraction has 3083 states and 3335 transitions.
[2020-11-24 20:38:21,920 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3083 states and 3335 transitions.
[2020-11-24 20:38:21,936 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3083 to 3048.
[2020-11-24 20:38:21,936 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3048 states.
[2020-11-24 20:38:21,938 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3048 states to 3048 states and 3277 transitions.
[2020-11-24 20:38:21,939 INFO  L751         BuchiCegarLoop]: Abstraction has 3048 states and 3277 transitions.
[2020-11-24 20:38:21,939 INFO  L631         BuchiCegarLoop]: Abstraction has 3048 states and 3277 transitions.
[2020-11-24 20:38:21,939 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:38:21,939 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3048 states and 3277 transitions.
[2020-11-24 20:38:21,942 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:38:21,942 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:21,942 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:21,943 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:21,943 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND FALSE  !(revert)
[L2686]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] - __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2687]              __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2688]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] + __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2689]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2690]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND FALSE  !(!(c_s23 >= a_s23))
[L2690]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2691]  COND FALSE  !(revert)
[L2697]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][to_s470];
[L2698]              __tmp__balances_Litecoin_SV[this][to_s470] := __var_7;
[L2699]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][to_s470];
[L2700]              success_s470 := true;
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:21,946 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:21,946 INFO  L82        PathProgramCache]: Analyzing trace with hash 1066753886, now seen corresponding path program 1 times
[2020-11-24 20:38:21,947 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:21,955 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:21,979 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-24 20:38:21,980 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:38:21,980 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:38:21,980 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:21,980 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:38:21,980 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:38:21,980 INFO  L87              Difference]: Start difference. First operand 3048 states and 3277 transitions. cyclomatic complexity: 235 Second operand 5 states.
[2020-11-24 20:38:22,307 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:22,307 INFO  L93              Difference]: Finished difference Result 3814 states and 4243 transitions.
[2020-11-24 20:38:22,308 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:38:22,308 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3814 states and 4243 transitions.
[2020-11-24 20:38:22,316 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-24 20:38:22,329 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3814 states to 2843 states and 3269 transitions.
[2020-11-24 20:38:22,329 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 808
[2020-11-24 20:38:22,330 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 808
[2020-11-24 20:38:22,330 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2843 states and 3269 transitions.
[2020-11-24 20:38:22,334 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:22,334 INFO  L728         BuchiCegarLoop]: Abstraction has 2843 states and 3269 transitions.
[2020-11-24 20:38:22,336 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2843 states and 3269 transitions.
[2020-11-24 20:38:22,350 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2843 to 2041.
[2020-11-24 20:38:22,350 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2041 states.
[2020-11-24 20:38:22,352 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2041 states to 2041 states and 2208 transitions.
[2020-11-24 20:38:22,352 INFO  L751         BuchiCegarLoop]: Abstraction has 2041 states and 2208 transitions.
[2020-11-24 20:38:22,352 INFO  L631         BuchiCegarLoop]: Abstraction has 2041 states and 2208 transitions.
[2020-11-24 20:38:22,352 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:38:22,352 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2041 states and 2208 transitions.
[2020-11-24 20:38:22,355 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:38:22,355 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:22,355 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:22,356 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:22,356 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:22,359 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:22,359 INFO  L82        PathProgramCache]: Analyzing trace with hash 1914865472, now seen corresponding path program 1 times
[2020-11-24 20:38:22,360 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:22,369 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:22,420 INFO  L134       CoverageAnalysis]: Checked inductivity of 71 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 71 trivial. 0 not checked.
[2020-11-24 20:38:22,420 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:38:22,420 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:38:22,420 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:22,421 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:38:22,421 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:38:22,421 INFO  L87              Difference]: Start difference. First operand 2041 states and 2208 transitions. cyclomatic complexity: 171 Second operand 7 states.
[2020-11-24 20:38:22,920 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:22,920 INFO  L93              Difference]: Finished difference Result 2117 states and 2310 transitions.
[2020-11-24 20:38:22,920 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:38:22,921 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2117 states and 2310 transitions.
[2020-11-24 20:38:22,924 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:38:22,930 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2117 states to 2117 states and 2310 transitions.
[2020-11-24 20:38:22,930 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 657
[2020-11-24 20:38:22,930 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 657
[2020-11-24 20:38:22,930 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2117 states and 2310 transitions.
[2020-11-24 20:38:22,932 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:22,932 INFO  L728         BuchiCegarLoop]: Abstraction has 2117 states and 2310 transitions.
[2020-11-24 20:38:22,934 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2117 states and 2310 transitions.
[2020-11-24 20:38:22,944 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2117 to 2045.
[2020-11-24 20:38:22,944 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2045 states.
[2020-11-24 20:38:22,946 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2045 states to 2045 states and 2212 transitions.
[2020-11-24 20:38:22,946 INFO  L751         BuchiCegarLoop]: Abstraction has 2045 states and 2212 transitions.
[2020-11-24 20:38:22,946 INFO  L631         BuchiCegarLoop]: Abstraction has 2045 states and 2212 transitions.
[2020-11-24 20:38:22,946 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:38:22,946 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2045 states and 2212 transitions.
[2020-11-24 20:38:22,948 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:38:22,948 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:22,948 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:22,949 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:22,949 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:22,952 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:22,952 INFO  L82        PathProgramCache]: Analyzing trace with hash -1430833523, now seen corresponding path program 1 times
[2020-11-24 20:38:22,953 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:22,987 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:23,578 INFO  L134       CoverageAnalysis]: Checked inductivity of 75 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-11-24 20:38:23,579 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:38:23,579 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-24 20:38:23,579 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:23,579 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-24 20:38:23,579 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=59, Invalid=591, Unknown=0, NotChecked=0, Total=650
[2020-11-24 20:38:23,579 INFO  L87              Difference]: Start difference. First operand 2045 states and 2212 transitions. cyclomatic complexity: 171 Second operand 26 states.
[2020-11-24 20:38:27,752 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:27,752 INFO  L93              Difference]: Finished difference Result 2072 states and 2251 transitions.
[2020-11-24 20:38:27,753 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-24 20:38:27,753 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2072 states and 2251 transitions.
[2020-11-24 20:38:27,756 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:38:27,761 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2072 states to 2072 states and 2251 transitions.
[2020-11-24 20:38:27,761 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 640
[2020-11-24 20:38:27,761 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 640
[2020-11-24 20:38:27,761 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2072 states and 2251 transitions.
[2020-11-24 20:38:27,762 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:27,762 INFO  L728         BuchiCegarLoop]: Abstraction has 2072 states and 2251 transitions.
[2020-11-24 20:38:27,764 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2072 states and 2251 transitions.
[2020-11-24 20:38:27,774 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2072 to 2067.
[2020-11-24 20:38:27,774 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2067 states.
[2020-11-24 20:38:27,776 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2067 states to 2067 states and 2245 transitions.
[2020-11-24 20:38:27,776 INFO  L751         BuchiCegarLoop]: Abstraction has 2067 states and 2245 transitions.
[2020-11-24 20:38:27,776 INFO  L631         BuchiCegarLoop]: Abstraction has 2067 states and 2245 transitions.
[2020-11-24 20:38:27,776 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 20:38:27,776 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2067 states and 2245 transitions.
[2020-11-24 20:38:27,778 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:38:27,778 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:27,778 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:27,779 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:27,779 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND TRUE   !(b_s45 <= a_s45)
[L2239]              revert := true;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:27,783 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:27,783 INFO  L82        PathProgramCache]: Analyzing trace with hash 189641649, now seen corresponding path program 1 times
[2020-11-24 20:38:27,784 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:27,794 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:27,841 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 72 trivial. 0 not checked.
[2020-11-24 20:38:27,841 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:38:27,841 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:38:27,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:27,841 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:38:27,841 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:38:27,841 INFO  L87              Difference]: Start difference. First operand 2067 states and 2245 transitions. cyclomatic complexity: 184 Second operand 7 states.
[2020-11-24 20:38:28,153 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:28,153 INFO  L93              Difference]: Finished difference Result 2127 states and 2342 transitions.
[2020-11-24 20:38:28,153 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:38:28,153 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2127 states and 2342 transitions.
[2020-11-24 20:38:28,157 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:38:28,162 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2127 states to 2127 states and 2342 transitions.
[2020-11-24 20:38:28,162 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 665
[2020-11-24 20:38:28,162 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 665
[2020-11-24 20:38:28,162 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2127 states and 2342 transitions.
[2020-11-24 20:38:28,163 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:28,163 INFO  L728         BuchiCegarLoop]: Abstraction has 2127 states and 2342 transitions.
[2020-11-24 20:38:28,165 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2127 states and 2342 transitions.
[2020-11-24 20:38:28,175 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2127 to 2067.
[2020-11-24 20:38:28,176 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2067 states.
[2020-11-24 20:38:28,178 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2067 states to 2067 states and 2245 transitions.
[2020-11-24 20:38:28,178 INFO  L751         BuchiCegarLoop]: Abstraction has 2067 states and 2245 transitions.
[2020-11-24 20:38:28,178 INFO  L631         BuchiCegarLoop]: Abstraction has 2067 states and 2245 transitions.
[2020-11-24 20:38:28,178 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 20:38:28,178 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2067 states and 2245 transitions.
[2020-11-24 20:38:28,180 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:38:28,180 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:28,180 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:28,181 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:28,181 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND TRUE   __exception
[L1126]              __tmp__Balance := Balance;
[L1127]              __tmp__DType := DType;
[L1128]              __tmp__Alloc := Alloc;
[L1129]              __tmp__balance_ADDR := balance_ADDR;
[L1130]              __tmp__M_Ref_int := M_Ref_int;
[L1131]              __tmp__sum_balances0 := sum_balances0;
[L1132]              __tmp__alloc_allowed_Litecoin_SV_lvl0 := alloc_allowed_Litecoin_SV_lvl0;
[L1133]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1134]              __tmp__sum_allowed1 := sum_allowed1;
[L1135]              __tmp__Length := Length;
[L1136]              __tmp__now := now;
[L1137]              __tmp__owner_Owned := owner_Owned;
[L1138]              __tmp__newOwner_Owned := newOwner_Owned;
[L1139]              __tmp__businessName_Litecoin_SV := businessName_Litecoin_SV;
[L1140]              __tmp__businessCountry_Litecoin_SV := businessCountry_Litecoin_SV;
[L1141]              __tmp__symbol_Litecoin_SV := symbol_Litecoin_SV;
[L1142]              __tmp__name_Litecoin_SV := name_Litecoin_SV;
[L1143]              __tmp__decimals_Litecoin_SV := decimals_Litecoin_SV;
[L1144]              __tmp___totalSupply_Litecoin_SV := _totalSupply_Litecoin_SV;
[L1145]              __tmp__balances_Litecoin_SV := balances_Litecoin_SV;
[L1146]              __tmp__allowed_Litecoin_SV := allowed_Litecoin_SV;
[L1147]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2667]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2668]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2668]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2669]  COND FALSE  !(revert)
[L2675]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_Litecoin_SV[this][from_s470];
[L2676]              __tmp__balances_Litecoin_SV[this][from_s470] := __var_5;
[L2677]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_Litecoin_SV[this][from_s470];
[L2678]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2679]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2238]  COND FALSE  !(!(b_s45 <= a_s45))
[L2242]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2679]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2680]  COND FALSE  !(revert)
[L2686]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] - __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2687]              __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2688]              __tmp__sum_allowed1[from_s470] := __tmp__sum_allowed1[from_s470] + __tmp__allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2689]  COND TRUE   __tmp__DType[this] == Litecoin_SV
[L2690]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2220]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2221]  COND TRUE   !(c_s23 >= a_s23)
[L2222]              revert := true;
[L2690]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2691]  COND TRUE   revert
[L1147]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__fail(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1148]              assume revert || gas < 0;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:28,183 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:28,184 INFO  L82        PathProgramCache]: Analyzing trace with hash -155392497, now seen corresponding path program 1 times
[2020-11-24 20:38:28,184 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:28,196 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:28,286 INFO  L134       CoverageAnalysis]: Checked inductivity of 75 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-11-24 20:38:28,286 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:38:28,286 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-24 20:38:28,287 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:28,287 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 11 interpolants.
[2020-11-24 20:38:28,287 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=20, Invalid=90, Unknown=0, NotChecked=0, Total=110
[2020-11-24 20:38:28,287 INFO  L87              Difference]: Start difference. First operand 2067 states and 2245 transitions. cyclomatic complexity: 184 Second operand 11 states.
[2020-11-24 20:38:29,240 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:29,240 INFO  L93              Difference]: Finished difference Result 2123 states and 2325 transitions.
[2020-11-24 20:38:29,240 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-24 20:38:29,240 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2123 states and 2325 transitions.
[2020-11-24 20:38:29,244 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:38:29,249 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2123 states to 2079 states and 2279 transitions.
[2020-11-24 20:38:29,249 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 662
[2020-11-24 20:38:29,249 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 662
[2020-11-24 20:38:29,249 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2079 states and 2279 transitions.
[2020-11-24 20:38:29,251 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:29,251 INFO  L728         BuchiCegarLoop]: Abstraction has 2079 states and 2279 transitions.
[2020-11-24 20:38:29,252 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2079 states and 2279 transitions.
[2020-11-24 20:38:29,261 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2079 to 1979.
[2020-11-24 20:38:29,261 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1979 states.
[2020-11-24 20:38:29,262 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1979 states to 1979 states and 2134 transitions.
[2020-11-24 20:38:29,262 INFO  L751         BuchiCegarLoop]: Abstraction has 1979 states and 2134 transitions.
[2020-11-24 20:38:29,262 INFO  L631         BuchiCegarLoop]: Abstraction has 1979 states and 2134 transitions.
[2020-11-24 20:38:29,263 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 20:38:29,263 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1979 states and 2134 transitions.
[2020-11-24 20:38:29,264 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:38:29,265 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:29,265 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:29,265 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:29,265 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1028]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2616]  COND TRUE   DType[this] == Litecoin_SV
[L2617]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2617]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2618]  COND FALSE  !(revert)
[L2624]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][msgsender_MSG];
[L2625]              balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2626]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][msgsender_MSG];
[L2627]  COND TRUE   DType[this] == Litecoin_SV
[L2628]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2628]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2629]  COND FALSE  !(revert)
[L2635]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s383];
[L2636]              balances_Litecoin_SV[this][to_s383] := __var_4;
[L2637]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s383];
[L2638]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2639]              success_s383 := true;
[L1028]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1029]              assume !revert && gas >= 0;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND TRUE   choice == 22
[L4447]              gas := gas - 21000;
[L4448]  COND FALSE  !(gas >= 0)
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:29,268 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:29,268 INFO  L82        PathProgramCache]: Analyzing trace with hash -702888263, now seen corresponding path program 1 times
[2020-11-24 20:38:29,268 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:29,301 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:29,840 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 70 proven. 2 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-24 20:38:29,840 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:38:29,840 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-24 20:38:29,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:29,841 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-24 20:38:29,841 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=62, Invalid=588, Unknown=0, NotChecked=0, Total=650
[2020-11-24 20:38:29,841 INFO  L87              Difference]: Start difference. First operand 1979 states and 2134 transitions. cyclomatic complexity: 158 Second operand 26 states.
[2020-11-24 20:38:32,905 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:32,905 INFO  L93              Difference]: Finished difference Result 2034 states and 2206 transitions.
[2020-11-24 20:38:32,905 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-24 20:38:32,906 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2034 states and 2206 transitions.
[2020-11-24 20:38:32,917 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:38:32,925 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2034 states to 2034 states and 2206 transitions.
[2020-11-24 20:38:32,925 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 631
[2020-11-24 20:38:32,925 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 631
[2020-11-24 20:38:32,925 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2034 states and 2206 transitions.
[2020-11-24 20:38:32,927 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:32,927 INFO  L728         BuchiCegarLoop]: Abstraction has 2034 states and 2206 transitions.
[2020-11-24 20:38:32,929 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2034 states and 2206 transitions.
[2020-11-24 20:38:32,941 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2034 to 1987.
[2020-11-24 20:38:32,941 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1987 states.
[2020-11-24 20:38:32,943 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1987 states to 1987 states and 2152 transitions.
[2020-11-24 20:38:32,944 INFO  L751         BuchiCegarLoop]: Abstraction has 1987 states and 2152 transitions.
[2020-11-24 20:38:32,944 INFO  L631         BuchiCegarLoop]: Abstraction has 1987 states and 2152 transitions.
[2020-11-24 20:38:32,944 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 20:38:32,944 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1987 states and 2152 transitions.
[2020-11-24 20:38:32,947 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:38:32,947 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:32,947 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:32,948 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:32,948 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:32,953 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:32,953 INFO  L82        PathProgramCache]: Analyzing trace with hash -47255499, now seen corresponding path program 1 times
[2020-11-24 20:38:32,954 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:33,086 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:35,170 INFO  L134       CoverageAnalysis]: Checked inductivity of 89 backedges. 5 proven. 4 refuted. 0 times theorem prover too weak. 80 trivial. 0 not checked.
[2020-11-24 20:38:35,170 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:38:35,171 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-24 20:38:35,171 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:35,171 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-24 20:38:35,171 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=117, Invalid=1605, Unknown=0, NotChecked=0, Total=1722
[2020-11-24 20:38:35,171 INFO  L87              Difference]: Start difference. First operand 1987 states and 2152 transitions. cyclomatic complexity: 170 Second operand 42 states.
[2020-11-24 20:38:39,131 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 89 DAG size of output: 71
[2020-11-24 20:38:44,037 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:44,037 INFO  L93              Difference]: Finished difference Result 2040 states and 2214 transitions.
[2020-11-24 20:38:44,037 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-24 20:38:44,037 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2040 states and 2214 transitions.
[2020-11-24 20:38:44,040 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:38:44,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2040 states to 2040 states and 2214 transitions.
[2020-11-24 20:38:44,044 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 631
[2020-11-24 20:38:44,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 631
[2020-11-24 20:38:44,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2040 states and 2214 transitions.
[2020-11-24 20:38:44,045 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:44,045 INFO  L728         BuchiCegarLoop]: Abstraction has 2040 states and 2214 transitions.
[2020-11-24 20:38:44,047 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2040 states and 2214 transitions.
[2020-11-24 20:38:44,054 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2040 to 1993.
[2020-11-24 20:38:44,054 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1993 states.
[2020-11-24 20:38:44,056 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1993 states to 1993 states and 2160 transitions.
[2020-11-24 20:38:44,056 INFO  L751         BuchiCegarLoop]: Abstraction has 1993 states and 2160 transitions.
[2020-11-24 20:38:44,056 INFO  L631         BuchiCegarLoop]: Abstraction has 1993 states and 2160 transitions.
[2020-11-24 20:38:44,056 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 20:38:44,056 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1993 states and 2160 transitions.
[2020-11-24 20:38:44,058 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:38:44,058 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:44,058 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:44,059 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:44,059 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L3]                 success_transferFrom_Litecoin_SV0 := true;
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:44,063 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:44,063 INFO  L82        PathProgramCache]: Analyzing trace with hash 361611657, now seen corresponding path program 1 times
[2020-11-24 20:38:44,063 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:44,105 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:44,634 WARN  L188               SmtUtils]: Spent 146.00 ms on a formula simplification. DAG size of input: 102 DAG size of output: 75
[2020-11-24 20:38:44,828 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 77
[2020-11-24 20:38:45,300 INFO  L134       CoverageAnalysis]: Checked inductivity of 90 backedges. 5 proven. 24 refuted. 0 times theorem prover too weak. 61 trivial. 0 not checked.
[2020-11-24 20:38:45,300 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:38:45,300 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-24 20:38:45,301 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:45,301 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-24 20:38:45,301 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=104, Invalid=1086, Unknown=0, NotChecked=0, Total=1190
[2020-11-24 20:38:45,301 INFO  L87              Difference]: Start difference. First operand 1993 states and 2160 transitions. cyclomatic complexity: 172 Second operand 35 states.
[2020-11-24 20:38:48,596 WARN  L188               SmtUtils]: Spent 287.00 ms on a formula simplification. DAG size of input: 122 DAG size of output: 111
[2020-11-24 20:38:52,212 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:38:52,213 INFO  L93              Difference]: Finished difference Result 2238 states and 2493 transitions.
[2020-11-24 20:38:52,213 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-24 20:38:52,213 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2238 states and 2493 transitions.
[2020-11-24 20:38:52,217 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:38:52,221 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2238 states to 2238 states and 2493 transitions.
[2020-11-24 20:38:52,221 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 741
[2020-11-24 20:38:52,222 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 741
[2020-11-24 20:38:52,222 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2238 states and 2493 transitions.
[2020-11-24 20:38:52,223 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:38:52,223 INFO  L728         BuchiCegarLoop]: Abstraction has 2238 states and 2493 transitions.
[2020-11-24 20:38:52,225 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2238 states and 2493 transitions.
[2020-11-24 20:38:52,233 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2238 to 2212.
[2020-11-24 20:38:52,233 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2212 states.
[2020-11-24 20:38:52,235 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2212 states to 2212 states and 2463 transitions.
[2020-11-24 20:38:52,235 INFO  L751         BuchiCegarLoop]: Abstraction has 2212 states and 2463 transitions.
[2020-11-24 20:38:52,235 INFO  L631         BuchiCegarLoop]: Abstraction has 2212 states and 2463 transitions.
[2020-11-24 20:38:52,235 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 20:38:52,235 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2212 states and 2463 transitions.
[2020-11-24 20:38:52,238 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:38:52,238 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:38:52,238 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:38:52,239 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:38:52,239 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L3]                 success_transferFrom_Litecoin_SV0 := true;
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:38:52,242 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:38:52,242 INFO  L82        PathProgramCache]: Analyzing trace with hash 1913680774, now seen corresponding path program 1 times
[2020-11-24 20:38:52,243 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:38:52,307 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:38:52,840 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification. DAG size of input: 124 DAG size of output: 66
[2020-11-24 20:38:52,997 WARN  L188               SmtUtils]: Spent 122.00 ms on a formula simplification. DAG size of input: 111 DAG size of output: 69
[2020-11-24 20:38:53,223 WARN  L188               SmtUtils]: Spent 184.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 74
[2020-11-24 20:38:53,402 WARN  L188               SmtUtils]: Spent 137.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 75
[2020-11-24 20:38:53,558 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 128 DAG size of output: 74
[2020-11-24 20:38:53,727 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification. DAG size of input: 133 DAG size of output: 79
[2020-11-24 20:38:54,091 WARN  L188               SmtUtils]: Spent 284.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 97
[2020-11-24 20:38:54,252 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 81
[2020-11-24 20:38:54,895 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 75
[2020-11-24 20:38:56,357 INFO  L134       CoverageAnalysis]: Checked inductivity of 89 backedges. 1 proven. 86 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-24 20:38:56,358 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:38:56,358 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [51] total 51
[2020-11-24 20:38:56,358 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:38:56,358 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 52 interpolants.
[2020-11-24 20:38:56,359 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=168, Invalid=2484, Unknown=0, NotChecked=0, Total=2652
[2020-11-24 20:38:56,359 INFO  L87              Difference]: Start difference. First operand 2212 states and 2463 transitions. cyclomatic complexity: 259 Second operand 52 states.
[2020-11-24 20:38:59,947 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification. DAG size of input: 222 DAG size of output: 76
[2020-11-24 20:39:00,473 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification. DAG size of input: 182 DAG size of output: 113
[2020-11-24 20:39:00,866 WARN  L188               SmtUtils]: Spent 221.00 ms on a formula simplification. DAG size of input: 164 DAG size of output: 116
[2020-11-24 20:39:01,210 WARN  L188               SmtUtils]: Spent 185.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 116
[2020-11-24 20:39:02,225 WARN  L188               SmtUtils]: Spent 113.00 ms on a formula simplification. DAG size of input: 101 DAG size of output: 89
[2020-11-24 20:39:02,406 WARN  L188               SmtUtils]: Spent 104.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 95
[2020-11-24 20:39:02,649 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification. DAG size of input: 108 DAG size of output: 104
[2020-11-24 20:39:02,851 WARN  L188               SmtUtils]: Spent 126.00 ms on a formula simplification. DAG size of input: 109 DAG size of output: 104
[2020-11-24 20:39:03,151 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification. DAG size of input: 207 DAG size of output: 103
[2020-11-24 20:39:03,611 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification. DAG size of input: 162 DAG size of output: 101
[2020-11-24 20:39:03,990 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 125 DAG size of output: 96
[2020-11-24 20:39:11,226 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:39:11,226 INFO  L93              Difference]: Finished difference Result 2484 states and 2841 transitions.
[2020-11-24 20:39:11,226 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-11-24 20:39:11,226 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2484 states and 2841 transitions.
[2020-11-24 20:39:11,231 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-24 20:39:11,236 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2484 states to 2484 states and 2841 transitions.
[2020-11-24 20:39:11,236 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 856
[2020-11-24 20:39:11,236 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 856
[2020-11-24 20:39:11,236 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2484 states and 2841 transitions.
[2020-11-24 20:39:11,238 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:39:11,238 INFO  L728         BuchiCegarLoop]: Abstraction has 2484 states and 2841 transitions.
[2020-11-24 20:39:11,239 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2484 states and 2841 transitions.
[2020-11-24 20:39:11,248 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2484 to 2216.
[2020-11-24 20:39:11,248 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2216 states.
[2020-11-24 20:39:11,251 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2216 states to 2216 states and 2479 transitions.
[2020-11-24 20:39:11,251 INFO  L751         BuchiCegarLoop]: Abstraction has 2216 states and 2479 transitions.
[2020-11-24 20:39:11,251 INFO  L631         BuchiCegarLoop]: Abstraction has 2216 states and 2479 transitions.
[2020-11-24 20:39:11,251 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 20:39:11,251 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2216 states and 2479 transitions.
[2020-11-24 20:39:11,253 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 20:39:11,253 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:39:11,253 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:39:11,254 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:39:11,254 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_Litecoin_SV0 := false;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4599]              assume null == 0;
[L4600]  CALL        call this := FreshRefGenerator__success();
[L2180]              havoc newRef;
[L2181]              assume Alloc[newRef] == false;
[L2182]              Alloc[newRef] := true;
[L2183]              assume newRef != null;
[L4600]  RET         call this := FreshRefGenerator__success();
[L4601]              assume now >= 0;
[L4602]              assume DType[this] == Litecoin_SV;
[L4603]              assume msgvalue_MSG == 0;
[L4604]              gas := gas - 53000;
[L4605]  CALL        call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L825]               havoc __exception;
[L826]               revert := false;
[L827]   COND FALSE  !(__exception)
[L852]   CALL        call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L2536]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2316]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2301]              assume msgsender_MSG != null;
[L2302]              Balance[this] := 0;
[L2316]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2317]  COND FALSE  !(revert)
[L2536]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2537]  COND FALSE  !(revert)
[L2540]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2386]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2368]              assume msgsender_MSG != null;
[L2369]              Balance[this] := 0;
[L2370]              owner_Owned[this] := null;
[L2371]              newOwner_Owned[this] := null;
[L2373]              owner_Owned[this] := msgsender_MSG;
[L2386]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2387]  COND FALSE  !(revert)
[L2540]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2541]  COND FALSE  !(revert)
[L2544]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2212]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2197]              assume msgsender_MSG != null;
[L2198]              Balance[this] := 0;
[L2212]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2213]  COND FALSE  !(revert)
[L2544]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2545]  COND FALSE  !(revert)
[L2548]  CALL        call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2489]              assume msgsender_MSG != null;
[L2490]              Balance[this] := 0;
[L2491]              businessName_Litecoin_SV[this] := 1031794244;
[L2492]              businessCountry_Litecoin_SV[this] := 1031794244;
[L2493]              symbol_Litecoin_SV[this] := 1031794244;
[L2494]              name_Litecoin_SV[this] := 1031794244;
[L2495]              decimals_Litecoin_SV[this] := 0;
[L2496]              _totalSupply_Litecoin_SV[this] := 0;
[L2497]              balances_Litecoin_SV[this] := zeroRefintArr();
[L2498]              sum_balances0[this] := 0;
[L2499]              allowed_Litecoin_SV[this] := zeroRefRefintArr();
[L2500]              sum_allowed1[this] := 0;
[L2502]              businessName_Litecoin_SV[this] := -1948412360;
[L2503]              businessCountry_Litecoin_SV[this] := 1439465232;
[L2504]              symbol_Litecoin_SV[this] := -803338840;
[L2505]              name_Litecoin_SV[this] := 1836794956;
[L2506]              decimals_Litecoin_SV[this] := 18;
[L2507]              _totalSupply_Litecoin_SV[this] := 25000000000000000000000000;
[L2508]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2509]              balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131] := _totalSupply_Litecoin_SV[this];
[L2510]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][274065342320335901504960670128395654555070149131];
[L2511]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2548]  RET         call Litecoin_SV_Litecoin_SV_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2549]  COND FALSE  !(revert)
[L852]   RET         call Litecoin_SV_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG);
[L853]               assume !revert && gas >= 0;
[L4605]  RET         call Litecoin_SV_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG);
[L4606]              assume !revert && gas >= 0;
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND TRUE   choice == 15
[L4497]              gas := gas - 21000;
[L4498]  COND TRUE   gas >= 0
[L4499]              assume tokens_s383 >= 0 && tokens_s383 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4500]              assume msgvalue_MSG == 0;
[L4501]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1001]              havoc __exception;
[L1002]              revert := false;
[L1003]  COND FALSE  !(__exception)
[L1028]  CALL        call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L2616]  COND TRUE   DType[this] == Litecoin_SV
[L2617]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2617]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][msgsender_MSG], tokens_s383);
[L2618]  COND FALSE  !(revert)
[L2624]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][msgsender_MSG];
[L2625]              balances_Litecoin_SV[this][msgsender_MSG] := __var_3;
[L2626]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][msgsender_MSG];
[L2627]  COND TRUE   DType[this] == Litecoin_SV
[L2628]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2628]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s383], tokens_s383);
[L2629]  COND FALSE  !(revert)
[L2635]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s383];
[L2636]              balances_Litecoin_SV[this][to_s383] := __var_4;
[L2637]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s383];
[L2638]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2639]              success_s383 := true;
[L1028]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L1029]              assume !revert && gas >= 0;
[L4501]  RET         call success_s383 := transfer~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, to_s383, tokens_s383);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND FALSE  !(choice == 14)
[L4510]  COND TRUE   choice == 13
[L4511]              gas := gas - 21000;
[L4512]  COND TRUE   gas >= 0
[L4513]              assume tokens_s470 >= 0 && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4514]              assume msgvalue_MSG == 0;
[L4515]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((p1 != from_s470 || p2 != msgsender_MSG) && from_s470 == to_s470) && tokens_s470 <= balances_Litecoin_SV[this][from_s470]) && tokens_s470 <= allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) && tokens_s470 >= 0) && tokens_s470 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][to_s470] >= 0) && balances_Litecoin_SV[this][to_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_Litecoin_SV[this][from_s470] >= 0) && balances_Litecoin_SV[this][from_s470] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] >= 0) && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_Litecoin_SV0 := true;
[L3]                 call_transferFrom_Litecoin_SV0 := false;
[L3]                 revert := revert_hold;
[L1123]              havoc __exception;
[L1124]              revert := false;
[L1125]  COND FALSE  !(__exception)
[L1150]  CALL        call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L2709]  COND TRUE   DType[this] == Litecoin_SV
[L2710]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2710]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][from_s470], tokens_s470);
[L2711]  COND FALSE  !(revert)
[L2717]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][from_s470];
[L2718]              balances_Litecoin_SV[this][from_s470] := __var_5;
[L2719]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][from_s470];
[L2720]  COND TRUE   DType[this] == Litecoin_SV
[L2721]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2247]  COND FALSE  !(!(b_s45 <= a_s45))
[L2251]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2721]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_Litecoin_SV[this][from_s470][msgsender_MSG], tokens_s470);
[L2722]  COND FALSE  !(revert)
[L2728]              sum_allowed1[from_s470] := sum_allowed1[from_s470] - allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2729]              allowed_Litecoin_SV[this][from_s470][msgsender_MSG] := __var_6;
[L2730]              sum_allowed1[from_s470] := sum_allowed1[from_s470] + allowed_Litecoin_SV[this][from_s470][msgsender_MSG];
[L2731]  COND TRUE   DType[this] == Litecoin_SV
[L2732]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2229]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2230]  COND FALSE  !(!(c_s23 >= a_s23))
[L2732]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_Litecoin_SV[this][to_s470], tokens_s470);
[L2733]  COND FALSE  !(revert)
[L2739]              sum_balances0[this] := sum_balances0[this] - balances_Litecoin_SV[this][to_s470];
[L2740]              balances_Litecoin_SV[this][to_s470] := __var_7;
[L2741]              sum_balances0[this] := sum_balances0[this] + balances_Litecoin_SV[this][to_s470];
[L2742]              assert { :EventEmitted "Transfer_Litecoin_SV" } true;
[L2743]              success_s470 := true;
[L1150]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L1151]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s470 == true && allowed_Litecoin_SV[this][from_s470][msgsender_MSG] == old(allowed_Litecoin_SV[this][from_s470][msgsender_MSG]) - tokens_s470) && _totalSupply_Litecoin_SV[this] == old(_totalSupply_Litecoin_SV[this])) && balances_Litecoin_SV[this] == old(balances_Litecoin_SV[this])) && allowed_Litecoin_SV[this][p1][p2] == old(allowed_Litecoin_SV[this][p1][p2])) && businessName_Litecoin_SV[this] == old(businessName_Litecoin_SV[this])) && businessCountry_Litecoin_SV[this] == old(businessCountry_Litecoin_SV[this])) && symbol_Litecoin_SV[this] == old(symbol_Litecoin_SV[this])) && name_Litecoin_SV[this] == old(name_Litecoin_SV[this])) && decimals_Litecoin_SV[this] == old(decimals_Litecoin_SV[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4515]  RET         call success_s470 := transferFrom~address~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, from_s470, to_s470, tokens_s470);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

Loop:
[L4609]  CALL        call CorralChoice_Litecoin_SV(this);
[L4386]              havoc msgsender_MSG;
[L4387]              havoc msgvalue_MSG;
[L4388]              havoc choice;
[L4389]              havoc a_s23;
[L4390]              havoc b_s23;
[L4391]              havoc c_s23;
[L4392]              havoc a_s45;
[L4393]              havoc b_s45;
[L4394]              havoc c_s45;
[L4395]              havoc a_s73;
[L4396]              havoc b_s73;
[L4397]              havoc c_s73;
[L4398]              havoc a_s95;
[L4399]              havoc b_s95;
[L4400]              havoc c_s95;
[L4401]              havoc __ret_0_totalSupply;
[L4402]              havoc tokenOwner_s340;
[L4403]              havoc balance_s340;
[L4404]              havoc tokenOwner_s486;
[L4405]              havoc spender_s486;
[L4406]              havoc remaining_s486;
[L4407]              havoc to_s383;
[L4408]              havoc tokens_s383;
[L4409]              havoc success_s383;
[L4410]              havoc spender_s411;
[L4411]              havoc tokens_s411;
[L4412]              havoc success_s411;
[L4413]              havoc from_s470;
[L4414]              havoc to_s470;
[L4415]              havoc tokens_s470;
[L4416]              havoc success_s470;
[L4417]              havoc __ret_0_owner;
[L4418]              havoc __ret_0_newOwner;
[L4419]              havoc _newOwner_s217;
[L4420]              havoc __ret_0_businessName;
[L4421]              havoc __ret_0_businessCountry;
[L4422]              havoc __ret_0_symbol;
[L4423]              havoc __ret_0_name;
[L4424]              havoc __ret_0_decimals;
[L4425]              havoc __ret_0__totalSupply;
[L4426]              havoc spender_s529;
[L4427]              havoc tokens_s529;
[L4428]              havoc data_s529;
[L4429]              havoc success_s529;
[L4430]              havoc tokenAddress_s556;
[L4431]              havoc tokens_s556;
[L4432]              havoc success_s556;
[L4433]              havoc tmpNow;
[L4434]              havoc gas;
[L4435]              assume gas > 4000000 && gas <= 8000000;
[L4436]              tmpNow := now;
[L4437]              havoc now;
[L4438]              assume now > tmpNow;
[L4439]              assume msgsender_MSG != null;
[L4440]              assume DType[msgsender_MSG] != SafeMath;
[L4441]              assume DType[msgsender_MSG] != ERC20Interface;
[L4442]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4443]              assume DType[msgsender_MSG] != Owned;
[L4444]              assume DType[msgsender_MSG] != Litecoin_SV;
[L4445]              Alloc[msgsender_MSG] := true;
[L4446]  COND FALSE  !(choice == 22)
[L4454]  COND FALSE  !(choice == 21)
[L4462]  COND FALSE  !(choice == 20)
[L4470]  COND FALSE  !(choice == 19)
[L4478]  COND FALSE  !(choice == 18)
[L4484]  COND FALSE  !(choice == 17)
[L4490]  COND FALSE  !(choice == 16)
[L4496]  COND FALSE  !(choice == 15)
[L4503]  COND TRUE   choice == 14
[L4504]              gas := gas - 21000;
[L4505]  COND TRUE   gas >= 0
[L4506]              assume tokens_s411 >= 0 && tokens_s411 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4507]              assume msgvalue_MSG == 0;
[L4508]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1061]              havoc __exception;
[L1062]              revert := false;
[L1063]  COND FALSE  !(__exception)
[L1088]  CALL        call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L2654]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2655]              allowed_Litecoin_SV[this][msgsender_MSG][spender_s411] := tokens_s411;
[L2656]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_Litecoin_SV[this][msgsender_MSG][spender_s411];
[L2657]              assert { :EventEmitted "Approval_Litecoin_SV" } true;
[L2658]              success_s411 := true;
[L1088]  RET         call success_s411 := approve~address~uint256_Litecoin_SV__success(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L1089]              assume !revert && gas >= 0;
[L4508]  RET         call success_s411 := approve~address~uint256_Litecoin_SV(this, msgsender_MSG, msgvalue_MSG, spender_s411, tokens_s411);
[L4609]  RET         call CorralChoice_Litecoin_SV(this);

[2020-11-24 20:39:11,258 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:39:11,258 INFO  L82        PathProgramCache]: Analyzing trace with hash 250002432, now seen corresponding path program 1 times
[2020-11-24 20:39:11,259 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:39:11,320 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:39:11,687 INFO  L134       CoverageAnalysis]: Checked inductivity of 218 backedges. 140 proven. 2 refuted. 0 times theorem prover too weak. 76 trivial. 0 not checked.
[2020-11-24 20:39:11,687 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:39:11,687 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-24 20:39:11,688 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:39:11,688 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-24 20:39:11,688 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=45, Invalid=335, Unknown=0, NotChecked=0, Total=380
[2020-11-24 20:39:11,688 INFO  L87              Difference]: Start difference. First operand 2216 states and 2479 transitions. cyclomatic complexity: 273 Second operand 20 states.
[2020-11-24 20:39:13,863 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:39:13,863 INFO  L93              Difference]: Finished difference Result 1125 states and 1242 transitions.
[2020-11-24 20:39:13,863 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-24 20:39:13,863 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1125 states and 1242 transitions.
[2020-11-24 20:39:13,866 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:39:13,866 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1125 states to 0 states and 0 transitions.
[2020-11-24 20:39:13,866 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 20:39:13,866 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 20:39:13,866 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 20:39:13,866 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:39:13,866 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:39:13,866 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:39:13,866 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:39:13,866 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-24 20:39:13,866 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 20:39:13,866 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:39:13,866 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 20:39:13,869 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:39:13 BasicIcfg
[2020-11-24 20:39:13,869 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:39:13,870 INFO  L168              Benchmark]: Toolchain (without parser) took 76998.20 ms. Allocated memory was 1.0 GB in the beginning and 3.4 GB in the end (delta: 2.4 GB). Free memory was 935.2 MB in the beginning and 1.4 GB in the end (delta: -462.5 MB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
[2020-11-24 20:39:13,870 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:39:13,870 INFO  L168              Benchmark]: Boogie Preprocessor took 90.85 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:39:13,870 INFO  L168              Benchmark]: UtopiaSpecLang took 63.57 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:39:13,871 INFO  L168              Benchmark]: Boogie Printer took 16.64 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:39:13,871 INFO  L168              Benchmark]: RCFGBuilder took 750.80 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 790.2 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:39:13,871 INFO  L168              Benchmark]: UtopiaLTL2Aut took 42.72 ms. Allocated memory is still 1.0 GB. Free memory was 790.2 MB in the beginning and 786.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-24 20:39:13,871 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1422.06 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 206.6 MB). Free memory was 786.7 MB in the beginning and 959.5 MB in the end (delta: -172.8 MB). Peak memory consumption was 176.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:39:13,872 INFO  L168              Benchmark]: BlockEncodingV2 took 129.36 ms. Allocated memory is still 1.2 GB. Free memory was 959.5 MB in the beginning and 880.6 MB in the end (delta: 78.9 MB). Peak memory consumption was 78.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:39:13,872 INFO  L168              Benchmark]: BuchiAutomizer took 74479.30 ms. Allocated memory was 1.2 GB in the beginning and 3.4 GB in the end (delta: 2.2 GB). Free memory was 880.6 MB in the beginning and 1.4 GB in the end (delta: -517.1 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-24 20:39:13,875 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4038 locations, 6915 edges
  - StatisticsResult: Encoded RCFG
    3978 locations, 6755 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 90.85 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 63.57 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.64 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.4 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 750.80 ms. Allocated memory is still 1.0 GB. Free memory was 908.4 MB in the beginning and 790.2 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 42.72 ms. Allocated memory is still 1.0 GB. Free memory was 790.2 MB in the beginning and 786.7 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1422.06 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 206.6 MB). Free memory was 786.7 MB in the beginning and 959.5 MB in the end (delta: -172.8 MB). Peak memory consumption was 176.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 129.36 ms. Allocated memory is still 1.2 GB. Free memory was 959.5 MB in the beginning and 880.6 MB in the end (delta: 78.9 MB). Peak memory consumption was 78.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 74479.30 ms. Allocated memory was 1.2 GB in the beginning and 3.4 GB in the end (delta: 2.2 GB). Free memory was 880.6 MB in the beginning and 1.4 GB in the end (delta: -517.1 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1707 locations, 2139 edges
  - StatisticsResult: BuchiProgram size
    4038 locations, 6915 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 16 terminating modules (16 trivial, 0 deterministic, 0 nondeterministic). 16 modules have a trivial ranking function, the largest among these consists of 52 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 74.4s and 17 iterations.  TraceHistogramMax:3. Analysis of lassos took 12.2s. Construction of modules took 47.9s. BÃ¼chi inclusion checks took 13.4s. Highest rank in rank-based complementation 0. Minimization of det autom 16. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 15 MinimizatonAttempts, 2794 StatesRemovedByMinimization, 14 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3048 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 37868 SDtfs, 46803 SDslu, 172266 SDs, 0 SdLazy, 325663 SolverSat, 7286 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 47.9s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU16 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_Litecoin_SV0) ==> ( <>(success_transferFrom_Litecoin_SV0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
