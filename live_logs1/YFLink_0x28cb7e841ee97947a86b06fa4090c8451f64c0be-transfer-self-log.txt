This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:34:11,710 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:34:11,711 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:34:11,724 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:34:11,724 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:34:11,725 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:34:11,726 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:34:11,728 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:34:11,729 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:34:11,730 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:34:11,731 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:34:11,731 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:34:11,732 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:34:11,732 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:34:11,733 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:34:11,734 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:34:11,735 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:34:11,736 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:34:11,737 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:34:11,738 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:34:11,739 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:34:11,741 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:34:11,744 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:34:11,745 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:34:11,745 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:34:11,746 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:34:11,746 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:34:11,747 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:34:11,748 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:34:11,748 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:34:11,749 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:34:11,750 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:34:11,751 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:34:11,751 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:34:11,753 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:34:11,753 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:34:11,754 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:34:11,754 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:34:11,754 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:34:11,755 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:34:11,756 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:34:11,756 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:34:11,764 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:34:11,764 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:34:11,765 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:34:11,765 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:34:11,765 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:34:11,765 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:34:11,765 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:34:11,765 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:34:11,765 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:34:11,765 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:34:11,766 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:34:11,766 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:34:11,766 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:34:11,766 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:34:11,766 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:34:11,766 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:34:11,766 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:34:11,766 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:34:11,766 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:34:11,766 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:34:11,767 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:34:11,767 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:34:11,767 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:34:11,767 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:34:11,767 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:34:11,767 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:34:11,791 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:34:11,804 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:34:11,807 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:34:11,809 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:34:11,809 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:34:11,810 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl
[2020-11-25 09:34:11,811 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl'
[2020-11-25 09:34:11,902 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:34:11,903 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:34:11,903 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:34:11,903 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:34:11,903 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:34:11,920 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/1) ...
[2020-11-25 09:34:11,922 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/1) ...
[2020-11-25 09:34:11,960 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/1) ...
[2020-11-25 09:34:11,961 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/1) ...
[2020-11-25 09:34:11,982 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/1) ...
[2020-11-25 09:34:11,992 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/1) ...
[2020-11-25 09:34:12,000 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/1) ...
[2020-11-25 09:34:12,010 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:34:12,011 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:34:12,011 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:34:12,013 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:34:12,017 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/1) ...
[2020-11-25 09:34:12,049 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_YFLink[this] == old(governance_YFLink[this]) && minters_YFLink[this] == old(minters_YFLink[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 09:34:12,055 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_YFLink[this] == old(governance_YFLink[this]) && minters_YFLink[this] == old(minters_YFLink[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 09:34:12,062 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_YFLink[this] == old(governance_YFLink[this]) && minters_YFLink[this] == old(minters_YFLink[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 09:34:12,069 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s140 && amount_s140<=_balances_ERC20[this][msg.sender] ) && amount_s140>=0 ) && amount_s140<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s140]>=0 ) && _balances_ERC20[this][recipient_s140]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s140,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:34:12,072 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && governance_YFLink[this]==( old(governance_YFLink[this]) ) ) && minters_YFLink[this]==( old(minters_YFLink[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[governance_YFLink,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[governance_YFLink,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[minters_YFLink,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[minters_YFLink,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]
[2020-11-25 09:34:12,077 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && governance_YFLink[this] == old(governance_YFLink[this]) && minters_YFLink[this] == old(minters_YFLink[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 09:34:12,078 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:34:12,088 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:34:12 PropertyContainer
[2020-11-25 09:34:12,088 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:34:12,089 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:34:12,089 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:34:12,089 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:34:12,090 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/2) ...
[2020-11-25 09:34:12,090 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:34:12,090 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:34:12,105 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:34:12" (2/2) ...
[2020-11-25 09:34:12,105 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:34:12,106 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:34:12,106 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:34:12,106 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:34:12,106 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/2) ...
[2020-11-25 09:34:12,161 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:34:12,161 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 09:34:12,161 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 09:34:12,161 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 09:34:12,161 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 09:34:12,161 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 09:34:12,161 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 09:34:12,161 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 09:34:12,162 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 09:34:12,162 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 09:34:12,162 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 09:34:12,162 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 09:34:12,162 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 09:34:12,162 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 09:34:12,162 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:34:12,162 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 09:34:12,163 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 09:34:12,163 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 09:34:12,163 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 09:34:12,163 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 09:34:12,164 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 09:34:12,164 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 09:34:12,164 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 09:34:12,164 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 09:34:12,164 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 09:34:12,164 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 09:34:12,164 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 09:34:12,164 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:34:12,164 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 09:34:12,164 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 09:34:12,165 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 09:34:12,165 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 09:34:12,165 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 09:34:12,165 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 09:34:12,165 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 09:34:12,165 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 09:34:12,165 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 09:34:12,165 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 09:34:12,165 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 09:34:12,165 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 09:34:12,165 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 09:34:12,166 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 09:34:12,166 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 09:34:12,166 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 09:34:12,166 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 09:34:12,166 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 09:34:12,166 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:34:12,166 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:34:12,166 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:34:12,166 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:34:12,166 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 09:34:12,167 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:34:12,167 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 09:34:12,167 INFO  L130     BoogieDeclarations]: Found specification of procedure YFLink_YFLink_NoBaseCtor__success
[2020-11-25 09:34:12,167 INFO  L130     BoogieDeclarations]: Found specification of procedure YFLink_YFLink
[2020-11-25 09:34:12,167 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFLink_YFLink
[2020-11-25 09:34:12,167 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFLink
[2020-11-25 09:34:12,167 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFLink
[2020-11-25 09:34:12,167 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFLink
[2020-11-25 09:34:12,167 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFLink
[2020-11-25 09:34:12,167 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFLink
[2020-11-25 09:34:12,167 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFLink
[2020-11-25 09:34:12,168 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFLink
[2020-11-25 09:34:12,168 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFLink
[2020-11-25 09:34:12,168 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFLink
[2020-11-25 09:34:12,168 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFLink
[2020-11-25 09:34:12,168 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFLink
[2020-11-25 09:34:12,168 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFLink
[2020-11-25 09:34:12,168 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:34:12,168 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:34:12,168 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:34:12,168 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 09:34:12,169 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 09:34:12,169 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 09:34:12,169 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 09:34:12,169 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 09:34:12,169 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 09:34:12,169 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 09:34:12,169 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 09:34:12,169 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:34:12,170 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:34:12,170 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_YFLink
[2020-11-25 09:34:12,170 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:34:12,170 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:34:12,170 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 09:34:12,170 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 09:34:12,170 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 09:34:12,170 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 09:34:12,170 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 09:34:12,170 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 09:34:12,171 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 09:34:12,171 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:34:12,171 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 09:34:12,171 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 09:34:12,171 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 09:34:12,171 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 09:34:12,171 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 09:34:12,171 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 09:34:12,171 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 09:34:12,171 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 09:34:12,172 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 09:34:12,172 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 09:34:12,172 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 09:34:12,172 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 09:34:12,172 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 09:34:12,172 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 09:34:12,172 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:34:12,172 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:34:12,172 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:34:12,173 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:34:12,173 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 09:34:12,173 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 09:34:12,173 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 09:34:12,173 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 09:34:12,173 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 09:34:12,173 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 09:34:12,173 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 09:34:12,173 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 09:34:12,173 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 09:34:12,174 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 09:34:12,174 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 09:34:12,174 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 09:34:12,174 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 09:34:12,174 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:34:12,174 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:34:12,174 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:34:12,174 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:34:12,174 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:34:12,175 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:34:12,175 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:34:12,175 INFO  L130     BoogieDeclarations]: Found specification of procedure YFLink_YFLink_NoBaseCtor__fail
[2020-11-25 09:34:12,175 INFO  L130     BoogieDeclarations]: Found specification of procedure YFLink_YFLink__success
[2020-11-25 09:34:12,175 INFO  L130     BoogieDeclarations]: Found specification of procedure YFLink_YFLink__fail
[2020-11-25 09:34:12,175 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFLink__success
[2020-11-25 09:34:12,175 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_YFLink__fail
[2020-11-25 09:34:12,176 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFLink__success
[2020-11-25 09:34:12,176 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_YFLink__fail
[2020-11-25 09:34:12,176 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFLink__success
[2020-11-25 09:34:12,176 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_YFLink__fail
[2020-11-25 09:34:12,176 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFLink__success
[2020-11-25 09:34:12,176 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_YFLink__fail
[2020-11-25 09:34:12,176 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFLink__success
[2020-11-25 09:34:12,176 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_YFLink__fail
[2020-11-25 09:34:12,176 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFLink__success
[2020-11-25 09:34:12,176 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_YFLink__fail
[2020-11-25 09:34:12,177 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:34:12,177 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:34:12,177 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:34:12,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:34:12,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:34:12,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 09:34:12,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 09:34:12,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 09:34:12,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 09:34:12,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 09:34:12,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 09:34:12,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:34:12,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFLink_YFLink_NoBaseCtor__fail
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFLink_YFLink_NoBaseCtor__success
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFLink_YFLink__fail
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure YFLink_YFLink__success
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFLink__fail
[2020-11-25 09:34:12,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_YFLink__success
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFLink__fail
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_YFLink__success
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFLink__fail
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_YFLink__success
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFLink__fail
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_YFLink__success
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFLink__fail
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_YFLink__success
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFLink__fail
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_YFLink__success
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:34:12,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_YFLink
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:34:12,184 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:34:12,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:34:12,396 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:34:12,397 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:34:12,397 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:34:12,889 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:34:12,890 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 09:34:12,892 INFO  L202        PluginConnector]: Adding new model YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:34:12 BoogieIcfgContainer
[2020-11-25 09:34:12,892 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:34:12" (2/2) ...
[2020-11-25 09:34:12,892 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:34:12,892 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2e753934 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:34:12, skipping insertion in model container
[2020-11-25 09:34:12,892 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:34:12,893 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:34:12,893 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:34:12,894 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:34:12,894 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/3) ...
[2020-11-25 09:34:12,895 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@32454014 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:34:12, skipping insertion in model container
[2020-11-25 09:34:12,895 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:34:12" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:34:12,929 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:34:12 NWAContainer
[2020-11-25 09:34:12,929 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:34:12,929 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:34:12,929 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:34:12,930 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:34:12,930 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:34:12" (3/4) ...
[2020-11-25 09:34:12,931 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@7eeaf40 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:34:12, skipping insertion in model container
[2020-11-25 09:34:12,931 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:34:12" (4/4) ...
[2020-11-25 09:34:12,934 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:34:12,938 INFO  L110   BuchiProductObserver]: Initial RCFG 1787 locations, 2445 edges
[2020-11-25 09:34:12,938 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:34:12,949 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:34:14,370 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:34:14,378 INFO  L110   BuchiProductObserver]: BuchiProgram size 4436 locations, 7953 edges
[2020-11-25 09:34:14,379 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:34:14 BoogieIcfgContainer
[2020-11-25 09:34:14,379 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:34:14,379 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:34:14,379 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:34:14,381 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:34:14,381 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:34:14" (1/1) ...
[2020-11-25 09:34:14,480 INFO  L313           BlockEncoder]: Initial Icfg 4436 locations, 7953 edges
[2020-11-25 09:34:14,480 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:34:14,480 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:34:14,481 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:34:14,481 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:34:14,492 INFO  L70    emoveInfeasibleEdges]: Removed 144 edges and 15 locations because of local infeasibility
[2020-11-25 09:34:14,499 INFO  L70        RemoveSinkStates]: Removed 92 edges and 61 locations by removing sink states
[2020-11-25 09:34:14,512 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:34:14,516 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:34:14,519 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:34:14,520 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:34:14,524 INFO  L313           BlockEncoder]: Encoded RCFG 4340 locations, 7688 edges
[2020-11-25 09:34:14,525 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:34:14 BasicIcfg
[2020-11-25 09:34:14,525 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:34:14,525 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:34:14,525 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:34:14,528 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:34:14,528 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:34:14,528 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:34:11" (1/6) ...
[2020-11-25 09:34:14,530 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20d25748 and model type YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:34:14, skipping insertion in model container
[2020-11-25 09:34:14,530 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:34:14,530 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:34:12" (2/6) ...
[2020-11-25 09:34:14,531 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20d25748 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:34:14, skipping insertion in model container
[2020-11-25 09:34:14,531 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:34:14,531 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:34:12" (3/6) ...
[2020-11-25 09:34:14,531 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20d25748 and model type YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:34:14, skipping insertion in model container
[2020-11-25 09:34:14,531 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:34:14,531 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:34:12" (4/6) ...
[2020-11-25 09:34:14,532 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20d25748 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:34:14, skipping insertion in model container
[2020-11-25 09:34:14,532 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:34:14,532 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:34:14" (5/6) ...
[2020-11-25 09:34:14,532 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@20d25748 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:34:14, skipping insertion in model container
[2020-11-25 09:34:14,532 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:34:14,532 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:34:14" (6/6) ...
[2020-11-25 09:34:14,533 INFO  L404   chiAutomizerObserver]: Analyzing ICFG YFLink_0x28cb7e841ee97947a86b06fa4090c8451f64c0be_transfer-self.bpl_BEv2
[2020-11-25 09:34:14,568 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:34:14,568 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:34:14,568 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:34:14,568 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:34:14,568 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:34:14,568 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:34:14,568 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:34:14,568 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:34:14,568 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:34:14,598 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4340 states.
[2020-11-25 09:34:14,651 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:14,651 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:14,651 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:14,658 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:14,658 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:14,658 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:34:14,658 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4340 states.
[2020-11-25 09:34:14,675 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:14,675 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:14,675 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:14,677 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:14,677 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND TRUE   revert
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND TRUE   choice == 17
[L4748]              gas := gas - 21000;
[L4749]  COND FALSE  !(gas >= 0)
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:14,690 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:14,690 INFO  L82        PathProgramCache]: Analyzing trace with hash 176833225, now seen corresponding path program 1 times
[2020-11-25 09:34:14,694 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:14,713 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:14,749 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:34:14,751 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:14,752 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:34:14,988 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:14,998 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:34:14,998 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:34:15,000 INFO  L87              Difference]: Start difference. First operand 4340 states. Second operand 4 states.
[2020-11-25 09:34:15,375 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:15,375 INFO  L93              Difference]: Finished difference Result 2911 states and 3414 transitions.
[2020-11-25 09:34:15,375 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:34:15,377 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2911 states and 3414 transitions.
[2020-11-25 09:34:15,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:15,411 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2911 states to 2911 states and 3414 transitions.
[2020-11-25 09:34:15,412 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:34:15,414 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 771
[2020-11-25 09:34:15,414 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2911 states and 3414 transitions.
[2020-11-25 09:34:15,423 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:15,423 INFO  L728         BuchiCegarLoop]: Abstraction has 2911 states and 3414 transitions.
[2020-11-25 09:34:15,441 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2911 states and 3414 transitions.
[2020-11-25 09:34:15,489 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2911 to 2911.
[2020-11-25 09:34:15,490 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2911 states.
[2020-11-25 09:34:15,494 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2911 states to 2911 states and 3414 transitions.
[2020-11-25 09:34:15,495 INFO  L751         BuchiCegarLoop]: Abstraction has 2911 states and 3414 transitions.
[2020-11-25 09:34:15,495 INFO  L631         BuchiCegarLoop]: Abstraction has 2911 states and 3414 transitions.
[2020-11-25 09:34:15,495 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:34:15,495 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2911 states and 3414 transitions.
[2020-11-25 09:34:15,502 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:15,502 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:15,502 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:15,504 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:15,504 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND TRUE   revert
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND TRUE   revert
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND TRUE   revert
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:15,509 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:15,509 INFO  L82        PathProgramCache]: Analyzing trace with hash -2140490926, now seen corresponding path program 1 times
[2020-11-25 09:34:15,510 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:15,520 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:15,546 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:34:15,546 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:15,546 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:34:15,547 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:15,548 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:34:15,548 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:34:15,548 INFO  L87              Difference]: Start difference. First operand 2911 states and 3414 transitions. cyclomatic complexity: 505 Second operand 4 states.
[2020-11-25 09:34:16,280 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:16,280 INFO  L93              Difference]: Finished difference Result 4115 states and 4764 transitions.
[2020-11-25 09:34:16,280 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:34:16,280 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4115 states and 4764 transitions.
[2020-11-25 09:34:16,297 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:34:16,316 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4115 states to 3921 states and 4536 transitions.
[2020-11-25 09:34:16,317 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1048
[2020-11-25 09:34:16,318 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1068
[2020-11-25 09:34:16,318 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3921 states and 4536 transitions.
[2020-11-25 09:34:16,325 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:16,325 INFO  L728         BuchiCegarLoop]: Abstraction has 3921 states and 4536 transitions.
[2020-11-25 09:34:16,328 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3921 states and 4536 transitions.
[2020-11-25 09:34:16,364 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3921 to 2989.
[2020-11-25 09:34:16,364 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2989 states.
[2020-11-25 09:34:16,371 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2989 states to 2989 states and 3332 transitions.
[2020-11-25 09:34:16,371 INFO  L751         BuchiCegarLoop]: Abstraction has 2989 states and 3332 transitions.
[2020-11-25 09:34:16,371 INFO  L631         BuchiCegarLoop]: Abstraction has 2989 states and 3332 transitions.
[2020-11-25 09:34:16,372 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:34:16,372 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2989 states and 3332 transitions.
[2020-11-25 09:34:16,381 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:16,381 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:16,381 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:16,384 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:16,384 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND TRUE   !(sender_s323 != null)
[L2705]              revert := true;
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND TRUE   !(sender_s323 != null)
[L2705]              revert := true;
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:16,390 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:16,390 INFO  L82        PathProgramCache]: Analyzing trace with hash -1479565260, now seen corresponding path program 1 times
[2020-11-25 09:34:16,391 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:16,409 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:16,512 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:34:16,512 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:16,512 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 09:34:16,513 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:16,513 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 09:34:16,513 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 09:34:16,513 INFO  L87              Difference]: Start difference. First operand 2989 states and 3332 transitions. cyclomatic complexity: 345 Second operand 8 states.
[2020-11-25 09:34:16,663 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:16,663 INFO  L93              Difference]: Finished difference Result 3013 states and 3360 transitions.
[2020-11-25 09:34:16,663 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:34:16,663 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3013 states and 3360 transitions.
[2020-11-25 09:34:16,670 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:16,678 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3013 states to 2993 states and 3338 transitions.
[2020-11-25 09:34:16,678 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 820
[2020-11-25 09:34:16,678 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 820
[2020-11-25 09:34:16,678 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2993 states and 3338 transitions.
[2020-11-25 09:34:16,681 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:16,681 INFO  L728         BuchiCegarLoop]: Abstraction has 2993 states and 3338 transitions.
[2020-11-25 09:34:16,684 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2993 states and 3338 transitions.
[2020-11-25 09:34:16,703 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2993 to 2993.
[2020-11-25 09:34:16,703 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2993 states.
[2020-11-25 09:34:16,706 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2993 states to 2993 states and 3338 transitions.
[2020-11-25 09:34:16,706 INFO  L751         BuchiCegarLoop]: Abstraction has 2993 states and 3338 transitions.
[2020-11-25 09:34:16,706 INFO  L631         BuchiCegarLoop]: Abstraction has 2993 states and 3338 transitions.
[2020-11-25 09:34:16,706 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:34:16,706 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2993 states and 3338 transitions.
[2020-11-25 09:34:16,709 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:16,709 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:16,710 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:16,711 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:16,711 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND TRUE   !(recipient_s323 != null)
[L2710]              revert := true;
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND TRUE   !(recipient_s323 != null)
[L2710]              revert := true;
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:16,714 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:16,715 INFO  L82        PathProgramCache]: Analyzing trace with hash -219561017, now seen corresponding path program 1 times
[2020-11-25 09:34:16,715 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:16,724 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:16,757 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:34:16,757 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:16,757 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:34:16,758 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:16,758 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:34:16,758 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:34:16,758 INFO  L87              Difference]: Start difference. First operand 2993 states and 3338 transitions. cyclomatic complexity: 347 Second operand 7 states.
[2020-11-25 09:34:16,802 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:16,802 INFO  L93              Difference]: Finished difference Result 3093 states and 3451 transitions.
[2020-11-25 09:34:16,802 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:34:16,802 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3093 states and 3451 transitions.
[2020-11-25 09:34:16,809 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:16,818 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3093 states to 3085 states and 3443 transitions.
[2020-11-25 09:34:16,818 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 839
[2020-11-25 09:34:16,818 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 839
[2020-11-25 09:34:16,818 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3085 states and 3443 transitions.
[2020-11-25 09:34:16,821 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:16,821 INFO  L728         BuchiCegarLoop]: Abstraction has 3085 states and 3443 transitions.
[2020-11-25 09:34:16,824 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3085 states and 3443 transitions.
[2020-11-25 09:34:16,845 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3085 to 3072.
[2020-11-25 09:34:16,845 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3072 states.
[2020-11-25 09:34:16,849 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3072 states to 3072 states and 3428 transitions.
[2020-11-25 09:34:16,849 INFO  L751         BuchiCegarLoop]: Abstraction has 3072 states and 3428 transitions.
[2020-11-25 09:34:16,849 INFO  L631         BuchiCegarLoop]: Abstraction has 3072 states and 3428 transitions.
[2020-11-25 09:34:16,849 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:34:16,849 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3072 states and 3428 transitions.
[2020-11-25 09:34:16,852 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:16,853 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:16,853 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:16,854 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:16,854 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND FALSE  !(!(recipient_s323 != null))
[L2713]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3046]  COND TRUE   !(b_s561 <= a_s561)
[L3047]              revert := true;
[L2713]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2714]  COND TRUE   revert
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND FALSE  !(!(recipient_s323 != null))
[L2713]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3046]  COND TRUE   !(b_s561 <= a_s561)
[L3047]              revert := true;
[L2713]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2714]  COND TRUE   revert
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:16,858 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:16,858 INFO  L82        PathProgramCache]: Analyzing trace with hash 1324049936, now seen corresponding path program 1 times
[2020-11-25 09:34:16,858 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:16,869 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:16,937 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:34:16,937 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:16,937 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [10] imperfect sequences [] total 10
[2020-11-25 09:34:16,938 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:16,938 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 09:34:16,938 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 09:34:16,938 INFO  L87              Difference]: Start difference. First operand 3072 states and 3428 transitions. cyclomatic complexity: 358 Second operand 10 states.
[2020-11-25 09:34:17,894 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:17,894 INFO  L93              Difference]: Finished difference Result 3225 states and 3596 transitions.
[2020-11-25 09:34:17,894 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 11 states. 
[2020-11-25 09:34:17,894 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3225 states and 3596 transitions.
[2020-11-25 09:34:17,901 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:17,909 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3225 states to 3225 states and 3596 transitions.
[2020-11-25 09:34:17,909 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 912
[2020-11-25 09:34:17,909 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 912
[2020-11-25 09:34:17,909 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3225 states and 3596 transitions.
[2020-11-25 09:34:17,912 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:17,912 INFO  L728         BuchiCegarLoop]: Abstraction has 3225 states and 3596 transitions.
[2020-11-25 09:34:17,914 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3225 states and 3596 transitions.
[2020-11-25 09:34:17,932 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3225 to 3072.
[2020-11-25 09:34:17,932 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3072 states.
[2020-11-25 09:34:17,935 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3072 states to 3072 states and 3428 transitions.
[2020-11-25 09:34:17,935 INFO  L751         BuchiCegarLoop]: Abstraction has 3072 states and 3428 transitions.
[2020-11-25 09:34:17,935 INFO  L631         BuchiCegarLoop]: Abstraction has 3072 states and 3428 transitions.
[2020-11-25 09:34:17,935 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:34:17,935 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3072 states and 3428 transitions.
[2020-11-25 09:34:17,938 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:17,938 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:17,939 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:17,940 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:17,940 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:17,943 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:17,943 INFO  L82        PathProgramCache]: Analyzing trace with hash 1694855803, now seen corresponding path program 1 times
[2020-11-25 09:34:17,944 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:17,973 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:18,315 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:34:18,315 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:18,315 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [25] imperfect sequences [] total 25
[2020-11-25 09:34:18,316 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:18,316 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 09:34:18,316 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=60, Invalid=590, Unknown=0, NotChecked=0, Total=650
[2020-11-25 09:34:18,316 INFO  L87              Difference]: Start difference. First operand 3072 states and 3428 transitions. cyclomatic complexity: 358 Second operand 26 states.
[2020-11-25 09:34:23,084 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:23,084 INFO  L93              Difference]: Finished difference Result 3134 states and 3515 transitions.
[2020-11-25 09:34:23,084 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 09:34:23,085 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3134 states and 3515 transitions.
[2020-11-25 09:34:23,099 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:34:23,110 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3134 states to 3134 states and 3515 transitions.
[2020-11-25 09:34:23,110 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 861
[2020-11-25 09:34:23,111 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 861
[2020-11-25 09:34:23,111 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3134 states and 3515 transitions.
[2020-11-25 09:34:23,114 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:23,114 INFO  L728         BuchiCegarLoop]: Abstraction has 3134 states and 3515 transitions.
[2020-11-25 09:34:23,117 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3134 states and 3515 transitions.
[2020-11-25 09:34:23,143 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3134 to 3119.
[2020-11-25 09:34:23,143 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3119 states.
[2020-11-25 09:34:23,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3119 states to 3119 states and 3484 transitions.
[2020-11-25 09:34:23,148 INFO  L751         BuchiCegarLoop]: Abstraction has 3119 states and 3484 transitions.
[2020-11-25 09:34:23,148 INFO  L631         BuchiCegarLoop]: Abstraction has 3119 states and 3484 transitions.
[2020-11-25 09:34:23,148 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:34:23,148 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3119 states and 3484 transitions.
[2020-11-25 09:34:23,153 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:23,153 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:23,153 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:23,155 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:23,155 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND FALSE  !(!(recipient_s323 != null))
[L2713]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3046]  COND FALSE  !(!(b_s561 <= a_s561))
[L3050]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3051]              __ret_0_ := c_s561;
[L2713]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2714]  COND FALSE  !(revert)
[L2717]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2718]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2719]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2720]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3022]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3023]  COND TRUE   !(c_s534 >= a_s534)
[L3024]              revert := true;
[L2720]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2721]  COND TRUE   revert
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND FALSE  !(!(recipient_s323 != null))
[L2713]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3046]  COND FALSE  !(!(b_s561 <= a_s561))
[L3050]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3051]              __ret_0_ := c_s561;
[L2713]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2714]  COND FALSE  !(revert)
[L2717]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2718]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2719]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2720]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3022]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3023]  COND TRUE   !(c_s534 >= a_s534)
[L3024]              revert := true;
[L2720]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2721]  COND TRUE   revert
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:23,160 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:23,160 INFO  L82        PathProgramCache]: Analyzing trace with hash -856273195, now seen corresponding path program 1 times
[2020-11-25 09:34:23,161 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:23,173 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:23,296 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:34:23,297 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:23,297 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [22] imperfect sequences [] total 22
[2020-11-25 09:34:23,297 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:23,297 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 23 interpolants.
[2020-11-25 09:34:23,297 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=45, Invalid=461, Unknown=0, NotChecked=0, Total=506
[2020-11-25 09:34:23,298 INFO  L87              Difference]: Start difference. First operand 3119 states and 3484 transitions. cyclomatic complexity: 369 Second operand 23 states.
[2020-11-25 09:34:25,947 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:25,947 INFO  L93              Difference]: Finished difference Result 3154 states and 3538 transitions.
[2020-11-25 09:34:25,947 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 09:34:25,947 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3154 states and 3538 transitions.
[2020-11-25 09:34:25,953 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:34:25,959 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3154 states to 3154 states and 3538 transitions.
[2020-11-25 09:34:25,959 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 870
[2020-11-25 09:34:25,960 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 870
[2020-11-25 09:34:25,960 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3154 states and 3538 transitions.
[2020-11-25 09:34:25,962 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:25,962 INFO  L728         BuchiCegarLoop]: Abstraction has 3154 states and 3538 transitions.
[2020-11-25 09:34:25,964 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3154 states and 3538 transitions.
[2020-11-25 09:34:25,981 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3154 to 3129.
[2020-11-25 09:34:25,981 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3129 states.
[2020-11-25 09:34:25,984 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3129 states to 3129 states and 3497 transitions.
[2020-11-25 09:34:25,984 INFO  L751         BuchiCegarLoop]: Abstraction has 3129 states and 3497 transitions.
[2020-11-25 09:34:25,984 INFO  L631         BuchiCegarLoop]: Abstraction has 3129 states and 3497 transitions.
[2020-11-25 09:34:25,984 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:34:25,984 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3129 states and 3497 transitions.
[2020-11-25 09:34:25,987 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:25,988 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:25,988 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:25,989 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:25,989 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND FALSE  !(!(recipient_s323 != null))
[L2713]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3046]  COND FALSE  !(!(b_s561 <= a_s561))
[L3050]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3051]              __ret_0_ := c_s561;
[L2713]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2714]  COND FALSE  !(revert)
[L2717]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2718]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2719]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2720]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3022]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3023]  COND FALSE  !(!(c_s534 >= a_s534))
[L3027]              __ret_0_ := c_s534;
[L2720]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2721]  COND FALSE  !(revert)
[L2724]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s323];
[L2725]              __tmp___balances_ERC20[this][recipient_s323] := __var_15;
[L2726]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s323];
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND FALSE  !(revert)
[L2244]              __ret_0_ := true;
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND FALSE  !(!(recipient_s323 != null))
[L2713]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3046]  COND FALSE  !(!(b_s561 <= a_s561))
[L3050]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3051]              __ret_0_ := c_s561;
[L2713]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2714]  COND FALSE  !(revert)
[L2717]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2718]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2719]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2720]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3022]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3023]  COND FALSE  !(!(c_s534 >= a_s534))
[L3027]              __ret_0_ := c_s534;
[L2720]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2721]  COND FALSE  !(revert)
[L2724]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s323];
[L2725]              __tmp___balances_ERC20[this][recipient_s323] := __var_15;
[L2726]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s323];
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND FALSE  !(revert)
[L2244]              __ret_0_ := true;
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:25,992 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:25,992 INFO  L82        PathProgramCache]: Analyzing trace with hash 140108744, now seen corresponding path program 1 times
[2020-11-25 09:34:25,993 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:26,000 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:26,028 INFO  L134       CoverageAnalysis]: Checked inductivity of 40 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:34:26,028 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:26,028 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 09:34:26,029 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:26,029 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 09:34:26,029 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 09:34:26,029 INFO  L87              Difference]: Start difference. First operand 3129 states and 3497 transitions. cyclomatic complexity: 372 Second operand 5 states.
[2020-11-25 09:34:26,471 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:26,471 INFO  L93              Difference]: Finished difference Result 3823 states and 4330 transitions.
[2020-11-25 09:34:26,471 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:34:26,471 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3823 states and 4330 transitions.
[2020-11-25 09:34:26,479 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:34:26,486 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3823 states to 3095 states and 3588 transitions.
[2020-11-25 09:34:26,486 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 709
[2020-11-25 09:34:26,486 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 709
[2020-11-25 09:34:26,486 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3095 states and 3588 transitions.
[2020-11-25 09:34:26,489 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:26,489 INFO  L728         BuchiCegarLoop]: Abstraction has 3095 states and 3588 transitions.
[2020-11-25 09:34:26,491 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3095 states and 3588 transitions.
[2020-11-25 09:34:26,504 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3095 to 2452.
[2020-11-25 09:34:26,504 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2452 states.
[2020-11-25 09:34:26,507 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2452 states to 2452 states and 2764 transitions.
[2020-11-25 09:34:26,507 INFO  L751         BuchiCegarLoop]: Abstraction has 2452 states and 2764 transitions.
[2020-11-25 09:34:26,507 INFO  L631         BuchiCegarLoop]: Abstraction has 2452 states and 2764 transitions.
[2020-11-25 09:34:26,507 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:34:26,507 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2452 states and 2764 transitions.
[2020-11-25 09:34:26,509 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:34:26,509 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:26,509 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:26,510 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:26,510 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND FALSE  !(choice == 15)
[L4766]  COND FALSE  !(choice == 14)
[L4772]  COND FALSE  !(choice == 13)
[L4779]  COND FALSE  !(choice == 12)
[L4786]  COND FALSE  !(choice == 11)
[L4793]  COND FALSE  !(choice == 10)
[L4800]  COND FALSE  !(choice == 9)
[L4806]  COND FALSE  !(choice == 8)
[L4812]  COND FALSE  !(choice == 7)
[L4818]  COND FALSE  !(choice == 6)
[L4824]  COND FALSE  !(choice == 5)
[L4830]  COND TRUE   choice == 4
[L4831]              gas := gas - 21000;
[L4832]  COND TRUE   gas >= 0
[L4833]              assume amount_s671 >= 0 && amount_s671 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4834]              assume msgvalue_MSG == 0;
[L4835]  CALL        call mint~address~uint256_YFLink(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1159]              havoc __exception;
[L1160]              revert := false;
[L1161]  COND FALSE  !(__exception)
[L1186]  CALL        call mint~address~uint256_YFLink__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3219]  COND FALSE  !(!minters_YFLink[this][msgsender_MSG])
[L3223]  COND TRUE   DType[this] == YFLink
[L3224]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L2791]              __var_16 := null;
[L2792]  COND FALSE  !(!(account_s366 != null))
[L2796]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2796]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2797]  COND FALSE  !(revert)
[L2800]              _totalSupply_ERC20[this] := __var_17;
[L2801]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2801]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2802]  COND FALSE  !(revert)
[L2805]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2806]              _balances_ERC20[this][account_s366] := __var_18;
[L2807]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2808]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3224]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3225]  COND FALSE  !(revert)
[L1186]  RET         call mint~address~uint256_YFLink__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1187]              assume !revert && gas >= 0;
[L4835]  RET         call mint~address~uint256_YFLink(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:26,514 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:26,514 INFO  L82        PathProgramCache]: Analyzing trace with hash -1114711163, now seen corresponding path program 1 times
[2020-11-25 09:34:26,515 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:26,526 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:26,678 INFO  L134       CoverageAnalysis]: Checked inductivity of 103 backedges. 1 proven. 57 refuted. 0 times theorem prover too weak. 45 trivial. 0 not checked.
[2020-11-25 09:34:26,678 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:34:26,678 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 09:34:26,679 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:26,679 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 09:34:26,679 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=18, Invalid=72, Unknown=0, NotChecked=0, Total=90
[2020-11-25 09:34:26,679 INFO  L87              Difference]: Start difference. First operand 2452 states and 2764 transitions. cyclomatic complexity: 315 Second operand 10 states.
[2020-11-25 09:34:27,411 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:27,411 INFO  L93              Difference]: Finished difference Result 2481 states and 2806 transitions.
[2020-11-25 09:34:27,411 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 09:34:27,411 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2481 states and 2806 transitions.
[2020-11-25 09:34:27,416 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:27,422 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2481 states to 2481 states and 2806 transitions.
[2020-11-25 09:34:27,422 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 591
[2020-11-25 09:34:27,422 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 591
[2020-11-25 09:34:27,422 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2481 states and 2806 transitions.
[2020-11-25 09:34:27,423 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:27,424 INFO  L728         BuchiCegarLoop]: Abstraction has 2481 states and 2806 transitions.
[2020-11-25 09:34:27,425 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2481 states and 2806 transitions.
[2020-11-25 09:34:27,438 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2481 to 2481.
[2020-11-25 09:34:27,438 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2481 states.
[2020-11-25 09:34:27,441 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2481 states to 2481 states and 2806 transitions.
[2020-11-25 09:34:27,441 INFO  L751         BuchiCegarLoop]: Abstraction has 2481 states and 2806 transitions.
[2020-11-25 09:34:27,441 INFO  L631         BuchiCegarLoop]: Abstraction has 2481 states and 2806 transitions.
[2020-11-25 09:34:27,441 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:34:27,441 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2481 states and 2806 transitions.
[2020-11-25 09:34:27,443 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:27,443 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:27,443 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:27,444 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:27,444 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND FALSE  !(DType[this] == YFLink)
[L2269]  COND TRUE   DType[this] == ERC20
[L2270]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2270]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2271]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:27,448 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:27,448 INFO  L82        PathProgramCache]: Analyzing trace with hash 1975448173, now seen corresponding path program 1 times
[2020-11-25 09:34:27,448 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:27,457 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:27,502 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 106 trivial. 0 not checked.
[2020-11-25 09:34:27,502 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:27,502 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:34:27,503 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:27,503 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:34:27,503 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:34:27,503 INFO  L87              Difference]: Start difference. First operand 2481 states and 2806 transitions. cyclomatic complexity: 331 Second operand 3 states.
[2020-11-25 09:34:27,520 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:27,520 INFO  L93              Difference]: Finished difference Result 2489 states and 2816 transitions.
[2020-11-25 09:34:27,520 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:34:27,520 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2489 states and 2816 transitions.
[2020-11-25 09:34:27,524 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:27,529 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2489 states to 2489 states and 2816 transitions.
[2020-11-25 09:34:27,529 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 594
[2020-11-25 09:34:27,529 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 594
[2020-11-25 09:34:27,529 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2489 states and 2816 transitions.
[2020-11-25 09:34:27,530 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:27,530 INFO  L728         BuchiCegarLoop]: Abstraction has 2489 states and 2816 transitions.
[2020-11-25 09:34:27,532 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2489 states and 2816 transitions.
[2020-11-25 09:34:27,544 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2489 to 2483.
[2020-11-25 09:34:27,545 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2483 states.
[2020-11-25 09:34:27,547 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2483 states to 2483 states and 2808 transitions.
[2020-11-25 09:34:27,547 INFO  L751         BuchiCegarLoop]: Abstraction has 2483 states and 2808 transitions.
[2020-11-25 09:34:27,547 INFO  L631         BuchiCegarLoop]: Abstraction has 2483 states and 2808 transitions.
[2020-11-25 09:34:27,547 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:34:27,547 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2483 states and 2808 transitions.
[2020-11-25 09:34:27,549 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:27,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:27,549 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:27,550 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:27,550 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND FALSE  !(DType[this] == YFLink)
[L2256]  COND TRUE   DType[this] == ERC20
[L2257]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2257]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2258]  COND FALSE  !(revert)
[L2264]  COND FALSE  !(DType[this] == YFLink)
[L2269]  COND TRUE   DType[this] == ERC20
[L2270]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2270]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2271]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND TRUE   choice == 17
[L4748]              gas := gas - 21000;
[L4749]  COND FALSE  !(gas >= 0)
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:27,553 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:27,553 INFO  L82        PathProgramCache]: Analyzing trace with hash -1568089181, now seen corresponding path program 1 times
[2020-11-25 09:34:27,554 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:27,564 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:27,635 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 106 trivial. 0 not checked.
[2020-11-25 09:34:27,635 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:27,635 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 09:34:27,636 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:27,636 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 09:34:27,636 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 09:34:27,636 INFO  L87              Difference]: Start difference. First operand 2483 states and 2808 transitions. cyclomatic complexity: 331 Second operand 6 states.
[2020-11-25 09:34:27,678 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:27,678 INFO  L93              Difference]: Finished difference Result 2535 states and 2859 transitions.
[2020-11-25 09:34:27,678 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 09:34:27,679 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2535 states and 2859 transitions.
[2020-11-25 09:34:27,683 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:27,687 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2535 states to 2461 states and 2778 transitions.
[2020-11-25 09:34:27,687 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 589
[2020-11-25 09:34:27,688 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 589
[2020-11-25 09:34:27,688 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2461 states and 2778 transitions.
[2020-11-25 09:34:27,689 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:27,689 INFO  L728         BuchiCegarLoop]: Abstraction has 2461 states and 2778 transitions.
[2020-11-25 09:34:27,691 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2461 states and 2778 transitions.
[2020-11-25 09:34:27,702 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2461 to 2461.
[2020-11-25 09:34:27,702 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2461 states.
[2020-11-25 09:34:27,705 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2461 states to 2461 states and 2778 transitions.
[2020-11-25 09:34:27,705 INFO  L751         BuchiCegarLoop]: Abstraction has 2461 states and 2778 transitions.
[2020-11-25 09:34:27,705 INFO  L631         BuchiCegarLoop]: Abstraction has 2461 states and 2778 transitions.
[2020-11-25 09:34:27,705 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 09:34:27,705 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2461 states and 2778 transitions.
[2020-11-25 09:34:27,707 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:27,707 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:27,707 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:27,708 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:27,708 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND TRUE   choice == 17
[L4748]              gas := gas - 21000;
[L4749]  COND FALSE  !(gas >= 0)
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:27,711 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:27,711 INFO  L82        PathProgramCache]: Analyzing trace with hash 1723041330, now seen corresponding path program 1 times
[2020-11-25 09:34:27,711 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:27,733 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:28,034 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 1 proven. 66 refuted. 0 times theorem prover too weak. 40 trivial. 0 not checked.
[2020-11-25 09:34:28,034 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:34:28,034 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-11-25 09:34:28,034 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:28,034 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 09:34:28,035 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=67, Invalid=689, Unknown=0, NotChecked=0, Total=756
[2020-11-25 09:34:28,035 INFO  L87              Difference]: Start difference. First operand 2461 states and 2778 transitions. cyclomatic complexity: 323 Second operand 28 states.
[2020-11-25 09:34:30,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:30,783 INFO  L93              Difference]: Finished difference Result 2491 states and 2820 transitions.
[2020-11-25 09:34:30,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 09:34:30,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2491 states and 2820 transitions.
[2020-11-25 09:34:30,788 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:30,793 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2491 states to 2491 states and 2820 transitions.
[2020-11-25 09:34:30,793 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 606
[2020-11-25 09:34:30,793 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 606
[2020-11-25 09:34:30,793 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2491 states and 2820 transitions.
[2020-11-25 09:34:30,795 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:30,795 INFO  L728         BuchiCegarLoop]: Abstraction has 2491 states and 2820 transitions.
[2020-11-25 09:34:30,797 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2491 states and 2820 transitions.
[2020-11-25 09:34:30,808 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2491 to 2455.
[2020-11-25 09:34:30,808 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2455 states.
[2020-11-25 09:34:30,812 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2455 states to 2455 states and 2770 transitions.
[2020-11-25 09:34:30,812 INFO  L751         BuchiCegarLoop]: Abstraction has 2455 states and 2770 transitions.
[2020-11-25 09:34:30,812 INFO  L631         BuchiCegarLoop]: Abstraction has 2455 states and 2770 transitions.
[2020-11-25 09:34:30,812 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 09:34:30,812 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2455 states and 2770 transitions.
[2020-11-25 09:34:30,816 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:30,816 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:30,816 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:30,817 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:30,817 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND TRUE   choice == 17
[L4748]              gas := gas - 21000;
[L4749]  COND FALSE  !(gas >= 0)
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:30,821 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:30,821 INFO  L82        PathProgramCache]: Analyzing trace with hash 259582382, now seen corresponding path program 1 times
[2020-11-25 09:34:30,822 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:30,837 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:31,183 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 103 trivial. 0 not checked.
[2020-11-25 09:34:31,183 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:31,183 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [28] imperfect sequences [] total 28
[2020-11-25 09:34:31,184 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:31,184 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 09:34:31,184 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=75, Invalid=737, Unknown=0, NotChecked=0, Total=812
[2020-11-25 09:34:31,184 INFO  L87              Difference]: Start difference. First operand 2455 states and 2770 transitions. cyclomatic complexity: 321 Second operand 29 states.
[2020-11-25 09:34:34,507 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:34,507 INFO  L93              Difference]: Finished difference Result 2495 states and 2846 transitions.
[2020-11-25 09:34:34,507 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 09:34:34,508 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2495 states and 2846 transitions.
[2020-11-25 09:34:34,512 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:34:34,517 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2495 states to 2495 states and 2846 transitions.
[2020-11-25 09:34:34,517 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 606
[2020-11-25 09:34:34,518 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 606
[2020-11-25 09:34:34,518 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2495 states and 2846 transitions.
[2020-11-25 09:34:34,519 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:34,519 INFO  L728         BuchiCegarLoop]: Abstraction has 2495 states and 2846 transitions.
[2020-11-25 09:34:34,521 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2495 states and 2846 transitions.
[2020-11-25 09:34:34,532 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2495 to 2495.
[2020-11-25 09:34:34,532 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2495 states.
[2020-11-25 09:34:34,535 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2495 states to 2495 states and 2846 transitions.
[2020-11-25 09:34:34,535 INFO  L751         BuchiCegarLoop]: Abstraction has 2495 states and 2846 transitions.
[2020-11-25 09:34:34,535 INFO  L631         BuchiCegarLoop]: Abstraction has 2495 states and 2846 transitions.
[2020-11-25 09:34:34,535 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 09:34:34,535 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2495 states and 2846 transitions.
[2020-11-25 09:34:34,537 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:34:34,537 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:34,537 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:34,538 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:34,539 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume (((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND FALSE  !(!(recipient_s323 != null))
[L2713]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3046]  COND FALSE  !(!(b_s561 <= a_s561))
[L3050]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3051]              __ret_0_ := c_s561;
[L2713]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2714]  COND FALSE  !(revert)
[L2717]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2718]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2719]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2720]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3022]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3023]  COND TRUE   !(c_s534 >= a_s534)
[L3024]              revert := true;
[L2720]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2721]  COND TRUE   revert
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND FALSE  !(!(recipient_s323 != null))
[L2713]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3046]  COND FALSE  !(!(b_s561 <= a_s561))
[L3050]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3051]              __ret_0_ := c_s561;
[L2713]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2714]  COND FALSE  !(revert)
[L2717]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2718]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2719]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2720]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3022]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3023]  COND TRUE   !(c_s534 >= a_s534)
[L3024]              revert := true;
[L2720]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2721]  COND TRUE   revert
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:34,542 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:34,542 INFO  L82        PathProgramCache]: Analyzing trace with hash -821456504, now seen corresponding path program 1 times
[2020-11-25 09:34:34,543 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:34,554 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:34,711 INFO  L134       CoverageAnalysis]: Checked inductivity of 107 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 103 trivial. 0 not checked.
[2020-11-25 09:34:34,711 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:34,711 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [25] imperfect sequences [] total 25
[2020-11-25 09:34:34,712 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:34,712 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 09:34:34,712 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=592, Unknown=0, NotChecked=0, Total=650
[2020-11-25 09:34:34,712 INFO  L87              Difference]: Start difference. First operand 2495 states and 2846 transitions. cyclomatic complexity: 361 Second operand 26 states.
[2020-11-25 09:34:37,153 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:37,154 INFO  L93              Difference]: Finished difference Result 2547 states and 2949 transitions.
[2020-11-25 09:34:37,154 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 09:34:37,154 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2547 states and 2949 transitions.
[2020-11-25 09:34:37,159 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:34:37,164 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2547 states to 2547 states and 2949 transitions.
[2020-11-25 09:34:37,164 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 626
[2020-11-25 09:34:37,164 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 626
[2020-11-25 09:34:37,165 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2547 states and 2949 transitions.
[2020-11-25 09:34:37,166 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:37,166 INFO  L728         BuchiCegarLoop]: Abstraction has 2547 states and 2949 transitions.
[2020-11-25 09:34:37,168 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2547 states and 2949 transitions.
[2020-11-25 09:34:37,179 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2547 to 2473.
[2020-11-25 09:34:37,179 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2473 states.
[2020-11-25 09:34:37,182 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2473 states to 2473 states and 2805 transitions.
[2020-11-25 09:34:37,182 INFO  L751         BuchiCegarLoop]: Abstraction has 2473 states and 2805 transitions.
[2020-11-25 09:34:37,182 INFO  L631         BuchiCegarLoop]: Abstraction has 2473 states and 2805 transitions.
[2020-11-25 09:34:37,182 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 09:34:37,182 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2473 states and 2805 transitions.
[2020-11-25 09:34:37,184 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:37,185 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:37,185 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:37,185 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:37,186 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND FALSE  !(choice == 15)
[L4766]  COND FALSE  !(choice == 14)
[L4772]  COND FALSE  !(choice == 13)
[L4779]  COND TRUE   choice == 12
[L4780]              gas := gas - 21000;
[L4781]  COND TRUE   gas >= 0
[L4782]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4783]              assume msgvalue_MSG == 0;
[L4784]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFLink
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND FALSE  !(DType[this] == YFLink)
[L2447]  COND TRUE   DType[this] == ERC20
[L2448]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2448]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2449]  COND FALSE  !(revert)
[L2455]  COND FALSE  !(DType[this] == YFLink)
[L2460]  COND TRUE   DType[this] == ERC20
[L2461]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2461]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2462]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1237023343);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1237023343);
[L2469]  COND FALSE  !(revert)
[L2472]  COND FALSE  !(DType[this] == YFLink)
[L2477]  COND TRUE   DType[this] == ERC20
[L2478]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2478]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2479]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4784]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND TRUE   choice == 17
[L4748]              gas := gas - 21000;
[L4749]  COND FALSE  !(gas >= 0)
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:37,189 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:37,189 INFO  L82        PathProgramCache]: Analyzing trace with hash -1815101256, now seen corresponding path program 1 times
[2020-11-25 09:34:37,189 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:37,200 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:37,251 INFO  L134       CoverageAnalysis]: Checked inductivity of 106 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 105 trivial. 0 not checked.
[2020-11-25 09:34:37,251 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:37,251 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:34:37,251 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:37,251 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:34:37,251 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:34:37,251 INFO  L87              Difference]: Start difference. First operand 2473 states and 2805 transitions. cyclomatic complexity: 340 Second operand 3 states.
[2020-11-25 09:34:37,268 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:37,268 INFO  L93              Difference]: Finished difference Result 2491 states and 2825 transitions.
[2020-11-25 09:34:37,268 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:34:37,268 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2491 states and 2825 transitions.
[2020-11-25 09:34:37,272 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:37,277 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2491 states to 2491 states and 2825 transitions.
[2020-11-25 09:34:37,277 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 595
[2020-11-25 09:34:37,277 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 595
[2020-11-25 09:34:37,277 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2491 states and 2825 transitions.
[2020-11-25 09:34:37,279 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:37,279 INFO  L728         BuchiCegarLoop]: Abstraction has 2491 states and 2825 transitions.
[2020-11-25 09:34:37,280 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2491 states and 2825 transitions.
[2020-11-25 09:34:37,290 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2491 to 2485.
[2020-11-25 09:34:37,290 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2485 states.
[2020-11-25 09:34:37,293 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2485 states to 2485 states and 2819 transitions.
[2020-11-25 09:34:37,293 INFO  L751         BuchiCegarLoop]: Abstraction has 2485 states and 2819 transitions.
[2020-11-25 09:34:37,293 INFO  L631         BuchiCegarLoop]: Abstraction has 2485 states and 2819 transitions.
[2020-11-25 09:34:37,293 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 09:34:37,293 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2485 states and 2819 transitions.
[2020-11-25 09:34:37,295 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:37,295 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:37,295 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:37,296 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:37,296 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND FALSE  !(choice == 15)
[L4766]  COND FALSE  !(choice == 14)
[L4772]  COND FALSE  !(choice == 13)
[L4779]  COND TRUE   choice == 12
[L4780]              gas := gas - 21000;
[L4781]  COND TRUE   gas >= 0
[L4782]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4783]              assume msgvalue_MSG == 0;
[L4784]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFLink
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFLink
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFLink
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1237023343);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1237023343);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFLink
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4784]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:37,300 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:37,300 INFO  L82        PathProgramCache]: Analyzing trace with hash -373663950, now seen corresponding path program 1 times
[2020-11-25 09:34:37,300 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:37,327 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:38,043 INFO  L134       CoverageAnalysis]: Checked inductivity of 106 backedges. 0 proven. 62 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-11-25 09:34:38,044 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:34:38,044 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [47] total 47
[2020-11-25 09:34:38,044 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:38,045 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 48 interpolants.
[2020-11-25 09:34:38,045 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=179, Invalid=2077, Unknown=0, NotChecked=0, Total=2256
[2020-11-25 09:34:38,045 INFO  L87              Difference]: Start difference. First operand 2485 states and 2819 transitions. cyclomatic complexity: 342 Second operand 48 states.
[2020-11-25 09:34:42,828 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:42,828 INFO  L93              Difference]: Finished difference Result 2555 states and 3010 transitions.
[2020-11-25 09:34:42,829 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 09:34:42,830 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2555 states and 3010 transitions.
[2020-11-25 09:34:42,844 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 09:34:42,854 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2555 states to 2555 states and 3010 transitions.
[2020-11-25 09:34:42,854 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 628
[2020-11-25 09:34:42,854 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 628
[2020-11-25 09:34:42,854 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2555 states and 3010 transitions.
[2020-11-25 09:34:42,857 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:42,857 INFO  L728         BuchiCegarLoop]: Abstraction has 2555 states and 3010 transitions.
[2020-11-25 09:34:42,859 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2555 states and 3010 transitions.
[2020-11-25 09:34:42,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2555 to 2526.
[2020-11-25 09:34:42,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2526 states.
[2020-11-25 09:34:42,882 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2526 states to 2526 states and 2908 transitions.
[2020-11-25 09:34:42,882 INFO  L751         BuchiCegarLoop]: Abstraction has 2526 states and 2908 transitions.
[2020-11-25 09:34:42,882 INFO  L631         BuchiCegarLoop]: Abstraction has 2526 states and 2908 transitions.
[2020-11-25 09:34:42,882 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 09:34:42,882 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2526 states and 2908 transitions.
[2020-11-25 09:34:42,886 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:34:42,886 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:42,886 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:42,888 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:42,888 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND FALSE  !(choice == 15)
[L4766]  COND FALSE  !(choice == 14)
[L4772]  COND FALSE  !(choice == 13)
[L4779]  COND TRUE   choice == 12
[L4780]              gas := gas - 21000;
[L4781]  COND TRUE   gas >= 0
[L4782]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4783]              assume msgvalue_MSG == 0;
[L4784]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFLink
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFLink
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFLink
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1237023343);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1237023343);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFLink
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4784]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND TRUE   __exception
[L395]               __tmp__Balance := Balance;
[L396]               __tmp__DType := DType;
[L397]               __tmp__Alloc := Alloc;
[L398]               __tmp__balance_ADDR := balance_ADDR;
[L399]               __tmp__M_Ref_int := M_Ref_int;
[L400]               __tmp__sum__balances0 := sum__balances0;
[L401]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L402]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L403]               __tmp__sum__allowances1 := sum__allowances1;
[L404]               __tmp__M_Ref_bool := M_Ref_bool;
[L405]               __tmp__sum_minters2 := sum_minters2;
[L406]               __tmp__Length := Length;
[L407]               __tmp__now := now;
[L408]               __tmp___balances_ERC20 := _balances_ERC20;
[L409]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L410]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L411]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L412]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L413]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L414]               __tmp__governance_YFLink := governance_YFLink;
[L415]               __tmp__minters_YFLink := minters_YFLink;
[L416]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2218]  COND TRUE   __tmp__DType[this] == YFLink
[L2219]  CALL        call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2123]              __ret_0_ := msgsender_MSG;
[L2219]  RET         call __var_1 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2220]  COND FALSE  !(revert)
[L2231]  COND TRUE   __tmp__DType[this] == YFLink
[L2232]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2703]              __var_12 := null;
[L2704]  COND FALSE  !(!(sender_s323 != null))
[L2708]              __var_13 := null;
[L2709]  COND FALSE  !(!(recipient_s323 != null))
[L2713]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3046]  COND FALSE  !(!(b_s561 <= a_s561))
[L3050]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3051]              __ret_0_ := c_s561;
[L2713]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2714]  COND FALSE  !(revert)
[L2717]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s323];
[L2718]              __tmp___balances_ERC20[this][sender_s323] := __var_14;
[L2719]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s323];
[L2720]  CALL        call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L3022]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3023]  COND TRUE   !(c_s534 >= a_s534)
[L3024]              revert := true;
[L2720]  RET         call __var_15 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s323], amount_s323);
[L2721]  COND TRUE   revert
[L2232]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2233]  COND TRUE   revert
[L416]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L417]               assume revert || gas < 0;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND TRUE   choice == 17
[L4748]              gas := gas - 21000;
[L4749]  COND FALSE  !(gas >= 0)
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:42,892 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:42,892 INFO  L82        PathProgramCache]: Analyzing trace with hash 354343180, now seen corresponding path program 1 times
[2020-11-25 09:34:42,893 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:42,912 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:43,129 INFO  L134       CoverageAnalysis]: Checked inductivity of 106 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 106 trivial. 0 not checked.
[2020-11-25 09:34:43,129 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:34:43,129 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 09:34:43,130 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:43,130 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 09:34:43,130 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=207, Unknown=0, NotChecked=0, Total=240
[2020-11-25 09:34:43,130 INFO  L87              Difference]: Start difference. First operand 2526 states and 2908 transitions. cyclomatic complexity: 396 Second operand 16 states.
[2020-11-25 09:34:44,906 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:44,906 INFO  L93              Difference]: Finished difference Result 2563 states and 3021 transitions.
[2020-11-25 09:34:44,906 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 09:34:44,906 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2563 states and 3021 transitions.
[2020-11-25 09:34:44,912 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:34:44,919 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2563 states to 2519 states and 2975 transitions.
[2020-11-25 09:34:44,919 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 622
[2020-11-25 09:34:44,919 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 622
[2020-11-25 09:34:44,919 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2519 states and 2975 transitions.
[2020-11-25 09:34:44,921 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:44,921 INFO  L728         BuchiCegarLoop]: Abstraction has 2519 states and 2975 transitions.
[2020-11-25 09:34:44,922 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2519 states and 2975 transitions.
[2020-11-25 09:34:44,933 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2519 to 2440.
[2020-11-25 09:34:44,933 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2440 states.
[2020-11-25 09:34:44,936 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2440 states to 2440 states and 2793 transitions.
[2020-11-25 09:34:44,936 INFO  L751         BuchiCegarLoop]: Abstraction has 2440 states and 2793 transitions.
[2020-11-25 09:34:44,936 INFO  L631         BuchiCegarLoop]: Abstraction has 2440 states and 2793 transitions.
[2020-11-25 09:34:44,936 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 09:34:44,936 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2440 states and 2793 transitions.
[2020-11-25 09:34:44,939 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:44,939 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:44,939 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:44,940 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:44,940 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND FALSE  !(choice == 15)
[L4766]  COND FALSE  !(choice == 14)
[L4772]  COND TRUE   choice == 13
[L4773]              gas := gas - 21000;
[L4774]  COND TRUE   gas >= 0
[L4775]              assume amount_s175 >= 0 && amount_s175 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4776]              assume msgvalue_MSG == 0;
[L4777]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L510]               havoc __exception;
[L511]               revert := false;
[L512]   COND FALSE  !(__exception)
[L537]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L2329]  COND TRUE   DType[this] == YFLink
[L2330]  CALL        call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2330]  RET         call __var_2 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2331]  COND FALSE  !(revert)
[L2342]  COND TRUE   DType[this] == YFLink
[L2343]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2343]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_2, spender_s175, amount_s175);
[L2344]  COND FALSE  !(revert)
[L2355]              __ret_0_ := true;
[L537]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L538]               assume !revert && gas >= 0;
[L4777]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s175, amount_s175);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND FALSE  !(choice == 15)
[L4766]  COND FALSE  !(choice == 14)
[L4772]  COND FALSE  !(choice == 13)
[L4779]  COND TRUE   choice == 12
[L4780]              gas := gas - 21000;
[L4781]  COND TRUE   gas >= 0
[L4782]              assume amount_s211 >= 0 && amount_s211 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4783]              assume msgvalue_MSG == 0;
[L4784]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L572]               havoc __exception;
[L573]               revert := false;
[L574]   COND FALSE  !(__exception)
[L599]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2429]  COND TRUE   DType[this] == YFLink
[L2430]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2430]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L2431]  COND FALSE  !(revert)
[L2442]  COND TRUE   DType[this] == YFLink
[L2443]  CALL        call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2443]  RET         call __var_3 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2444]  COND FALSE  !(revert)
[L2455]  COND TRUE   DType[this] == YFLink
[L2456]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2456]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2457]  COND FALSE  !(revert)
[L2468]  CALL        call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1237023343);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2468]  RET         call __var_4 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s211][__var_5], amount_s211, -1237023343);
[L2469]  COND FALSE  !(revert)
[L2472]  COND TRUE   DType[this] == YFLink
[L2473]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2883]              __var_22 := null;
[L2884]  COND FALSE  !(!(owner_s453 != null))
[L2888]              __var_23 := null;
[L2889]  COND FALSE  !(!(spender_s453 != null))
[L2893]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] - _allowances_ERC20[this][owner_s453][spender_s453];
[L2894]              _allowances_ERC20[this][owner_s453][spender_s453] := amount_s453;
[L2895]              sum__allowances1[owner_s453] := sum__allowances1[owner_s453] + _allowances_ERC20[this][owner_s453][spender_s453];
[L2896]              assert { :EventEmitted "Approval_ERC20" } true;
[L2473]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, __var_3, __var_4);
[L2474]  COND FALSE  !(revert)
[L2485]              __ret_0_ := true;
[L599]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L600]               assume !revert && gas >= 0;
[L4784]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s211, recipient_s211, amount_s211);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND TRUE   choice == 17
[L4748]              gas := gas - 21000;
[L4749]  COND FALSE  !(gas >= 0)
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:44,943 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:44,943 INFO  L82        PathProgramCache]: Analyzing trace with hash 1215627265, now seen corresponding path program 1 times
[2020-11-25 09:34:44,944 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:44,972 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:45,501 INFO  L134       CoverageAnalysis]: Checked inductivity of 243 backedges. 0 proven. 6 refuted. 0 times theorem prover too weak. 237 trivial. 0 not checked.
[2020-11-25 09:34:45,501 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:34:45,501 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 09:34:45,502 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:45,502 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 09:34:45,502 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=129, Invalid=1277, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 09:34:45,502 INFO  L87              Difference]: Start difference. First operand 2440 states and 2793 transitions. cyclomatic complexity: 365 Second operand 38 states.
[2020-11-25 09:34:49,825 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:49,825 INFO  L93              Difference]: Finished difference Result 2458 states and 2838 transitions.
[2020-11-25 09:34:49,825 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 09:34:49,825 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2458 states and 2838 transitions.
[2020-11-25 09:34:49,830 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:49,835 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2458 states to 2458 states and 2838 transitions.
[2020-11-25 09:34:49,836 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 594
[2020-11-25 09:34:49,836 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 594
[2020-11-25 09:34:49,836 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2458 states and 2838 transitions.
[2020-11-25 09:34:49,837 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:49,837 INFO  L728         BuchiCegarLoop]: Abstraction has 2458 states and 2838 transitions.
[2020-11-25 09:34:49,839 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2458 states and 2838 transitions.
[2020-11-25 09:34:49,849 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2458 to 2419.
[2020-11-25 09:34:49,849 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2419 states.
[2020-11-25 09:34:49,851 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2419 states to 2419 states and 2738 transitions.
[2020-11-25 09:34:49,851 INFO  L751         BuchiCegarLoop]: Abstraction has 2419 states and 2738 transitions.
[2020-11-25 09:34:49,851 INFO  L631         BuchiCegarLoop]: Abstraction has 2419 states and 2738 transitions.
[2020-11-25 09:34:49,852 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 09:34:49,852 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2419 states and 2738 transitions.
[2020-11-25 09:34:49,854 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:34:49,854 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:34:49,854 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:34:49,855 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:34:49,855 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4863]              assume null == 0;
[L4864]  CALL        call this := FreshRefGenerator__success();
[L2051]              havoc newRef;
[L2052]              assume Alloc[newRef] == false;
[L2053]              Alloc[newRef] := true;
[L2054]              assume newRef != null;
[L4864]  RET         call this := FreshRefGenerator__success();
[L4865]              assume now >= 0;
[L4866]              assume DType[this] == YFLink;
[L4867]              assume msgvalue_MSG == 0;
[L4868]              gas := gas - 53000;
[L4869]  CALL        call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L1098]              havoc __exception;
[L1099]              revert := false;
[L1100]  COND FALSE  !(__exception)
[L1125]  CALL        call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L3179]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L3179]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3180]  COND FALSE  !(revert)
[L3183]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L3183]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3184]  COND FALSE  !(revert)
[L3187]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2177]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2100]              assume msgsender_MSG != null;
[L2101]              Balance[this] := 0;
[L2115]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]  COND FALSE  !(revert)
[L2177]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2178]  COND FALSE  !(revert)
[L2181]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2181]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2182]  COND FALSE  !(revert)
[L2185]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2149]              assume msgsender_MSG != null;
[L2150]              Balance[this] := 0;
[L2151]              _balances_ERC20[this] := zeroRefintArr();
[L2152]              sum__balances0[this] := 0;
[L2153]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2154]              sum__allowances1[this] := 0;
[L2155]              _totalSupply_ERC20[this] := 0;
[L2185]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2186]  COND FALSE  !(revert)
[L3187]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3188]  COND FALSE  !(revert)
[L3191]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L2941]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2083]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2068]              assume msgsender_MSG != null;
[L2069]              Balance[this] := 0;
[L2083]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2084]  COND FALSE  !(revert)
[L2941]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2942]  COND FALSE  !(revert)
[L2945]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2916]              assume msgsender_MSG != null;
[L2917]              Balance[this] := 0;
[L2918]              _name_ERC20Detailed[this] := -1446634570;
[L2919]              _symbol_ERC20Detailed[this] := -1446634570;
[L2920]              _decimals_ERC20Detailed[this] := 0;
[L2922]              _name_ERC20Detailed[this] := name_s484;
[L2923]              _symbol_ERC20Detailed[this] := symbol_s484;
[L2924]              _decimals_ERC20Detailed[this] := decimals_s484;
[L2945]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s484, symbol_s484, decimals_s484);
[L2946]  COND FALSE  !(revert)
[L3191]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 225975011, 987048806, 18);
[L3192]  COND FALSE  !(revert)
[L3195]  CALL        call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3141]              assume msgsender_MSG != null;
[L3142]              Balance[this] := 0;
[L3143]              governance_YFLink[this] := null;
[L3144]              minters_YFLink[this] := zeroRefboolArr();
[L3147]              havoc __var_24;
[L3148]              governance_YFLink[this] := __var_24;
[L3195]  RET         call YFLink_YFLink_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3196]  COND FALSE  !(revert)
[L1125]  RET         call YFLink_YFLink__success(this, msgsender_MSG, msgvalue_MSG);
[L1126]              assume !revert && gas >= 0;
[L4869]  RET         call YFLink_YFLink(this, msgsender_MSG, msgvalue_MSG);
[L4870]              assume !revert && gas >= 0;
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND FALSE  !(choice == 15)
[L4766]  COND FALSE  !(choice == 14)
[L4772]  COND FALSE  !(choice == 13)
[L4779]  COND FALSE  !(choice == 12)
[L4786]  COND FALSE  !(choice == 11)
[L4793]  COND FALSE  !(choice == 10)
[L4800]  COND FALSE  !(choice == 9)
[L4806]  COND FALSE  !(choice == 8)
[L4812]  COND FALSE  !(choice == 7)
[L4818]  COND FALSE  !(choice == 6)
[L4824]  COND FALSE  !(choice == 5)
[L4830]  COND FALSE  !(choice == 4)
[L4837]  COND FALSE  !(choice == 3)
[L4843]  COND TRUE   choice == 2
[L4844]              gas := gas - 21000;
[L4845]  COND TRUE   gas >= 0
[L4846]              assume msgvalue_MSG == 0;
[L4847]  CALL        call addMinter~address_YFLink(this, msgsender_MSG, msgvalue_MSG, _minter_s709);
[L1277]              havoc __exception;
[L1278]              revert := false;
[L1279]  COND FALSE  !(__exception)
[L1304]  CALL        call addMinter~address_YFLink__success(this, msgsender_MSG, msgvalue_MSG, _minter_s709);
[L3262]  COND FALSE  !(!(msgsender_MSG == governance_YFLink[this]))
[L3266]              minters_YFLink[this][_minter_s709] := true;
[L1304]  RET         call addMinter~address_YFLink__success(this, msgsender_MSG, msgvalue_MSG, _minter_s709);
[L1305]              assume !revert && gas >= 0;
[L4847]  RET         call addMinter~address_YFLink(this, msgsender_MSG, msgvalue_MSG, _minter_s709);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND FALSE  !(choice == 15)
[L4766]  COND FALSE  !(choice == 14)
[L4772]  COND FALSE  !(choice == 13)
[L4779]  COND FALSE  !(choice == 12)
[L4786]  COND FALSE  !(choice == 11)
[L4793]  COND FALSE  !(choice == 10)
[L4800]  COND FALSE  !(choice == 9)
[L4806]  COND FALSE  !(choice == 8)
[L4812]  COND FALSE  !(choice == 7)
[L4818]  COND FALSE  !(choice == 6)
[L4824]  COND FALSE  !(choice == 5)
[L4830]  COND TRUE   choice == 4
[L4831]              gas := gas - 21000;
[L4832]  COND TRUE   gas >= 0
[L4833]              assume amount_s671 >= 0 && amount_s671 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4834]              assume msgvalue_MSG == 0;
[L4835]  CALL        call mint~address~uint256_YFLink(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1159]              havoc __exception;
[L1160]              revert := false;
[L1161]  COND FALSE  !(__exception)
[L1186]  CALL        call mint~address~uint256_YFLink__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3219]  COND FALSE  !(!minters_YFLink[this][msgsender_MSG])
[L3223]  COND TRUE   DType[this] == YFLink
[L3224]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L2791]              __var_16 := null;
[L2792]  COND FALSE  !(!(account_s366 != null))
[L2796]  CALL        call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2796]  RET         call __var_17 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s366);
[L2797]  COND FALSE  !(revert)
[L2800]              _totalSupply_ERC20[this] := __var_17;
[L2801]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2801]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s366], amount_s366);
[L2802]  COND FALSE  !(revert)
[L2805]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s366];
[L2806]              _balances_ERC20[this][account_s366] := __var_18;
[L2807]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s366];
[L2808]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3224]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L3225]  COND FALSE  !(revert)
[L1186]  RET         call mint~address~uint256_YFLink__success(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L1187]              assume !revert && gas >= 0;
[L4835]  RET         call mint~address~uint256_YFLink(this, msgsender_MSG, msgvalue_MSG, account_s671, amount_s671);
[L4873]  RET         call CorralChoice_YFLink(this);
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND FALSE  !(choice == 17)
[L4753]  COND FALSE  !(choice == 16)
[L4759]  COND TRUE   choice == 15
[L4760]              gas := gas - 21000;
[L4761]  COND TRUE   gas >= 0
[L4762]              assume amount_s140 >= 0 && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4763]              assume msgvalue_MSG == 0;
[L4764]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s140 && amount_s140 <= _balances_ERC20[this][msgsender_MSG]) && amount_s140 >= 0) && amount_s140 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s140] >= 0) && _balances_ERC20[this][recipient_s140] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L392]               havoc __exception;
[L393]               revert := false;
[L394]   COND FALSE  !(__exception)
[L419]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L2251]  COND TRUE   DType[this] == YFLink
[L2252]  CALL        call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2129]              __ret_0_ := msgsender_MSG;
[L2252]  RET         call __var_1 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2253]  COND FALSE  !(revert)
[L2264]  COND TRUE   DType[this] == YFLink
[L2265]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2735]              __var_12 := null;
[L2736]  COND FALSE  !(!(sender_s323 != null))
[L2740]              __var_13 := null;
[L2741]  COND FALSE  !(!(recipient_s323 != null))
[L2745]  CALL        call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L3058]  COND FALSE  !(!(b_s561 <= a_s561))
[L3062]              c_s561 := (a_s561 - b_s561) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3063]              __ret_0_ := c_s561;
[L2745]  RET         call __var_14 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s323], amount_s323, 522045575);
[L2746]  COND FALSE  !(revert)
[L2749]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s323];
[L2750]              _balances_ERC20[this][sender_s323] := __var_14;
[L2751]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s323];
[L2752]  CALL        call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L3034]              c_s534 := (a_s534 + b_s534) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3035]  COND FALSE  !(!(c_s534 >= a_s534))
[L3039]              __ret_0_ := c_s534;
[L2752]  RET         call __var_15 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s323], amount_s323);
[L2753]  COND FALSE  !(revert)
[L2756]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s323];
[L2757]              _balances_ERC20[this][recipient_s323] := __var_15;
[L2758]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s323];
[L2759]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2265]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_1, recipient_s140, amount_s140);
[L2266]  COND FALSE  !(revert)
[L2277]              __ret_0_ := true;
[L419]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L420]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !((((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && governance_YFLink[this] == old(governance_YFLink[this])) && minters_YFLink[this] == old(minters_YFLink[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                 revert := revert_hold;
[L4764]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s140, amount_s140);
[L4873]  RET         call CorralChoice_YFLink(this);

Loop:
[L4873]  CALL        call CorralChoice_YFLink(this);
[L4694]              havoc msgsender_MSG;
[L4695]              havoc msgvalue_MSG;
[L4696]              havoc choice;
[L4697]              havoc __ret_0_totalSupply;
[L4698]              havoc account_s121;
[L4699]              havoc __ret_0_balanceOf;
[L4700]              havoc recipient_s140;
[L4701]              havoc amount_s140;
[L4702]              havoc __ret_0_transfer;
[L4703]              havoc owner_s156;
[L4704]              havoc spender_s156;
[L4705]              havoc __ret_0_allowance;
[L4706]              havoc spender_s175;
[L4707]              havoc amount_s175;
[L4708]              havoc __ret_0_approve;
[L4709]              havoc sender_s211;
[L4710]              havoc recipient_s211;
[L4711]              havoc amount_s211;
[L4712]              havoc __ret_0_transferFrom;
[L4713]              havoc spender_s238;
[L4714]              havoc addedValue_s238;
[L4715]              havoc __ret_0_increaseAllowance;
[L4716]              havoc spender_s266;
[L4717]              havoc subtractedValue_s266;
[L4718]              havoc __ret_0_decreaseAllowance;
[L4719]              havoc name_s484;
[L4720]              havoc symbol_s484;
[L4721]              havoc decimals_s484;
[L4722]              havoc __ret_0_name;
[L4723]              havoc __ret_0_symbol;
[L4724]              havoc __ret_0_decimals;
[L4725]              havoc __ret_0_governance;
[L4726]              havoc arg732_s0;
[L4727]              havoc __ret_0_minters;
[L4728]              havoc account_s671;
[L4729]              havoc amount_s671;
[L4730]              havoc _governance_s689;
[L4731]              havoc _minter_s709;
[L4732]              havoc _minter_s729;
[L4733]              havoc tmpNow;
[L4734]              havoc gas;
[L4735]              assume gas > 4000000 && gas <= 8000000;
[L4736]              tmpNow := now;
[L4737]              havoc now;
[L4738]              assume now > tmpNow;
[L4739]              assume msgsender_MSG != null;
[L4740]              assume DType[msgsender_MSG] != IERC20;
[L4741]              assume DType[msgsender_MSG] != Context;
[L4742]              assume DType[msgsender_MSG] != ERC20;
[L4743]              assume DType[msgsender_MSG] != ERC20Detailed;
[L4744]              assume DType[msgsender_MSG] != SafeMath;
[L4745]              assume DType[msgsender_MSG] != YFLink;
[L4746]              Alloc[msgsender_MSG] := true;
[L4747]  COND TRUE   choice == 17
[L4748]              gas := gas - 21000;
[L4749]  COND FALSE  !(gas >= 0)
[L4873]  RET         call CorralChoice_YFLink(this);

[2020-11-25 09:34:49,858 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:34:49,858 INFO  L82        PathProgramCache]: Analyzing trace with hash -853707514, now seen corresponding path program 1 times
[2020-11-25 09:34:49,859 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:34:49,879 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:34:50,187 INFO  L134       CoverageAnalysis]: Checked inductivity of 233 backedges. 0 proven. 119 refuted. 0 times theorem prover too weak. 114 trivial. 0 not checked.
[2020-11-25 09:34:50,187 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:34:50,187 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 09:34:50,187 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:34:50,188 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 09:34:50,188 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=68, Invalid=532, Unknown=0, NotChecked=0, Total=600
[2020-11-25 09:34:50,188 INFO  L87              Difference]: Start difference. First operand 2419 states and 2738 transitions. cyclomatic complexity: 327 Second operand 25 states.
[2020-11-25 09:34:51,880 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:34:51,880 INFO  L93              Difference]: Finished difference Result 1336 states and 1503 transitions.
[2020-11-25 09:34:51,880 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 09:34:51,880 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1336 states and 1503 transitions.
[2020-11-25 09:34:51,882 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:34:51,883 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1336 states to 0 states and 0 transitions.
[2020-11-25 09:34:51,883 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 09:34:51,883 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 09:34:51,883 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 09:34:51,883 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:34:51,883 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:34:51,883 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:34:51,883 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 09:34:51,883 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 09:34:51,883 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 09:34:51,883 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 09:34:51,883 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 09:34:51,886 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:34:51 BasicIcfg
[2020-11-25 09:34:51,886 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 09:34:51,886 INFO  L168              Benchmark]: Toolchain (without parser) took 39984.16 ms. Allocated memory was 1.0 GB in the beginning and 2.8 GB in the end (delta: 1.8 GB). Free memory was 935.2 MB in the beginning and 1.5 GB in the end (delta: -523.6 MB). Peak memory consumption was 1.3 GB. Max. memory is 15.3 GB.
[2020-11-25 09:34:51,887 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.24 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:34:51,887 INFO  L168              Benchmark]: Boogie Preprocessor took 107.50 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:34:51,888 INFO  L168              Benchmark]: UtopiaSpecLang took 77.31 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 919.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:34:51,888 INFO  L168              Benchmark]: Boogie Printer took 16.78 ms. Allocated memory is still 1.0 GB. Free memory was 919.0 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:34:51,888 INFO  L168              Benchmark]: RCFGBuilder took 786.88 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 784.8 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:34:51,888 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.20 ms. Allocated memory is still 1.0 GB. Free memory was 784.8 MB in the beginning and 775.9 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:34:51,888 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1449.84 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 220.2 MB). Free memory was 775.9 MB in the beginning and 947.7 MB in the end (delta: -171.9 MB). Peak memory consumption was 164.8 MB. Max. memory is 15.3 GB.
[2020-11-25 09:34:51,889 INFO  L168              Benchmark]: BlockEncodingV2 took 145.87 ms. Allocated memory is still 1.2 GB. Free memory was 947.7 MB in the beginning and 878.6 MB in the end (delta: 69.1 MB). Peak memory consumption was 69.1 MB. Max. memory is 15.3 GB.
[2020-11-25 09:34:51,889 INFO  L168              Benchmark]: BuchiAutomizer took 37360.74 ms. Allocated memory was 1.2 GB in the beginning and 2.8 GB in the end (delta: 1.6 GB). Free memory was 869.8 MB in the beginning and 1.5 GB in the end (delta: -589.0 MB). Peak memory consumption was 971.3 MB. Max. memory is 15.3 GB.
[2020-11-25 09:34:51,891 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4436 locations, 7953 edges
  - StatisticsResult: Encoded RCFG
    4340 locations, 7688 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.24 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 107.50 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 77.31 ms. Allocated memory is still 1.0 GB. Free memory was 924.4 MB in the beginning and 919.0 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.78 ms. Allocated memory is still 1.0 GB. Free memory was 919.0 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 786.88 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 784.8 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.20 ms. Allocated memory is still 1.0 GB. Free memory was 784.8 MB in the beginning and 775.9 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1449.84 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 220.2 MB). Free memory was 775.9 MB in the beginning and 947.7 MB in the end (delta: -171.9 MB). Peak memory consumption was 164.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 145.87 ms. Allocated memory is still 1.2 GB. Free memory was 947.7 MB in the beginning and 878.6 MB in the end (delta: 69.1 MB). Peak memory consumption was 69.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 37360.74 ms. Allocated memory was 1.2 GB in the beginning and 2.8 GB in the end (delta: 1.6 GB). Free memory was 869.8 MB in the beginning and 1.5 GB in the end (delta: -589.0 MB). Peak memory consumption was 971.3 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1787 locations, 2445 edges
  - StatisticsResult: BuchiProgram size
    4436 locations, 7953 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 19 terminating modules (19 trivial, 0 deterministic, 0 nondeterministic). 19 modules have a trivial ranking function, the largest among these consists of 48 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 37.3s and 20 iterations.  TraceHistogramMax:3. Analysis of lassos took 4.3s. Construction of modules took 25.0s. BÃ¼chi inclusion checks took 6.9s. Highest rank in rank-based complementation 0. Minimization of det autom 19. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 18 MinimizatonAttempts, 2050 StatesRemovedByMinimization, 13 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 3129 states and ocurred in iteration 7.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 51592 SDtfs, 54006 SDslu, 220093 SDs, 0 SdLazy, 357008 SolverSat, 10372 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 25.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU19 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC200) ==> ( <>(success_transfer_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
