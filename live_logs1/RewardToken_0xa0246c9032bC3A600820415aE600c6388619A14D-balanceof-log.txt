This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 03:29:38,575 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 03:29:38,576 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 03:29:38,586 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 03:29:38,586 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 03:29:38,587 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 03:29:38,588 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 03:29:38,590 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 03:29:38,591 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 03:29:38,592 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 03:29:38,592 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 03:29:38,593 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 03:29:38,593 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 03:29:38,594 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 03:29:38,595 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 03:29:38,595 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 03:29:38,597 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 03:29:38,599 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 03:29:38,601 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 03:29:38,602 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 03:29:38,603 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 03:29:38,605 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 03:29:38,607 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 03:29:38,608 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 03:29:38,608 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 03:29:38,609 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 03:29:38,609 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 03:29:38,610 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 03:29:38,610 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 03:29:38,611 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 03:29:38,611 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 03:29:38,612 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 03:29:38,613 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 03:29:38,614 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 03:29:38,615 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 03:29:38,615 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 03:29:38,616 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 03:29:38,616 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 03:29:38,616 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 03:29:38,617 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 03:29:38,618 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 03:29:38,618 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 03:29:38,626 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 03:29:38,626 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 03:29:38,627 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 03:29:38,627 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 03:29:38,627 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 03:29:38,628 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 03:29:38,628 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 03:29:38,628 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 03:29:38,628 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 03:29:38,628 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 03:29:38,628 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 03:29:38,628 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 03:29:38,628 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 03:29:38,628 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 03:29:38,629 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 03:29:38,629 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 03:29:38,629 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 03:29:38,629 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 03:29:38,629 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 03:29:38,629 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 03:29:38,629 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 03:29:38,629 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 03:29:38,629 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 03:29:38,630 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 03:29:38,630 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 03:29:38,630 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 03:29:38,653 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 03:29:38,665 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 03:29:38,668 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 03:29:38,669 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 03:29:38,669 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 03:29:38,670 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl
[2020-11-25 03:29:38,670 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl'
[2020-11-25 03:29:38,803 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 03:29:38,804 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 03:29:38,805 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 03:29:38,805 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 03:29:38,805 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 03:29:38,822 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/1) ...
[2020-11-25 03:29:38,824 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/1) ...
[2020-11-25 03:29:38,872 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/1) ...
[2020-11-25 03:29:38,873 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/1) ...
[2020-11-25 03:29:38,906 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/1) ...
[2020-11-25 03:29:38,929 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/1) ...
[2020-11-25 03:29:38,945 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/1) ...
[2020-11-25 03:29:38,967 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 03:29:38,967 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 03:29:38,968 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 03:29:38,970 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 03:29:38,974 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/1) ...
[2020-11-25 03:29:38,998 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && store_Governable[this] == old(store_Governable[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:29:39,004 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && store_Governable[this] == old(store_Governable[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:29:39,012 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && store_Governable[this] == old(store_Governable[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:29:39,019 INFO  L636   opiaSpecLangObserver]: Parsed ( _balances_ERC20[this][account_s293]>=0 && _balances_ERC20[this][account_s293]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],[IdentifierExpression[account_s293,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],[IdentifierExpression[account_s293,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 03:29:39,022 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( __ret_0_==_balances_ERC20[this][account_s293] && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && store_Governable[this]==( old(store_Governable[this]) ) ) && _cap_ERC20Capped[this]==( old(_cap_ERC20Capped[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,balanceOf~address_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],[IdentifierExpression[account_s293,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[store_Governable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[store_Governable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_cap_ERC20Capped,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_ERC20>]]]]]]
[2020-11-25 03:29:39,032 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.balanceOf(owner), _balances_ERC20[this][owner] >= 0 && _balances_ERC20[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.balanceOf(owner), return == _balances_ERC20[this][owner] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && store_Governable[this] == old(store_Governable[this]) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 03:29:39,032 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_balanceOf_ERC200) ==> ( <>AP(success_balanceOf_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 03:29:39,053 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:29:39 PropertyContainer
[2020-11-25 03:29:39,053 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 03:29:39,054 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 03:29:39,054 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 03:29:39,054 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 03:29:39,055 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/2) ...
[2020-11-25 03:29:39,055 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 03:29:39,056 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 03:29:39,084 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:29:39" (2/2) ...
[2020-11-25 03:29:39,084 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 03:29:39,084 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 03:29:39,084 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 03:29:39,084 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 03:29:39,085 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/2) ...
[2020-11-25 03:29:39,141 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 03:29:39,141 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 03:29:39,141 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:29:39,141 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 03:29:39,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 03:29:39,142 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 03:29:39,142 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 03:29:39,142 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 03:29:39,142 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 03:29:39,142 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 03:29:39,142 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 03:29:39,142 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:29:39,142 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 03:29:39,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 03:29:39,143 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 03:29:39,143 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:29:39,143 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 03:29:39,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 03:29:39,143 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:29:39,143 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:39,143 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:29:39,143 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 03:29:39,144 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:39,144 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 03:29:39,144 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:39,144 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:29:39,144 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 03:29:39,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 03:29:39,144 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 03:29:39,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 03:29:39,144 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 03:29:39,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 03:29:39,144 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 03:29:39,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 03:29:39,145 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 03:29:39,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 03:29:39,145 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 03:29:39,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 03:29:39,145 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:29:39,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 03:29:39,145 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:29:39,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 03:29:39,146 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:29:39,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 03:29:39,146 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:29:39,146 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:29:39,146 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:29:39,146 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:29:39,146 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:29:39,146 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:29:39,146 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 03:29:39,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 03:29:39,146 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 03:29:39,147 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 03:29:39,147 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 03:29:39,147 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:29:39,147 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 03:29:39,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 03:29:39,147 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 03:29:39,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 03:29:39,147 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 03:29:39,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 03:29:39,147 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 03:29:39,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 03:29:39,148 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:29:39,148 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:29:39,148 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:29:39,148 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:29:39,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 03:29:39,148 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:29:39,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 03:29:39,148 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:29:39,148 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:29:39,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped
[2020-11-25 03:29:39,149 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped
[2020-11-25 03:29:39,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped
[2020-11-25 03:29:39,149 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:29:39,149 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:29:39,149 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:29:39,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 03:29:39,149 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 03:29:39,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 03:29:39,149 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 03:29:39,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 03:29:39,150 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 03:29:39,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 03:29:39,150 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:29:39,150 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 03:29:39,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 03:29:39,150 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 03:29:39,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 03:29:39,150 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 03:29:39,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 03:29:39,151 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 03:29:39,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 03:29:39,151 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 03:29:39,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 03:29:39,151 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:29:39,151 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage_NoBaseCtor__success
[2020-11-25 03:29:39,151 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage
[2020-11-25 03:29:39,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage
[2020-11-25 03:29:39,151 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage
[2020-11-25 03:29:39,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage
[2020-11-25 03:29:39,151 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage
[2020-11-25 03:29:39,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage
[2020-11-25 03:29:39,152 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage
[2020-11-25 03:29:39,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage
[2020-11-25 03:29:39,152 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage
[2020-11-25 03:29:39,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage
[2020-11-25 03:29:39,152 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage
[2020-11-25 03:29:39,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage
[2020-11-25 03:29:39,152 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage
[2020-11-25 03:29:39,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage
[2020-11-25 03:29:39,153 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable_NoBaseCtor__success
[2020-11-25 03:29:39,153 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable
[2020-11-25 03:29:39,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable
[2020-11-25 03:29:39,153 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable
[2020-11-25 03:29:39,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable
[2020-11-25 03:29:39,153 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable
[2020-11-25 03:29:39,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable
[2020-11-25 03:29:39,153 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable
[2020-11-25 03:29:39,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable
[2020-11-25 03:29:39,153 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken_NoBaseCtor__success
[2020-11-25 03:29:39,154 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken
[2020-11-25 03:29:39,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken
[2020-11-25 03:29:39,154 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken
[2020-11-25 03:29:39,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken
[2020-11-25 03:29:39,154 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken
[2020-11-25 03:29:39,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken
[2020-11-25 03:29:39,154 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 03:29:39,154 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 03:29:39,154 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 03:29:39,154 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 03:29:39,155 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 03:29:39,155 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGovernance_pre__success
[2020-11-25 03:29:39,155 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyStoreGovernance_pre__success
[2020-11-25 03:29:39,155 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 03:29:39,155 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 03:29:39,155 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 03:29:39,155 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 03:29:39,155 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 03:29:39,155 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 03:29:39,156 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 03:29:39,156 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 03:29:39,156 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 03:29:39,156 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 03:29:39,156 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 03:29:39,156 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 03:29:39,156 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:29:39,156 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:29:39,156 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Capped
[2020-11-25 03:29:39,157 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Capped
[2020-11-25 03:29:39,157 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:29:39,157 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:29:39,157 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 03:29:39,157 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 03:29:39,157 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Storage
[2020-11-25 03:29:39,157 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Storage
[2020-11-25 03:29:39,157 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Governable
[2020-11-25 03:29:39,157 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Governable
[2020-11-25 03:29:39,157 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_RewardToken
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 03:29:39,158 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 03:29:39,159 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:29:39,160 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:29:39,161 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 03:29:39,162 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:29:39,163 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__success
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure cap_ERC20Capped__fail
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:29:39,164 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:29:39,165 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage_NoBaseCtor__fail
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage__success
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure Storage_Storage__fail
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage__success
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_Storage__fail
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage__success
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure setController~address_Storage__fail
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage__success
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure isGovernance~address_Storage__fail
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage__success
[2020-11-25 03:29:39,166 INFO  L130     BoogieDeclarations]: Found specification of procedure isController~address_Storage__fail
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage__success
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Storage__fail
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage__success
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure controller_Storage__fail
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable_NoBaseCtor__fail
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable__success
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure Governable_Governable__fail
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable__success
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure setStorage~address_Governable__fail
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable__success
[2020-11-25 03:29:39,167 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_Governable__fail
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable__success
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure store_Governable__fail
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken_NoBaseCtor__fail
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken__success
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure RewardToken_RewardToken__fail
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken__success
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_RewardToken__fail
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken__success
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure HARD_CAP_RewardToken__fail
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 03:29:39,168 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 03:29:39,169 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 03:29:39,169 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 03:29:39,169 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 03:29:39,169 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyGovernance_pre__fail
[2020-11-25 03:29:39,169 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyStoreGovernance_pre__fail
[2020-11-25 03:29:39,169 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 03:29:39,169 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 03:29:39,169 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 03:29:39,169 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 03:29:39,169 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 03:29:39,169 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 03:29:39,169 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 03:29:39,170 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 03:29:39,171 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__fail
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256~string_SafeMath__success
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 03:29:39,172 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 03:29:39,173 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 03:29:39,174 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 03:29:39,175 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 03:29:39,176 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__fail
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped_NoBaseCtor__success
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__fail
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Capped_ERC20Capped__success
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__fail
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure cap_ERC20Capped__success
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__fail
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20Capped__success
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 03:29:39,177 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 03:29:39,178 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage_NoBaseCtor__fail
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage_NoBaseCtor__success
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage__fail
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure Storage_Storage__success
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage__fail
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_Storage__success
[2020-11-25 03:29:39,179 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage__fail
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure setController~address_Storage__success
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage__fail
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure isGovernance~address_Storage__success
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage__fail
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure isController~address_Storage__success
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage__fail
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Storage__success
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage__fail
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure controller_Storage__success
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable_NoBaseCtor__fail
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable_NoBaseCtor__success
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable__fail
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure Governable_Governable__success
[2020-11-25 03:29:39,180 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable__fail
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure setStorage~address_Governable__success
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable__fail
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_Governable__success
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable__fail
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure store_Governable__success
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken_NoBaseCtor__fail
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken_NoBaseCtor__success
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken__fail
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure RewardToken_RewardToken__success
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken__fail
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_RewardToken__success
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken__fail
[2020-11-25 03:29:39,181 INFO  L138     BoogieDeclarations]: Found implementation of procedure HARD_CAP_RewardToken__success
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGovernance_pre__fail
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyGovernance_pre__success
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyStoreGovernance_pre__fail
[2020-11-25 03:29:39,182 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyStoreGovernance_pre__success
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 03:29:39,183 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Capped
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Capped
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Storage
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Storage
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Governable
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Governable
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_RewardToken
[2020-11-25 03:29:39,184 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 03:29:39,184 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 03:29:39,185 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 03:29:40,292 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:29:40,293 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:29:40,293 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 03:29:40,460 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 03:29:40,460 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-25 03:29:40,463 INFO  L202        PluginConnector]: Adding new model RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:29:40 BoogieIcfgContainer
[2020-11-25 03:29:40,463 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:29:39" (2/2) ...
[2020-11-25 03:29:40,463 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 03:29:40,463 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@4cfcc90d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:29:40, skipping insertion in model container
[2020-11-25 03:29:40,463 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 03:29:40,464 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 03:29:40,464 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 03:29:40,465 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 03:29:40,465 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/3) ...
[2020-11-25 03:29:40,465 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@546ab200 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:29:40, skipping insertion in model container
[2020-11-25 03:29:40,465 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:29:39" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 03:29:40,491 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:29:40 NWAContainer
[2020-11-25 03:29:40,492 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 03:29:40,492 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 03:29:40,492 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 03:29:40,492 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 03:29:40,493 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:29:40" (3/4) ...
[2020-11-25 03:29:40,493 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@73883482 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:29:40, skipping insertion in model container
[2020-11-25 03:29:40,493 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:29:40" (4/4) ...
[2020-11-25 03:29:40,496 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 03:29:40,502 INFO  L110   BuchiProductObserver]: Initial RCFG 4291 locations, 6252 edges
[2020-11-25 03:29:40,502 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 03:29:40,514 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 03:29:43,825 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 03:29:43,839 INFO  L110   BuchiProductObserver]: BuchiProgram size 11012 locations, 20412 edges
[2020-11-25 03:29:43,839 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:29:43 BoogieIcfgContainer
[2020-11-25 03:29:43,839 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 03:29:43,839 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 03:29:43,839 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 03:29:43,841 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 03:29:43,841 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:29:43" (1/1) ...
[2020-11-25 03:29:44,019 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := div~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, 535918673);
[2020-11-25 03:29:44,022 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_1 := div~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s186, b_s186, 535918673);
[2020-11-25 03:29:44,026 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := mod~uint256~uint256~string_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -515736953);
[2020-11-25 03:29:44,033 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_2 := mod~uint256~uint256~string_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, a_s229, b_s229, -515736953);
[2020-11-25 03:29:44,049 INFO  L313           BlockEncoder]: Initial Icfg 11012 locations, 20412 edges
[2020-11-25 03:29:44,050 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 03:29:44,050 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 03:29:44,050 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 03:29:44,051 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 03:29:44,071 INFO  L70    emoveInfeasibleEdges]: Removed 309 edges and 29 locations because of local infeasibility
[2020-11-25 03:29:44,089 INFO  L70        RemoveSinkStates]: Removed 200 edges and 133 locations by removing sink states
[2020-11-25 03:29:44,111 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 03:29:44,119 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 03:29:44,126 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 03:29:44,126 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 03:29:44,131 INFO  L313           BlockEncoder]: Encoded RCFG 10806 locations, 19838 edges
[2020-11-25 03:29:44,131 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:29:44 BasicIcfg
[2020-11-25 03:29:44,131 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 03:29:44,131 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 03:29:44,132 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 03:29:44,133 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 03:29:44,133 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:44,133 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:29:38" (1/6) ...
[2020-11-25 03:29:44,135 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@180ff339 and model type RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:29:44, skipping insertion in model container
[2020-11-25 03:29:44,135 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:44,135 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:29:39" (2/6) ...
[2020-11-25 03:29:44,135 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@180ff339 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:29:44, skipping insertion in model container
[2020-11-25 03:29:44,135 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:44,135 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:29:40" (3/6) ...
[2020-11-25 03:29:44,135 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@180ff339 and model type RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:29:44, skipping insertion in model container
[2020-11-25 03:29:44,135 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:44,135 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:29:40" (4/6) ...
[2020-11-25 03:29:44,136 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@180ff339 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:29:44, skipping insertion in model container
[2020-11-25 03:29:44,136 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:44,136 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:29:43" (5/6) ...
[2020-11-25 03:29:44,136 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@180ff339 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:29:44, skipping insertion in model container
[2020-11-25 03:29:44,136 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 03:29:44,136 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:29:44" (6/6) ...
[2020-11-25 03:29:44,137 INFO  L404   chiAutomizerObserver]: Analyzing ICFG RewardToken_0xa0246c9032bC3A600820415aE600c6388619A14D_balanceof.bpl_BEv2
[2020-11-25 03:29:44,164 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 03:29:44,164 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 03:29:44,165 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 03:29:44,165 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 03:29:44,165 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 03:29:44,165 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 03:29:44,165 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 03:29:44,165 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 03:29:44,165 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 03:29:44,240 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10806 states.
[2020-11-25 03:29:44,310 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:44,310 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:44,310 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:44,318 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:44,318 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:44,318 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 03:29:44,318 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10806 states.
[2020-11-25 03:29:44,416 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:44,416 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:44,416 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:44,418 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:44,418 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND FALSE  !(gas >= 0)
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:44,431 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:44,431 INFO  L82        PathProgramCache]: Analyzing trace with hash 2075987110, now seen corresponding path program 1 times
[2020-11-25 03:29:44,436 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:44,455 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:44,494 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:29:44,495 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:44,496 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:29:44,926 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:44,935 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:29:44,936 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:29:44,937 INFO  L87              Difference]: Start difference. First operand 10806 states. Second operand 4 states.
[2020-11-25 03:29:45,947 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:45,948 INFO  L93              Difference]: Finished difference Result 5217 states and 6545 transitions.
[2020-11-25 03:29:45,948 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:29:45,949 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5217 states and 6545 transitions.
[2020-11-25 03:29:45,981 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:46,018 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5217 states to 5217 states and 6545 transitions.
[2020-11-25 03:29:46,019 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 03:29:46,022 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 984
[2020-11-25 03:29:46,023 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5217 states and 6545 transitions.
[2020-11-25 03:29:46,036 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:46,036 INFO  L728         BuchiCegarLoop]: Abstraction has 5217 states and 6545 transitions.
[2020-11-25 03:29:46,056 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5217 states and 6545 transitions.
[2020-11-25 03:29:46,136 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5217 to 5217.
[2020-11-25 03:29:46,136 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5217 states.
[2020-11-25 03:29:46,145 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5217 states to 5217 states and 6545 transitions.
[2020-11-25 03:29:46,145 INFO  L751         BuchiCegarLoop]: Abstraction has 5217 states and 6545 transitions.
[2020-11-25 03:29:46,145 INFO  L631         BuchiCegarLoop]: Abstraction has 5217 states and 6545 transitions.
[2020-11-25 03:29:46,145 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 03:29:46,146 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5217 states and 6545 transitions.
[2020-11-25 03:29:46,156 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 03:29:46,156 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:46,156 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:46,158 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:46,158 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND TRUE   revert
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND TRUE   revert
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:46,162 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:46,162 INFO  L82        PathProgramCache]: Analyzing trace with hash -2128272689, now seen corresponding path program 1 times
[2020-11-25 03:29:46,164 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:46,174 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:46,195 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 03:29:46,195 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:46,196 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:29:46,197 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:46,197 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:29:46,197 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:29:46,197 INFO  L87              Difference]: Start difference. First operand 5217 states and 6545 transitions. cyclomatic complexity: 1330 Second operand 3 states.
[2020-11-25 03:29:46,385 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:46,385 INFO  L93              Difference]: Finished difference Result 6679 states and 8349 transitions.
[2020-11-25 03:29:46,385 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:29:46,385 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6679 states and 8349 transitions.
[2020-11-25 03:29:46,403 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:46,431 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6679 states to 6091 states and 7335 transitions.
[2020-11-25 03:29:46,431 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1215
[2020-11-25 03:29:46,432 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1268
[2020-11-25 03:29:46,432 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6091 states and 7335 transitions.
[2020-11-25 03:29:46,440 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:46,440 INFO  L728         BuchiCegarLoop]: Abstraction has 6091 states and 7335 transitions.
[2020-11-25 03:29:46,446 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6091 states and 7335 transitions.
[2020-11-25 03:29:46,501 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6091 to 5682.
[2020-11-25 03:29:46,501 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5682 states.
[2020-11-25 03:29:46,508 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5682 states to 5682 states and 6822 transitions.
[2020-11-25 03:29:46,508 INFO  L751         BuchiCegarLoop]: Abstraction has 5682 states and 6822 transitions.
[2020-11-25 03:29:46,508 INFO  L631         BuchiCegarLoop]: Abstraction has 5682 states and 6822 transitions.
[2020-11-25 03:29:46,508 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 03:29:46,509 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5682 states and 6822 transitions.
[2020-11-25 03:29:46,516 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:46,516 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:46,516 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:46,521 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:46,522 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6552]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6553]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6553]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6554]   COND FALSE  !(revert)
[L6570]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6575]   COND TRUE   __tmp__DType[this] == ERC20Capped
[L6576]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6576]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6577]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:46,531 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:46,531 INFO  L82        PathProgramCache]: Analyzing trace with hash 786712573, now seen corresponding path program 1 times
[2020-11-25 03:29:46,532 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:46,561 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:46,910 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1639 trivial. 0 not checked.
[2020-11-25 03:29:46,911 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:46,911 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 03:29:46,912 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:46,912 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 03:29:46,912 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 03:29:46,912 INFO  L87              Difference]: Start difference. First operand 5682 states and 6822 transitions. cyclomatic complexity: 1142 Second operand 8 states.
[2020-11-25 03:29:48,369 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:48,369 INFO  L93              Difference]: Finished difference Result 7863 states and 9478 transitions.
[2020-11-25 03:29:48,369 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:29:48,370 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7863 states and 9478 transitions.
[2020-11-25 03:29:48,388 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:29:48,408 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7863 states to 7860 states and 9475 transitions.
[2020-11-25 03:29:48,409 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1684
[2020-11-25 03:29:48,410 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1684
[2020-11-25 03:29:48,410 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7860 states and 9475 transitions.
[2020-11-25 03:29:48,416 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:48,416 INFO  L728         BuchiCegarLoop]: Abstraction has 7860 states and 9475 transitions.
[2020-11-25 03:29:48,421 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7860 states and 9475 transitions.
[2020-11-25 03:29:48,482 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7860 to 7772.
[2020-11-25 03:29:48,483 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7772 states.
[2020-11-25 03:29:48,492 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7772 states to 7772 states and 9387 transitions.
[2020-11-25 03:29:48,493 INFO  L751         BuchiCegarLoop]: Abstraction has 7772 states and 9387 transitions.
[2020-11-25 03:29:48,493 INFO  L631         BuchiCegarLoop]: Abstraction has 7772 states and 9387 transitions.
[2020-11-25 03:29:48,493 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 03:29:48,493 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7772 states and 9387 transitions.
[2020-11-25 03:29:48,503 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:29:48,503 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:48,503 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:48,508 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:48,508 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6355]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6360]   COND TRUE   __tmp__DType[this] == MinterRole
[L6361]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6361]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6362]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6355]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6360]   COND TRUE   __tmp__DType[this] == MinterRole
[L6361]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6361]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6362]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6355]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6360]   COND TRUE   __tmp__DType[this] == MinterRole
[L6361]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6361]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6362]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND FALSE  !(__tmp__DType[this] == RewardToken)
[L6350]   COND FALSE  !(__tmp__DType[this] == ERC20Capped)
[L6355]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6360]   COND TRUE   __tmp__DType[this] == MinterRole
[L6361]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6361]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6362]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND TRUE   __tmp__DType[this] == RewardToken
[L6548]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6548]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6549]   COND FALSE  !(revert)
[L6570]   COND TRUE   __tmp__DType[this] == RewardToken
[L6571]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6571]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6572]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:48,516 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:48,516 INFO  L82        PathProgramCache]: Analyzing trace with hash -56994192, now seen corresponding path program 1 times
[2020-11-25 03:29:48,517 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:48,530 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:48,759 INFO  L134       CoverageAnalysis]: Checked inductivity of 1657 backedges. 0 proven. 48 refuted. 0 times theorem prover too weak. 1609 trivial. 0 not checked.
[2020-11-25 03:29:48,759 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:29:48,760 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 03:29:48,760 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:48,760 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:29:48,760 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:29:48,761 INFO  L87              Difference]: Start difference. First operand 7772 states and 9387 transitions. cyclomatic complexity: 1619 Second operand 3 states.
[2020-11-25 03:29:48,819 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:48,819 INFO  L93              Difference]: Finished difference Result 7775 states and 9390 transitions.
[2020-11-25 03:29:48,819 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:29:48,819 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7775 states and 9390 transitions.
[2020-11-25 03:29:48,833 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:29:48,852 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7775 states to 7775 states and 9390 transitions.
[2020-11-25 03:29:48,852 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1662
[2020-11-25 03:29:48,853 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1662
[2020-11-25 03:29:48,853 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7775 states and 9390 transitions.
[2020-11-25 03:29:48,858 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:48,858 INFO  L728         BuchiCegarLoop]: Abstraction has 7775 states and 9390 transitions.
[2020-11-25 03:29:48,863 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7775 states and 9390 transitions.
[2020-11-25 03:29:48,913 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7775 to 7773.
[2020-11-25 03:29:48,913 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7773 states.
[2020-11-25 03:29:48,922 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7773 states to 7773 states and 9388 transitions.
[2020-11-25 03:29:48,922 INFO  L751         BuchiCegarLoop]: Abstraction has 7773 states and 9388 transitions.
[2020-11-25 03:29:48,922 INFO  L631         BuchiCegarLoop]: Abstraction has 7773 states and 9388 transitions.
[2020-11-25 03:29:48,922 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 03:29:48,922 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7773 states and 9388 transitions.
[2020-11-25 03:29:48,931 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 6
[2020-11-25 03:29:48,931 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:48,931 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:48,935 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:48,935 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND TRUE   __exception
[L3171]               __tmp__Balance := Balance;
[L3172]               __tmp__DType := DType;
[L3173]               __tmp__Alloc := Alloc;
[L3174]               __tmp__balance_ADDR := balance_ADDR;
[L3175]               __tmp__M_Ref_int := M_Ref_int;
[L3176]               __tmp__sum__balances0 := sum__balances0;
[L3177]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3178]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3179]               __tmp__sum__allowances1 := sum__allowances1;
[L3180]               __tmp__M_Ref_bool := M_Ref_bool;
[L3181]               __tmp__sum := sum;
[L3182]               __tmp__Length := Length;
[L3183]               __tmp__now := now;
[L3184]               __tmp___balances_ERC20 := _balances_ERC20;
[L3185]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3186]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3187]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3188]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3189]               __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L3190]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3191]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3192]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3193]               __tmp___owner_Ownable := _owner_Ownable;
[L3194]               __tmp__governance_Storage := governance_Storage;
[L3195]               __tmp__controller_Storage := controller_Storage;
[L3196]               __tmp__store_Governable := store_Governable;
[L3197]               __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L3198]   CALL        call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7586]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7586]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L7587]   COND FALSE  !(revert)
[L7590]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7590]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7591]   COND FALSE  !(revert)
[L7594]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L7594]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7595]   COND FALSE  !(revert)
[L7598]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7008]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L7008]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6981]               assume msgsender_MSG != null;
[L6982]               __tmp__Balance[this] := 0;
[L6983]               __tmp___name_ERC20Detailed[this] := 724207837;
[L6984]               __tmp___symbol_ERC20Detailed[this] := 724207837;
[L6985]               __tmp___decimals_ERC20Detailed[this] := 0;
[L6987]               __tmp___name_ERC20Detailed[this] := name_s952;
[L6988]               __tmp___symbol_ERC20Detailed[this] := symbol_s952;
[L6989]               __tmp___decimals_ERC20Detailed[this] := decimals_s952;
[L7012]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7013]   COND FALSE  !(revert)
[L7598]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7599]   COND FALSE  !(revert)
[L7602]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L7602]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7603]   COND FALSE  !(revert)
[L7606]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L7606]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7607]   COND FALSE  !(revert)
[L7610]   CALL        call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L6830]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6830]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6831]   COND FALSE  !(revert)
[L6834]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6834]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6835]   COND FALSE  !(revert)
[L6838]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6838]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6839]   COND FALSE  !(revert)
[L6842]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6842]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6843]   COND FALSE  !(revert)
[L6846]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6698]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6698]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6699]   COND FALSE  !(revert)
[L6702]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L6702]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6703]   COND FALSE  !(revert)
[L6706]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4972]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L4972]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4973]   COND FALSE  !(revert)
[L4976]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4686]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4671]               assume msgsender_MSG != null;
[L4672]               __tmp__Balance[this] := 0;
[L4686]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4687]   COND FALSE  !(revert)
[L4976]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4977]   COND FALSE  !(revert)
[L4980]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4947]               assume msgsender_MSG != null;
[L4948]               __tmp__Balance[this] := 0;
[L4949]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4950]               __tmp__sum__balances0[this] := 0;
[L4951]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4952]               __tmp__sum__allowances1[this] := 0;
[L4953]               __tmp___totalSupply_ERC20[this] := 0;
[L4980]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4981]   COND FALSE  !(revert)
[L6706]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6707]   COND FALSE  !(revert)
[L6710]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4703]               assume msgsender_MSG != null;
[L4704]               __tmp__Balance[this] := 0;
[L4718]   RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L6436]   RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6440]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               __tmp__Balance[this] := 0;
[L6316]   CALL        call __var_33 := FreshRefGenerator__fail();
[L4644]               havoc newRef;
[L4645]               assume __tmp__Alloc[newRef] == false;
[L4646]               __tmp__Alloc[newRef] := true;
[L4647]               assume newRef != null;
[L6316]   RET         call __var_33 := FreshRefGenerator__fail();
[L6317]   COND FALSE  !(revert)
[L6320]               __tmp___minters_MinterRole[this] := __var_33;
[L6322]   COND TRUE   __tmp__DType[this] == RewardToken
[L6323]   CALL        call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6323]   RET         call __var_32 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6324]   COND FALSE  !(revert)
[L6345]   COND TRUE   __tmp__DType[this] == RewardToken
[L6346]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L6346]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6347]   COND FALSE  !(revert)
[L6440]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6441]   COND FALSE  !(revert)
[L6710]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6711]   COND FALSE  !(revert)
[L6714]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6683]               assume msgsender_MSG != null;
[L6684]               __tmp__Balance[this] := 0;
[L6714]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6715]   COND FALSE  !(revert)
[L6846]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6847]   COND FALSE  !(revert)
[L6850]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6803]               assume msgsender_MSG != null;
[L6804]               __tmp__Balance[this] := 0;
[L6805]               __tmp___cap_ERC20Capped[this] := 0;
[L6807]   COND FALSE  !(!(cap_s886 > 0))
[L6811]               __tmp___cap_ERC20Capped[this] := cap_s886;
[L6850]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6851]   COND FALSE  !(revert)
[L7610]   RET         call ERC20Capped_ERC20Capped__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__HARD_CAP_RewardToken[this]);
[L7611]   COND FALSE  !(revert)
[L7614]   CALL        call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7431]   CALL        call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7396]               assume msgsender_MSG != null;
[L7397]               __tmp__Balance[this] := 0;
[L7399]               __var_48 := null;
[L7400]   COND FALSE  !(!(_store_s1208 != null))
[L7404]               assume __tmp__DType[_store_s1208] == Storage;
[L7405]               __var_49 := _store_s1208;
[L7406]               __tmp__store_Governable[this] := __var_49;
[L7431]   RET         call Governable_Governable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7432]   COND FALSE  !(revert)
[L7614]   RET         call Governable_Governable__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7615]   COND FALSE  !(revert)
[L7618]   CALL        call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7519]               assume msgsender_MSG != null;
[L7520]               __tmp__Balance[this] := 0;
[L7521]               __tmp__HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7523]   COND TRUE   __tmp__DType[this] == RewardToken
[L7524]   CALL        call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6547]   COND TRUE   __tmp__DType[this] == RewardToken
[L6548]   CALL        call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L4734]               __ret_0_ := msgsender_MSG;
[L6548]   RET         call __var_37 := _msgSender_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L6549]   COND FALSE  !(revert)
[L6570]   COND TRUE   __tmp__DType[this] == RewardToken
[L6571]   CALL        call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6665]   CALL        call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6259]   CALL        call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6259]   RET         call __var_30 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6260]   COND FALSE  !(revert)
[L6263]   COND FALSE  !(!__var_30)
[L6267]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s710]][account_s710] := false;
[L6665]   RET         call remove~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s838);
[L6666]   COND FALSE  !(revert)
[L6571]   RET         call _removeMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6572]   COND FALSE  !(revert)
[L7524]   RET         call renounceMinter_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7525]   COND FALSE  !(revert)
[L7531]   COND TRUE   __tmp__DType[this] == RewardToken
[L7532]   CALL        call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7487]               assume __tmp__DType[__tmp__store_Governable[this]] == Storage;
[L7488]               __var_54 := __tmp__governance_Storage[__tmp__store_Governable[this]];
[L7489]               __ret_0_ := __var_54;
[L7532]   RET         call __var_56 := governance_Governable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7533]   COND FALSE  !(revert)
[L7539]   COND TRUE   __tmp__DType[this] == RewardToken
[L7540]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6648]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6231]   CALL        call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6287]               __var_31 := null;
[L6288]   COND FALSE  !(!(account_s734 != null))
[L6292]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s734]][account_s734];
[L6231]   RET         call __var_29 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6232]   COND FALSE  !(revert)
[L6235]   COND FALSE  !(!!__var_29)
[L6239]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s686]][account_s686] := true;
[L6648]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s822);
[L6649]   COND FALSE  !(revert)
[L7540]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7541]   COND FALSE  !(revert)
[L7618]   RET         call RewardToken_RewardToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7619]   COND FALSE  !(revert)
[L3198]   RET         call RewardToken_RewardToken__fail(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3199]               assume revert || gas < 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:48,941 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:48,941 INFO  L82        PathProgramCache]: Analyzing trace with hash 1810957246, now seen corresponding path program 1 times
[2020-11-25 03:29:48,942 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:48,965 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:49,238 INFO  L134       CoverageAnalysis]: Checked inductivity of 1639 backedges. 32 proven. 0 refuted. 0 times theorem prover too weak. 1607 trivial. 0 not checked.
[2020-11-25 03:29:49,239 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:49,239 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:29:49,239 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:49,239 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:29:49,239 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:29:49,239 INFO  L87              Difference]: Start difference. First operand 7773 states and 9388 transitions. cyclomatic complexity: 1619 Second operand 4 states.
[2020-11-25 03:29:49,974 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:49,974 INFO  L93              Difference]: Finished difference Result 9123 states and 10951 transitions.
[2020-11-25 03:29:49,974 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:29:49,975 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9123 states and 10951 transitions.
[2020-11-25 03:29:49,993 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 14
[2020-11-25 03:29:50,016 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9123 states to 8827 states and 10625 transitions.
[2020-11-25 03:29:50,016 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1866
[2020-11-25 03:29:50,017 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1866
[2020-11-25 03:29:50,017 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8827 states and 10625 transitions.
[2020-11-25 03:29:50,023 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:50,023 INFO  L728         BuchiCegarLoop]: Abstraction has 8827 states and 10625 transitions.
[2020-11-25 03:29:50,028 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8827 states and 10625 transitions.
[2020-11-25 03:29:50,077 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8827 to 8068.
[2020-11-25 03:29:50,077 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8068 states.
[2020-11-25 03:29:50,085 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8068 states to 8068 states and 9595 transitions.
[2020-11-25 03:29:50,086 INFO  L751         BuchiCegarLoop]: Abstraction has 8068 states and 9595 transitions.
[2020-11-25 03:29:50,086 INFO  L631         BuchiCegarLoop]: Abstraction has 8068 states and 9595 transitions.
[2020-11-25 03:29:50,086 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 03:29:50,086 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8068 states and 9595 transitions.
[2020-11-25 03:29:50,094 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 03:29:50,094 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:50,094 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:50,096 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:50,096 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND FALSE  !(DType[this] == RewardToken)
[L6412]   COND TRUE   DType[this] == ERC20Capped
[L6413]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6413]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6414]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND FALSE  !(DType[this] == RewardToken)
[L6412]   COND TRUE   DType[this] == ERC20Capped
[L6413]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6413]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6414]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND FALSE  !(DType[this] == RewardToken)
[L6412]   COND TRUE   DType[this] == ERC20Capped
[L6413]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6413]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6414]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND FALSE  !(DType[this] == RewardToken)
[L6412]   COND TRUE   DType[this] == ERC20Capped
[L6413]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6413]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6414]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND FALSE  !(DType[this] == RewardToken)
[L6626]   COND TRUE   DType[this] == ERC20Capped
[L6627]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6627]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6628]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:50,101 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:50,102 INFO  L82        PathProgramCache]: Analyzing trace with hash -1536654889, now seen corresponding path program 1 times
[2020-11-25 03:29:50,103 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:50,115 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:50,404 INFO  L134       CoverageAnalysis]: Checked inductivity of 1679 backedges. 0 proven. 42 refuted. 0 times theorem prover too weak. 1637 trivial. 0 not checked.
[2020-11-25 03:29:50,404 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 03:29:50,405 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [3] total 3
[2020-11-25 03:29:50,405 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:50,406 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:29:50,406 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:29:50,406 INFO  L87              Difference]: Start difference. First operand 8068 states and 9595 transitions. cyclomatic complexity: 1531 Second operand 3 states.
[2020-11-25 03:29:50,496 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:50,496 INFO  L93              Difference]: Finished difference Result 8071 states and 9598 transitions.
[2020-11-25 03:29:50,497 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:29:50,497 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8071 states and 9598 transitions.
[2020-11-25 03:29:50,511 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 03:29:50,529 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8071 states to 8071 states and 9598 transitions.
[2020-11-25 03:29:50,529 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1772
[2020-11-25 03:29:50,530 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1772
[2020-11-25 03:29:50,530 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8071 states and 9598 transitions.
[2020-11-25 03:29:50,535 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:50,535 INFO  L728         BuchiCegarLoop]: Abstraction has 8071 states and 9598 transitions.
[2020-11-25 03:29:50,546 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8071 states and 9598 transitions.
[2020-11-25 03:29:50,595 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8071 to 8069.
[2020-11-25 03:29:50,595 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8069 states.
[2020-11-25 03:29:50,604 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8069 states to 8069 states and 9596 transitions.
[2020-11-25 03:29:50,604 INFO  L751         BuchiCegarLoop]: Abstraction has 8069 states and 9596 transitions.
[2020-11-25 03:29:50,604 INFO  L631         BuchiCegarLoop]: Abstraction has 8069 states and 9596 transitions.
[2020-11-25 03:29:50,604 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 03:29:50,604 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8069 states and 9596 transitions.
[2020-11-25 03:29:50,612 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 03:29:50,612 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:50,612 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:50,614 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:50,614 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND FALSE  !(DType[this] == RewardToken)
[L6603]   COND TRUE   DType[this] == ERC20Capped
[L6604]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6604]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6605]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:50,619 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:50,619 INFO  L82        PathProgramCache]: Analyzing trace with hash 1109127372, now seen corresponding path program 1 times
[2020-11-25 03:29:50,620 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:50,637 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:50,816 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:29:50,816 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:50,816 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:29:50,817 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:50,817 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:29:50,817 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:29:50,817 INFO  L87              Difference]: Start difference. First operand 8069 states and 9596 transitions. cyclomatic complexity: 1531 Second operand 3 states.
[2020-11-25 03:29:50,872 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:50,872 INFO  L93              Difference]: Finished difference Result 8081 states and 9609 transitions.
[2020-11-25 03:29:50,873 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:29:50,873 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8081 states and 9609 transitions.
[2020-11-25 03:29:50,886 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 03:29:50,903 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8081 states to 8081 states and 9609 transitions.
[2020-11-25 03:29:50,903 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1776
[2020-11-25 03:29:50,903 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1776
[2020-11-25 03:29:50,904 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8081 states and 9609 transitions.
[2020-11-25 03:29:50,908 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:50,908 INFO  L728         BuchiCegarLoop]: Abstraction has 8081 states and 9609 transitions.
[2020-11-25 03:29:50,912 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8081 states and 9609 transitions.
[2020-11-25 03:29:50,956 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8081 to 8073.
[2020-11-25 03:29:50,957 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8073 states.
[2020-11-25 03:29:50,966 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8073 states to 8073 states and 9600 transitions.
[2020-11-25 03:29:50,966 INFO  L751         BuchiCegarLoop]: Abstraction has 8073 states and 9600 transitions.
[2020-11-25 03:29:50,967 INFO  L631         BuchiCegarLoop]: Abstraction has 8073 states and 9600 transitions.
[2020-11-25 03:29:50,967 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 03:29:50,967 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8073 states and 9600 transitions.
[2020-11-25 03:29:50,977 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 10
[2020-11-25 03:29:50,977 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:50,977 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:50,980 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:50,980 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND FALSE  !(__exception)
[L516]    CALL        call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5022]               __ret_0_ := _balances_ERC20[this][account_s293];
[L516]    RET         call __ret_0_ := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L517]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((((__ret_0_ == _balances_ERC20[this][account_s293] && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && store_Governable[this] == old(store_Governable[this])) && _cap_ERC20Capped[this] == old(_cap_ERC20Capped[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L2]                  revert := revert_hold;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:50,985 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:50,985 INFO  L82        PathProgramCache]: Analyzing trace with hash 1948795590, now seen corresponding path program 1 times
[2020-11-25 03:29:50,986 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:51,008 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:51,264 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:29:51,265 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:51,265 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 03:29:51,265 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:51,265 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 03:29:51,265 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 03:29:51,266 INFO  L87              Difference]: Start difference. First operand 8073 states and 9600 transitions. cyclomatic complexity: 1531 Second operand 4 states.
[2020-11-25 03:29:51,308 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:51,309 INFO  L93              Difference]: Finished difference Result 6778 states and 7968 transitions.
[2020-11-25 03:29:51,309 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 03:29:51,309 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6778 states and 7968 transitions.
[2020-11-25 03:29:51,322 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:51,337 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6778 states to 6758 states and 7948 transitions.
[2020-11-25 03:29:51,338 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1276
[2020-11-25 03:29:51,338 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1276
[2020-11-25 03:29:51,338 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6758 states and 7948 transitions.
[2020-11-25 03:29:51,342 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:51,342 INFO  L728         BuchiCegarLoop]: Abstraction has 6758 states and 7948 transitions.
[2020-11-25 03:29:51,347 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6758 states and 7948 transitions.
[2020-11-25 03:29:51,383 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6758 to 6753.
[2020-11-25 03:29:51,383 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6753 states.
[2020-11-25 03:29:51,391 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6753 states to 6753 states and 7943 transitions.
[2020-11-25 03:29:51,391 INFO  L751         BuchiCegarLoop]: Abstraction has 6753 states and 7943 transitions.
[2020-11-25 03:29:51,391 INFO  L631         BuchiCegarLoop]: Abstraction has 6753 states and 7943 transitions.
[2020-11-25 03:29:51,391 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 03:29:51,391 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6753 states and 7943 transitions.
[2020-11-25 03:29:51,398 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:51,398 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:51,398 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:51,400 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:51,401 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND FALSE  !(DType[this] == RewardToken)
[L6603]   COND TRUE   DType[this] == ERC20Capped
[L6604]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6604]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6605]   COND FALSE  !(revert)
[L6621]   COND FALSE  !(DType[this] == RewardToken)
[L6626]   COND FALSE  !(DType[this] == ERC20Capped)
[L6631]   COND TRUE   DType[this] == ERC20Mintable
[L6632]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6632]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6633]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND TRUE   __exception
[L486]                __tmp__Balance := Balance;
[L487]                __tmp__DType := DType;
[L488]                __tmp__Alloc := Alloc;
[L489]                __tmp__balance_ADDR := balance_ADDR;
[L490]                __tmp__M_Ref_int := M_Ref_int;
[L491]                __tmp__sum__balances0 := sum__balances0;
[L492]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]                __tmp__sum__allowances1 := sum__allowances1;
[L495]                __tmp__M_Ref_bool := M_Ref_bool;
[L496]                __tmp__sum := sum;
[L497]                __tmp__Length := Length;
[L498]                __tmp__now := now;
[L499]                __tmp___balances_ERC20 := _balances_ERC20;
[L500]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]                __tmp___minters_MinterRole := _minters_MinterRole;
[L504]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L505]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L506]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L507]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L508]                __tmp___owner_Ownable := _owner_Ownable;
[L509]                __tmp__governance_Storage := governance_Storage;
[L510]                __tmp__controller_Storage := controller_Storage;
[L511]                __tmp__store_Governable := store_Governable;
[L512]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L513]    CALL        call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5016]               __ret_0_ := __tmp___balances_ERC20[this][account_s293];
[L513]    RET         call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L514]                assume revert || gas < 0;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND TRUE   __exception
[L486]                __tmp__Balance := Balance;
[L487]                __tmp__DType := DType;
[L488]                __tmp__Alloc := Alloc;
[L489]                __tmp__balance_ADDR := balance_ADDR;
[L490]                __tmp__M_Ref_int := M_Ref_int;
[L491]                __tmp__sum__balances0 := sum__balances0;
[L492]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]                __tmp__sum__allowances1 := sum__allowances1;
[L495]                __tmp__M_Ref_bool := M_Ref_bool;
[L496]                __tmp__sum := sum;
[L497]                __tmp__Length := Length;
[L498]                __tmp__now := now;
[L499]                __tmp___balances_ERC20 := _balances_ERC20;
[L500]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]                __tmp___minters_MinterRole := _minters_MinterRole;
[L504]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L505]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L506]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L507]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L508]                __tmp___owner_Ownable := _owner_Ownable;
[L509]                __tmp__governance_Storage := governance_Storage;
[L510]                __tmp__controller_Storage := controller_Storage;
[L511]                __tmp__store_Governable := store_Governable;
[L512]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L513]    CALL        call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5016]               __ret_0_ := __tmp___balances_ERC20[this][account_s293];
[L513]    RET         call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L514]                assume revert || gas < 0;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:51,406 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:51,406 INFO  L82        PathProgramCache]: Analyzing trace with hash 769406152, now seen corresponding path program 1 times
[2020-11-25 03:29:51,407 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:51,425 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:51,610 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:29:51,611 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:51,611 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:29:51,611 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:51,611 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:29:51,611 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:29:51,612 INFO  L87              Difference]: Start difference. First operand 6753 states and 7943 transitions. cyclomatic complexity: 1193 Second operand 3 states.
[2020-11-25 03:29:51,662 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:51,662 INFO  L93              Difference]: Finished difference Result 6765 states and 7956 transitions.
[2020-11-25 03:29:51,662 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:29:51,662 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6765 states and 7956 transitions.
[2020-11-25 03:29:51,672 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:51,684 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6765 states to 6765 states and 7956 transitions.
[2020-11-25 03:29:51,684 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1273
[2020-11-25 03:29:51,685 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1273
[2020-11-25 03:29:51,685 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6765 states and 7956 transitions.
[2020-11-25 03:29:51,688 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:51,688 INFO  L728         BuchiCegarLoop]: Abstraction has 6765 states and 7956 transitions.
[2020-11-25 03:29:51,692 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6765 states and 7956 transitions.
[2020-11-25 03:29:51,722 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6765 to 6759.
[2020-11-25 03:29:51,722 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6759 states.
[2020-11-25 03:29:51,729 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6759 states to 6759 states and 7949 transitions.
[2020-11-25 03:29:51,729 INFO  L751         BuchiCegarLoop]: Abstraction has 6759 states and 7949 transitions.
[2020-11-25 03:29:51,729 INFO  L631         BuchiCegarLoop]: Abstraction has 6759 states and 7949 transitions.
[2020-11-25 03:29:51,729 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 03:29:51,729 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6759 states and 7949 transitions.
[2020-11-25 03:29:51,735 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:51,736 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:51,736 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:51,737 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:51,737 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND FALSE  !(DType[this] == RewardToken)
[L6626]   COND TRUE   DType[this] == ERC20Capped
[L6627]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6627]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6628]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND TRUE   __exception
[L486]                __tmp__Balance := Balance;
[L487]                __tmp__DType := DType;
[L488]                __tmp__Alloc := Alloc;
[L489]                __tmp__balance_ADDR := balance_ADDR;
[L490]                __tmp__M_Ref_int := M_Ref_int;
[L491]                __tmp__sum__balances0 := sum__balances0;
[L492]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]                __tmp__sum__allowances1 := sum__allowances1;
[L495]                __tmp__M_Ref_bool := M_Ref_bool;
[L496]                __tmp__sum := sum;
[L497]                __tmp__Length := Length;
[L498]                __tmp__now := now;
[L499]                __tmp___balances_ERC20 := _balances_ERC20;
[L500]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]                __tmp___minters_MinterRole := _minters_MinterRole;
[L504]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L505]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L506]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L507]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L508]                __tmp___owner_Ownable := _owner_Ownable;
[L509]                __tmp__governance_Storage := governance_Storage;
[L510]                __tmp__controller_Storage := controller_Storage;
[L511]                __tmp__store_Governable := store_Governable;
[L512]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L513]    CALL        call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5016]               __ret_0_ := __tmp___balances_ERC20[this][account_s293];
[L513]    RET         call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L514]                assume revert || gas < 0;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L413]                havoc __exception;
[L414]                revert := false;
[L415]    COND FALSE  !(__exception)
[L446]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5010]               __ret_0_ := _totalSupply_ERC20[this];
[L446]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L447]                assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:51,742 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:51,742 INFO  L82        PathProgramCache]: Analyzing trace with hash 347654369, now seen corresponding path program 1 times
[2020-11-25 03:29:51,743 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:51,760 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:51,953 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:29:51,953 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:51,954 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 03:29:51,954 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:51,954 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 03:29:51,954 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 03:29:51,954 INFO  L87              Difference]: Start difference. First operand 6759 states and 7949 transitions. cyclomatic complexity: 1193 Second operand 3 states.
[2020-11-25 03:29:52,002 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:52,002 INFO  L93              Difference]: Finished difference Result 6765 states and 7953 transitions.
[2020-11-25 03:29:52,002 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 03:29:52,003 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6765 states and 7953 transitions.
[2020-11-25 03:29:52,013 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:52,024 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6765 states to 6765 states and 7953 transitions.
[2020-11-25 03:29:52,024 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1273
[2020-11-25 03:29:52,024 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1273
[2020-11-25 03:29:52,024 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6765 states and 7953 transitions.
[2020-11-25 03:29:52,028 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:52,028 INFO  L728         BuchiCegarLoop]: Abstraction has 6765 states and 7953 transitions.
[2020-11-25 03:29:52,032 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6765 states and 7953 transitions.
[2020-11-25 03:29:52,058 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6765 to 6759.
[2020-11-25 03:29:52,058 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6759 states.
[2020-11-25 03:29:52,064 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6759 states to 6759 states and 7946 transitions.
[2020-11-25 03:29:52,065 INFO  L751         BuchiCegarLoop]: Abstraction has 6759 states and 7946 transitions.
[2020-11-25 03:29:52,065 INFO  L631         BuchiCegarLoop]: Abstraction has 6759 states and 7946 transitions.
[2020-11-25 03:29:52,065 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 03:29:52,065 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6759 states and 7946 transitions.
[2020-11-25 03:29:52,071 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:52,071 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:52,071 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:52,072 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:52,072 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND FALSE  !(DType[this] == RewardToken)
[L6603]   COND FALSE  !(DType[this] == ERC20Capped)
[L6608]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6613]   COND TRUE   DType[this] == MinterRole
[L6614]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6614]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6615]   COND FALSE  !(revert)
[L6621]   COND FALSE  !(DType[this] == RewardToken)
[L6626]   COND FALSE  !(DType[this] == ERC20Capped)
[L6631]   COND FALSE  !(DType[this] == ERC20Mintable)
[L6636]   COND TRUE   DType[this] == MinterRole
[L6637]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6637]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6638]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND TRUE   __exception
[L486]                __tmp__Balance := Balance;
[L487]                __tmp__DType := DType;
[L488]                __tmp__Alloc := Alloc;
[L489]                __tmp__balance_ADDR := balance_ADDR;
[L490]                __tmp__M_Ref_int := M_Ref_int;
[L491]                __tmp__sum__balances0 := sum__balances0;
[L492]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]                __tmp__sum__allowances1 := sum__allowances1;
[L495]                __tmp__M_Ref_bool := M_Ref_bool;
[L496]                __tmp__sum := sum;
[L497]                __tmp__Length := Length;
[L498]                __tmp__now := now;
[L499]                __tmp___balances_ERC20 := _balances_ERC20;
[L500]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]                __tmp___minters_MinterRole := _minters_MinterRole;
[L504]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L505]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L506]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L507]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L508]                __tmp___owner_Ownable := _owner_Ownable;
[L509]                __tmp__governance_Storage := governance_Storage;
[L510]                __tmp__controller_Storage := controller_Storage;
[L511]                __tmp__store_Governable := store_Governable;
[L512]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L513]    CALL        call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5016]               __ret_0_ := __tmp___balances_ERC20[this][account_s293];
[L513]    RET         call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L514]                assume revert || gas < 0;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND TRUE   choice == 20
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume msgvalue_MSG == 0;
[L11094]  CALL        call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L413]                havoc __exception;
[L414]                revert := false;
[L415]    COND FALSE  !(__exception)
[L446]    CALL        call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5010]               __ret_0_ := _totalSupply_ERC20[this];
[L446]    RET         call __ret_0_ := totalSupply_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L447]                assume !revert && gas >= 0;
[L11094]  RET         call __ret_0_totalSupply := totalSupply_ERC20(this, msgsender_MSG, msgvalue_MSG);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:52,076 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:52,077 INFO  L82        PathProgramCache]: Analyzing trace with hash 68622916, now seen corresponding path program 1 times
[2020-11-25 03:29:52,077 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:52,094 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:52,342 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:29:52,342 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:52,342 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 03:29:52,342 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:52,343 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 03:29:52,343 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 03:29:52,343 INFO  L87              Difference]: Start difference. First operand 6759 states and 7946 transitions. cyclomatic complexity: 1190 Second operand 7 states.
[2020-11-25 03:29:52,522 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:52,522 INFO  L93              Difference]: Finished difference Result 6780 states and 7967 transitions.
[2020-11-25 03:29:52,522 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 03:29:52,522 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6780 states and 7967 transitions.
[2020-11-25 03:29:52,536 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:52,551 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6780 states to 6777 states and 7964 transitions.
[2020-11-25 03:29:52,551 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1273
[2020-11-25 03:29:52,552 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1273
[2020-11-25 03:29:52,552 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6777 states and 7964 transitions.
[2020-11-25 03:29:52,555 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:52,555 INFO  L728         BuchiCegarLoop]: Abstraction has 6777 states and 7964 transitions.
[2020-11-25 03:29:52,560 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6777 states and 7964 transitions.
[2020-11-25 03:29:52,607 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6777 to 6770.
[2020-11-25 03:29:52,608 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6770 states.
[2020-11-25 03:29:52,614 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6770 states to 6770 states and 7957 transitions.
[2020-11-25 03:29:52,614 INFO  L751         BuchiCegarLoop]: Abstraction has 6770 states and 7957 transitions.
[2020-11-25 03:29:52,614 INFO  L631         BuchiCegarLoop]: Abstraction has 6770 states and 7957 transitions.
[2020-11-25 03:29:52,614 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 03:29:52,614 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6770 states and 7957 transitions.
[2020-11-25 03:29:52,621 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 03:29:52,621 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 03:29:52,621 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 03:29:52,622 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [12, 12, 12, 12, 12, 12, 12, 12, 12, 9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 03:29:52,622 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_ERC200 := false;
[L2]                  call_balanceOf_ERC200 := false;
[L2]      CALL        call main();
[L11225]              assume null == 0;
[L11226]  CALL        call this := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L11226]  RET         call this := FreshRefGenerator__success();
[L11227]              assume now >= 0;
[L11228]              assume DType[this] == RewardToken;
[L11229]              assume msgvalue_MSG == 0;
[L11230]              gas := gas - 53000;
[L11231]  CALL        call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3168]               havoc __exception;
[L3169]               revert := false;
[L3170]   COND FALSE  !(__exception)
[L3201]   CALL        call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7627]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L7627]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L7628]   COND FALSE  !(revert)
[L7631]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7631]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7632]   COND FALSE  !(revert)
[L7635]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L7635]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7636]   COND FALSE  !(revert)
[L7639]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L6995]               assume msgsender_MSG != null;
[L6996]               Balance[this] := 0;
[L6997]               _name_ERC20Detailed[this] := 724207837;
[L6998]               _symbol_ERC20Detailed[this] := 724207837;
[L6999]               _decimals_ERC20Detailed[this] := 0;
[L7001]               _name_ERC20Detailed[this] := name_s952;
[L7002]               _symbol_ERC20Detailed[this] := symbol_s952;
[L7003]               _decimals_ERC20Detailed[this] := decimals_s952;
[L7024]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s952, symbol_s952, decimals_s952);
[L7025]   COND FALSE  !(revert)
[L7639]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1583828811, -26658436, 18);
[L7640]   COND FALSE  !(revert)
[L7643]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L7643]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7644]   COND FALSE  !(revert)
[L7647]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L7647]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7648]   COND FALSE  !(revert)
[L7651]   CALL        call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L6858]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6858]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6859]   COND FALSE  !(revert)
[L6862]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6862]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6863]   COND FALSE  !(revert)
[L6866]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6866]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6870]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L6874]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6722]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6722]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6723]   COND FALSE  !(revert)
[L6726]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L6726]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6727]   COND FALSE  !(revert)
[L6730]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4988]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L4988]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4989]   COND FALSE  !(revert)
[L4992]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4694]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4679]               assume msgsender_MSG != null;
[L4680]               Balance[this] := 0;
[L4694]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4695]   COND FALSE  !(revert)
[L4992]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4993]   COND FALSE  !(revert)
[L4996]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4960]               assume msgsender_MSG != null;
[L4961]               Balance[this] := 0;
[L4962]               _balances_ERC20[this] := zeroRefintArr();
[L4963]               sum__balances0[this] := 0;
[L4964]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4965]               sum__allowances1[this] := 0;
[L4966]               _totalSupply_ERC20[this] := 0;
[L4996]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4997]   COND FALSE  !(revert)
[L6730]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6731]   COND FALSE  !(revert)
[L6734]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6450]   CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4726]   CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4711]               assume msgsender_MSG != null;
[L4712]               Balance[this] := 0;
[L4726]   RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4727]   COND FALSE  !(revert)
[L6450]   RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6451]   COND FALSE  !(revert)
[L6454]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6375]               assume msgsender_MSG != null;
[L6376]               Balance[this] := 0;
[L6378]   CALL        call __var_33 := FreshRefGenerator__success();
[L4652]               havoc newRef;
[L4653]               assume Alloc[newRef] == false;
[L4654]               Alloc[newRef] := true;
[L4655]               assume newRef != null;
[L6378]   RET         call __var_33 := FreshRefGenerator__success();
[L6379]   COND FALSE  !(revert)
[L6382]               _minters_MinterRole[this] := __var_33;
[L6384]   COND TRUE   DType[this] == RewardToken
[L6385]   CALL        call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6385]   RET         call __var_32 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6386]   COND FALSE  !(revert)
[L6407]   COND TRUE   DType[this] == RewardToken
[L6408]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6408]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_32);
[L6409]   COND FALSE  !(revert)
[L6454]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6455]   COND FALSE  !(revert)
[L6734]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6735]   COND FALSE  !(revert)
[L6738]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6691]               assume msgsender_MSG != null;
[L6692]               Balance[this] := 0;
[L6738]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6739]   COND FALSE  !(revert)
[L6874]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6875]   COND FALSE  !(revert)
[L6878]   CALL        call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6817]               assume msgsender_MSG != null;
[L6818]               Balance[this] := 0;
[L6819]               _cap_ERC20Capped[this] := 0;
[L6821]   COND FALSE  !(!(cap_s886 > 0))
[L6825]               _cap_ERC20Capped[this] := cap_s886;
[L6878]   RET         call ERC20Capped_ERC20Capped_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, cap_s886);
[L6879]   COND FALSE  !(revert)
[L7651]   RET         call ERC20Capped_ERC20Capped__success(this, msgsender_MSG, msgvalue_MSG, HARD_CAP_RewardToken[this]);
[L7652]   COND FALSE  !(revert)
[L7655]   CALL        call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7441]   CALL        call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7414]               assume msgsender_MSG != null;
[L7415]               Balance[this] := 0;
[L7417]               __var_48 := null;
[L7418]   COND FALSE  !(!(_store_s1208 != null))
[L7422]               assume DType[_store_s1208] == Storage;
[L7423]               __var_49 := _store_s1208;
[L7424]               store_Governable[this] := __var_49;
[L7441]   RET         call Governable_Governable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _store_s1208);
[L7442]   COND FALSE  !(revert)
[L7655]   RET         call Governable_Governable__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7656]   COND FALSE  !(revert)
[L7659]   CALL        call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7553]               assume msgsender_MSG != null;
[L7554]               Balance[this] := 0;
[L7555]               HARD_CAP_RewardToken[this] := nonlinearMul(5 * (1000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), 1000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7557]   COND TRUE   DType[this] == RewardToken
[L7558]   CALL        call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6598]   COND TRUE   DType[this] == RewardToken
[L6599]   CALL        call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L4740]               __ret_0_ := msgsender_MSG;
[L6599]   RET         call __var_37 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L6600]   COND FALSE  !(revert)
[L6621]   COND TRUE   DType[this] == RewardToken
[L6622]   CALL        call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6673]   CALL        call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6273]   CALL        call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6273]   RET         call __var_30 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s710, account_s710);
[L6274]   COND FALSE  !(revert)
[L6277]   COND FALSE  !(!__var_30)
[L6281]               M_Ref_bool[bearer_Roles.Role[role_s710]][account_s710] := false;
[L6673]   RET         call remove~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s838);
[L6674]   COND FALSE  !(revert)
[L6677]               assert { :EventEmitted "MinterRemoved_MinterRole" } true;
[L6622]   RET         call _removeMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_37);
[L6623]   COND FALSE  !(revert)
[L7558]   RET         call renounceMinter_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7559]   COND FALSE  !(revert)
[L7565]   COND TRUE   DType[this] == RewardToken
[L7566]   CALL        call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]               assume DType[store_Governable[this]] == Storage;
[L7498]               __var_54 := governance_Storage[store_Governable[this]];
[L7499]               __ret_0_ := __var_54;
[L7566]   RET         call __var_56 := governance_Governable__success(this, msgsender_MSG, msgvalue_MSG);
[L7567]   COND FALSE  !(revert)
[L7573]   COND TRUE   DType[this] == RewardToken
[L7574]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L6656]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6245]   CALL        call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6299]               __var_31 := null;
[L6300]   COND FALSE  !(!(account_s734 != null))
[L6304]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s734]][account_s734];
[L6245]   RET         call __var_29 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s686, account_s686);
[L6246]   COND FALSE  !(revert)
[L6249]   COND FALSE  !(!!__var_29)
[L6253]               M_Ref_bool[bearer_Roles.Role[role_s686]][account_s686] := true;
[L6656]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s822);
[L6657]   COND FALSE  !(revert)
[L6660]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L7574]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, __var_56);
[L7575]   COND FALSE  !(revert)
[L7659]   RET         call RewardToken_RewardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L7660]   COND FALSE  !(revert)
[L3201]   RET         call RewardToken_RewardToken__success(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L3202]               assume !revert && gas >= 0;
[L11231]  RET         call RewardToken_RewardToken(this, msgsender_MSG, msgvalue_MSG, _storage_s1301);
[L11232]              assume !revert && gas >= 0;
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND TRUE   __exception
[L486]                __tmp__Balance := Balance;
[L487]                __tmp__DType := DType;
[L488]                __tmp__Alloc := Alloc;
[L489]                __tmp__balance_ADDR := balance_ADDR;
[L490]                __tmp__M_Ref_int := M_Ref_int;
[L491]                __tmp__sum__balances0 := sum__balances0;
[L492]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]                __tmp__sum__allowances1 := sum__allowances1;
[L495]                __tmp__M_Ref_bool := M_Ref_bool;
[L496]                __tmp__sum := sum;
[L497]                __tmp__Length := Length;
[L498]                __tmp__now := now;
[L499]                __tmp___balances_ERC20 := _balances_ERC20;
[L500]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]                __tmp___minters_MinterRole := _minters_MinterRole;
[L504]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L505]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L506]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L507]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L508]                __tmp___owner_Ownable := _owner_Ownable;
[L509]                __tmp__governance_Storage := governance_Storage;
[L510]                __tmp__controller_Storage := controller_Storage;
[L511]                __tmp__store_Governable := store_Governable;
[L512]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L513]    CALL        call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5016]               __ret_0_ := __tmp___balances_ERC20[this][account_s293];
[L513]    RET         call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L514]                assume revert || gas < 0;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

Loop:
[L11235]  CALL        call CorralChoice_RewardToken(this);
[L11024]              havoc msgsender_MSG;
[L11025]              havoc msgvalue_MSG;
[L11026]              havoc choice;
[L11027]              havoc __ret_0_totalSupply;
[L11028]              havoc account_s293;
[L11029]              havoc __ret_0_balanceOf;
[L11030]              havoc recipient_s312;
[L11031]              havoc amount_s312;
[L11032]              havoc __ret_0_transfer;
[L11033]              havoc owner_s328;
[L11034]              havoc spender_s328;
[L11035]              havoc __ret_0_allowance;
[L11036]              havoc spender_s347;
[L11037]              havoc amount_s347;
[L11038]              havoc __ret_0_approve;
[L11039]              havoc sender_s383;
[L11040]              havoc recipient_s383;
[L11041]              havoc amount_s383;
[L11042]              havoc __ret_0_transferFrom;
[L11043]              havoc spender_s410;
[L11044]              havoc addedValue_s410;
[L11045]              havoc __ret_0_increaseAllowance;
[L11046]              havoc spender_s438;
[L11047]              havoc subtractedValue_s438;
[L11048]              havoc __ret_0_decreaseAllowance;
[L11049]              havoc account_s785;
[L11050]              havoc __ret_0_isMinter;
[L11051]              havoc _minter_s1315;
[L11052]              havoc account_s863;
[L11053]              havoc amount_s863;
[L11054]              havoc __ret_0_mint;
[L11055]              havoc cap_s886;
[L11056]              havoc __ret_0_cap;
[L11057]              havoc name_s952;
[L11058]              havoc symbol_s952;
[L11059]              havoc decimals_s952;
[L11060]              havoc __ret_0_name;
[L11061]              havoc __ret_0_symbol;
[L11062]              havoc __ret_0_decimals;
[L11063]              havoc __ret_0_governance;
[L11064]              havoc __ret_0_store;
[L11065]              havoc _store_s1208;
[L11066]              havoc _store_s1244;
[L11067]              havoc __ret_0_HARD_CAP;
[L11068]              havoc _storage_s1301;
[L11069]              havoc tmpNow;
[L11070]              havoc gas;
[L11071]              assume gas > 4000000 && gas <= 8000000;
[L11072]              tmpNow := now;
[L11073]              havoc now;
[L11074]              assume now > tmpNow;
[L11075]              assume msgsender_MSG != null;
[L11076]              assume DType[msgsender_MSG] != IERC20;
[L11077]              assume DType[msgsender_MSG] != Context;
[L11078]              assume DType[msgsender_MSG] != SafeMath;
[L11079]              assume DType[msgsender_MSG] != ERC20;
[L11080]              assume DType[msgsender_MSG] != Roles;
[L11081]              assume DType[msgsender_MSG] != MinterRole;
[L11082]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11083]              assume DType[msgsender_MSG] != ERC20Capped;
[L11084]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11085]              assume DType[msgsender_MSG] != Ownable;
[L11086]              assume DType[msgsender_MSG] != Storage;
[L11087]              assume DType[msgsender_MSG] != Governable;
[L11088]              assume DType[msgsender_MSG] != RewardToken;
[L11089]              Alloc[msgsender_MSG] := true;
[L11090]  COND FALSE  !(choice == 20)
[L11096]  COND TRUE   choice == 19
[L11097]              gas := gas - 21000;
[L11098]  COND TRUE   gas >= 0
[L11099]              assume msgvalue_MSG == 0;
[L11100]  CALL        call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume _balances_ERC20[this][account_s293] >= 0 && _balances_ERC20[this][account_s293] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_ERC200 := true;
[L2]                  call_balanceOf_ERC200 := false;
[L2]                  revert := revert_hold;
[L483]                havoc __exception;
[L484]                revert := false;
[L485]    COND TRUE   __exception
[L486]                __tmp__Balance := Balance;
[L487]                __tmp__DType := DType;
[L488]                __tmp__Alloc := Alloc;
[L489]                __tmp__balance_ADDR := balance_ADDR;
[L490]                __tmp__M_Ref_int := M_Ref_int;
[L491]                __tmp__sum__balances0 := sum__balances0;
[L492]                __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L493]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L494]                __tmp__sum__allowances1 := sum__allowances1;
[L495]                __tmp__M_Ref_bool := M_Ref_bool;
[L496]                __tmp__sum := sum;
[L497]                __tmp__Length := Length;
[L498]                __tmp__now := now;
[L499]                __tmp___balances_ERC20 := _balances_ERC20;
[L500]                __tmp___allowances_ERC20 := _allowances_ERC20;
[L501]                __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L502]                __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L503]                __tmp___minters_MinterRole := _minters_MinterRole;
[L504]                __tmp___cap_ERC20Capped := _cap_ERC20Capped;
[L505]                __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L506]                __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L507]                __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L508]                __tmp___owner_Ownable := _owner_Ownable;
[L509]                __tmp__governance_Storage := governance_Storage;
[L510]                __tmp__controller_Storage := controller_Storage;
[L511]                __tmp__store_Governable := store_Governable;
[L512]                __tmp__HARD_CAP_RewardToken := HARD_CAP_RewardToken;
[L513]    CALL        call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L5016]               __ret_0_ := __tmp___balances_ERC20[this][account_s293];
[L513]    RET         call __ret_0_ := balanceOf~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L514]                assume revert || gas < 0;
[L11100]  RET         call __ret_0_balanceOf := balanceOf~address_ERC20(this, msgsender_MSG, msgvalue_MSG, account_s293);
[L11235]  RET         call CorralChoice_RewardToken(this);

[2020-11-25 03:29:52,627 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 03:29:52,627 INFO  L82        PathProgramCache]: Analyzing trace with hash -255533138, now seen corresponding path program 1 times
[2020-11-25 03:29:52,628 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 03:29:52,647 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 03:29:52,841 INFO  L134       CoverageAnalysis]: Checked inductivity of 1673 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1673 trivial. 0 not checked.
[2020-11-25 03:29:52,841 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 03:29:52,841 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 03:29:52,841 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 03:29:52,841 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 03:29:52,841 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 03:29:52,842 INFO  L87              Difference]: Start difference. First operand 6770 states and 7957 transitions. cyclomatic complexity: 1190 Second operand 5 states.
[2020-11-25 03:29:53,241 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 03:29:53,241 INFO  L93              Difference]: Finished difference Result 4685 states and 5494 transitions.
[2020-11-25 03:29:53,241 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 03:29:53,241 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4685 states and 5494 transitions.
[2020-11-25 03:29:53,250 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:29:53,250 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4685 states to 0 states and 0 transitions.
[2020-11-25 03:29:53,250 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 03:29:53,250 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 03:29:53,250 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 03:29:53,250 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 03:29:53,250 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:29:53,250 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:29:53,250 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 03:29:53,250 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 03:29:53,250 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 03:29:53,250 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 03:29:53,250 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 03:29:53,253 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:29:53 BasicIcfg
[2020-11-25 03:29:53,253 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 03:29:53,254 INFO  L168              Benchmark]: Toolchain (without parser) took 14450.12 ms. Allocated memory was 1.0 GB in the beginning and 3.3 GB in the end (delta: 2.3 GB). Free memory was 924.5 MB in the beginning and 1.8 GB in the end (delta: -866.7 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 03:29:53,254 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 03:29:53,255 INFO  L168              Benchmark]: Boogie Preprocessor took 162.49 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.6 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:53,255 INFO  L168              Benchmark]: UtopiaSpecLang took 85.95 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 886.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:53,255 INFO  L168              Benchmark]: Boogie Printer took 30.21 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:53,255 INFO  L168              Benchmark]: RCFGBuilder took 1379.23 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 75.0 MB). Free memory was 881.5 MB in the beginning and 765.8 MB in the end (delta: 115.7 MB). Peak memory consumption was 190.6 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:53,256 INFO  L168              Benchmark]: UtopiaLTL2Aut took 28.01 ms. Allocated memory is still 1.1 GB. Free memory was 765.8 MB in the beginning and 756.0 MB in the end (delta: 9.8 MB). Peak memory consumption was 9.8 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:53,257 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3347.38 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 469.8 MB). Free memory was 756.0 MB in the beginning and 872.7 MB in the end (delta: -116.6 MB). Peak memory consumption was 353.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:53,257 INFO  L168              Benchmark]: BlockEncodingV2 took 291.89 ms. Allocated memory is still 1.6 GB. Free memory was 872.7 MB in the beginning and 706.6 MB in the end (delta: 166.1 MB). Peak memory consumption was 166.1 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:53,257 INFO  L168              Benchmark]: BuchiAutomizer took 9121.86 ms. Allocated memory was 1.6 GB in the beginning and 3.3 GB in the end (delta: 1.8 GB). Free memory was 706.6 MB in the beginning and 1.8 GB in the end (delta: -1.1 GB). Peak memory consumption was 674.9 MB. Max. memory is 15.3 GB.
[2020-11-25 03:29:53,260 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11012 locations, 20412 edges
  - StatisticsResult: Encoded RCFG
    10806 locations, 19838 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 162.49 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 897.6 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 85.95 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 886.9 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 30.21 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 881.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1379.23 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 75.0 MB). Free memory was 881.5 MB in the beginning and 765.8 MB in the end (delta: 115.7 MB). Peak memory consumption was 190.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 28.01 ms. Allocated memory is still 1.1 GB. Free memory was 765.8 MB in the beginning and 756.0 MB in the end (delta: 9.8 MB). Peak memory consumption was 9.8 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3347.38 ms. Allocated memory was 1.1 GB in the beginning and 1.6 GB in the end (delta: 469.8 MB). Free memory was 756.0 MB in the beginning and 872.7 MB in the end (delta: -116.6 MB). Peak memory consumption was 353.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 291.89 ms. Allocated memory is still 1.6 GB. Free memory was 872.7 MB in the beginning and 706.6 MB in the end (delta: 166.1 MB). Peak memory consumption was 166.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 9121.86 ms. Allocated memory was 1.6 GB in the beginning and 3.3 GB in the end (delta: 1.8 GB). Free memory was 706.6 MB in the beginning and 1.8 GB in the end (delta: -1.1 GB). Peak memory consumption was 674.9 MB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4291 locations, 6252 edges
  - StatisticsResult: BuchiProgram size
    11012 locations, 20412 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 12 terminating modules (12 trivial, 0 deterministic, 0 nondeterministic). 12 modules have a trivial ranking function, the largest among these consists of 8 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 9.0s and 13 iterations.  TraceHistogramMax:12. Analysis of lassos took 3.2s. Construction of modules took 3.0s. BÃ¼chi inclusion checks took 1.2s. Highest rank in rank-based complementation 0. Minimization of det autom 12. Minimization of nondet autom 0. Automata minimization 0.6s AutomataMinimizationTime, 11 MinimizatonAttempts, 1292 StatesRemovedByMinimization, 10 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 8073 states and ocurred in iteration 7.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 69591 SDtfs, 25527 SDslu, 110538 SDs, 0 SdLazy, 21080 SolverSat, 5128 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.0s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU12 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_balanceOf_ERC200) ==> ( <>(success_balanceOf_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
