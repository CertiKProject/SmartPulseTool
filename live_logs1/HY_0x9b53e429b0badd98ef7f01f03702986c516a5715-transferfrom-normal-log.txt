This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 17:47:29,941 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 17:47:29,943 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 17:47:29,954 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 17:47:29,955 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 17:47:29,955 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 17:47:29,956 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 17:47:29,958 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 17:47:29,959 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 17:47:29,960 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 17:47:29,961 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 17:47:29,961 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 17:47:29,962 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 17:47:29,962 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 17:47:29,963 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 17:47:29,964 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 17:47:29,965 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 17:47:29,966 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 17:47:29,967 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 17:47:29,968 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 17:47:29,969 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 17:47:29,970 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 17:47:29,972 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 17:47:29,972 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 17:47:29,972 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 17:47:29,973 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 17:47:29,973 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 17:47:29,974 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 17:47:29,974 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 17:47:29,974 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 17:47:29,975 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 17:47:29,975 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 17:47:29,976 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 17:47:29,976 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 17:47:29,977 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 17:47:29,977 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 17:47:29,977 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 17:47:29,978 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 17:47:29,978 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 17:47:29,978 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 17:47:29,979 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 17:47:29,979 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 17:47:29,988 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 17:47:29,988 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 17:47:29,989 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 17:47:29,989 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 17:47:29,989 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 17:47:29,989 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 17:47:29,989 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 17:47:29,989 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 17:47:29,989 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 17:47:29,989 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 17:47:29,990 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 17:47:29,990 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 17:47:29,990 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 17:47:29,990 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 17:47:29,990 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 17:47:29,990 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 17:47:29,990 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 17:47:29,990 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 17:47:29,990 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 17:47:29,991 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 17:47:29,991 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 17:47:29,991 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 17:47:29,991 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 17:47:29,991 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 17:47:29,991 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 17:47:29,991 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 17:47:30,021 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 17:47:30,035 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 17:47:30,038 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 17:47:30,039 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 17:47:30,039 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 17:47:30,040 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl
[2020-11-25 17:47:30,040 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl'
[2020-11-25 17:47:30,127 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 17:47:30,128 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 17:47:30,128 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 17:47:30,128 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 17:47:30,128 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 17:47:30,145 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/1) ...
[2020-11-25 17:47:30,147 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/1) ...
[2020-11-25 17:47:30,176 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/1) ...
[2020-11-25 17:47:30,177 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/1) ...
[2020-11-25 17:47:30,195 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/1) ...
[2020-11-25 17:47:30,205 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/1) ...
[2020-11-25 17:47:30,211 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/1) ...
[2020-11-25 17:47:30,220 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 17:47:30,220 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 17:47:30,220 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 17:47:30,222 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 17:47:30,226 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/1) ...
[2020-11-25 17:47:30,246 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(HY.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_HY[this][from] && value <= allowed_HY[this][from][msg.sender] && balances_HY[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HY[this][to] >= 0 && balances_HY[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HY[this][from] >= 0 &&  balances_HY[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_HY[this][from][msg.sender] >= 0 && allowed_HY[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HY.transferFrom(from, to, value), return == true && balances_HY[this][from] == old(balances_HY[this][from]) - value && balances_HY[this][to] == old(balances_HY[this][to]) + value && allowed_HY[this][from][msg.sender] == old(allowed_HY[this][from][msg.sender]) - value && _totalSupply_HY[this] == old(_totalSupply_HY[this]) && balances_HY[this][p1] == old(balances_HY[this][p1]) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3]) && symbol_HY[this] == old(symbol_HY[this]) && name_HY[this] == old(name_HY[this]) && decimals_HY[this] == old(decimals_HY[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 17:47:30,251 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(HY.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_HY[this][from] && value <= allowed_HY[this][from][msg.sender] && balances_HY[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HY[this][to] >= 0 && balances_HY[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HY[this][from] >= 0 &&  balances_HY[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_HY[this][from][msg.sender] >= 0 && allowed_HY[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HY.transferFrom(from, to, value), return == true && balances_HY[this][from] == old(balances_HY[this][from]) - value && balances_HY[this][to] == old(balances_HY[this][to]) + value && allowed_HY[this][from][msg.sender] == old(allowed_HY[this][from][msg.sender]) - value && _totalSupply_HY[this] == old(_totalSupply_HY[this]) && balances_HY[this][p1] == old(balances_HY[this][p1]) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3]) && symbol_HY[this] == old(symbol_HY[this]) && name_HY[this] == old(name_HY[this]) && decimals_HY[this] == old(decimals_HY[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 17:47:30,259 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(HY.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_HY[this][from] && value <= allowed_HY[this][from][msg.sender] && balances_HY[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HY[this][to] >= 0 && balances_HY[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HY[this][from] >= 0 &&  balances_HY[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_HY[this][from][msg.sender] >= 0 && allowed_HY[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HY.transferFrom(from, to, value), return == true && balances_HY[this][from] == old(balances_HY[this][from]) - value && balances_HY[this][to] == old(balances_HY[this][to]) + value && allowed_HY[this][from][msg.sender] == old(allowed_HY[this][from][msg.sender]) - value && _totalSupply_HY[this] == old(_totalSupply_HY[this]) && balances_HY[this][p1] == old(balances_HY[this][p1]) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3]) && symbol_HY[this] == old(symbol_HY[this]) && name_HY[this] == old(name_HY[this]) && decimals_HY[this] == old(decimals_HY[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 17:47:30,267 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s458 && p1!=to_s458 ) && ( p2!=from_s458 || p3!=msg.sender ) ) && from_s458!=to_s458 ) && tokens_s458<=balances_HY[this][from_s458] ) && tokens_s458<=allowed_HY[this][from_s458][msg.sender] ) && ( balances_HY[this][to_s458] + tokens_s458 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s458>=0 ) && tokens_s458<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_HY[this][to_s458]>=0 ) && balances_HY[this][to_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_HY[this][from_s458]>=0 ) && balances_HY[this][from_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_HY[this][from_s458][msg.sender]>=0 ) && allowed_HY[this][from_s458][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>],IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 17:47:30,270 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( success_s458==true && balances_HY[this][from_s458]==( ( old(balances_HY[this][from_s458]) ) - tokens_s458 ) ) && balances_HY[this][to_s458]==( ( old(balances_HY[this][to_s458]) ) + tokens_s458 ) ) && allowed_HY[this][from_s458][msg.sender]==( ( old(allowed_HY[this][from_s458][msg.sender]) ) - tokens_s458 ) ) && _totalSupply_HY[this]==( old(_totalSupply_HY[this]) ) ) && balances_HY[this][p1]==( old(balances_HY[this][p1]) ) ) && allowed_HY[this][p2][p3]==( old(allowed_HY[this][p2][p3]) ) ) && symbol_HY[this]==( old(symbol_HY[this]) ) ) && name_HY[this]==( old(name_HY[this]) ) ) && decimals_HY[this]==( old(decimals_HY[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s458,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_HY>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_HY,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_HY>]]]]]]
[2020-11-25 17:47:30,275 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(HY.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_HY[this][from] && value <= allowed_HY[this][from][msg.sender] && balances_HY[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HY[this][to] >= 0 && balances_HY[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_HY[this][from] >= 0 &&  balances_HY[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_HY[this][from][msg.sender] >= 0 && allowed_HY[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(HY.transferFrom(from, to, value), return == true && balances_HY[this][from] == old(balances_HY[this][from]) - value && balances_HY[this][to] == old(balances_HY[this][to]) + value && allowed_HY[this][from][msg.sender] == old(allowed_HY[this][from][msg.sender]) - value && _totalSupply_HY[this] == old(_totalSupply_HY[this]) && balances_HY[this][p1] == old(balances_HY[this][p1]) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3]) && symbol_HY[this] == old(symbol_HY[this]) && name_HY[this] == old(name_HY[this]) && decimals_HY[this] == old(decimals_HY[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 17:47:30,275 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_HY0) ==> ( <>AP(success_transferFrom_HY0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 17:47:30,284 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:47:30 PropertyContainer
[2020-11-25 17:47:30,284 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 17:47:30,285 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 17:47:30,285 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 17:47:30,285 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 17:47:30,286 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/2) ...
[2020-11-25 17:47:30,286 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 17:47:30,286 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 17:47:30,300 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:47:30" (2/2) ...
[2020-11-25 17:47:30,300 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 17:47:30,301 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 17:47:30,301 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 17:47:30,301 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 17:47:30,302 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/2) ...
[2020-11-25 17:47:30,364 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 17:47:30,364 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:47:30,364 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 17:47:30,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 17:47:30,364 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 17:47:30,364 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 17:47:30,365 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 17:47:30,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 17:47:30,365 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 17:47:30,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 17:47:30,365 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 17:47:30,365 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 17:47:30,365 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 17:47:30,365 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 17:47:30,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 17:47:30,366 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 17:47:30,366 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 17:47:30,366 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 17:47:30,366 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 17:47:30,366 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 17:47:30,366 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 17:47:30,366 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 17:47:30,366 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 17:47:30,366 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 17:47:30,367 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 17:47:30,367 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 17:47:30,367 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 17:47:30,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 17:47:30,367 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 17:47:30,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 17:47:30,367 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 17:47:30,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 17:47:30,367 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 17:47:30,367 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 17:47:30,367 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 17:47:30,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 17:47:30,368 INFO  L130     BoogieDeclarations]: Found specification of procedure HY_HY_NoBaseCtor__success
[2020-11-25 17:47:30,368 INFO  L130     BoogieDeclarations]: Found specification of procedure HY_HY
[2020-11-25 17:47:30,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure HY_HY
[2020-11-25 17:47:30,368 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HY
[2020-11-25 17:47:30,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HY
[2020-11-25 17:47:30,368 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HY
[2020-11-25 17:47:30,368 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HY
[2020-11-25 17:47:30,368 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HY
[2020-11-25 17:47:30,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HY
[2020-11-25 17:47:30,369 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HY
[2020-11-25 17:47:30,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HY
[2020-11-25 17:47:30,369 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HY
[2020-11-25 17:47:30,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HY
[2020-11-25 17:47:30,369 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HY
[2020-11-25 17:47:30,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HY
[2020-11-25 17:47:30,369 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_HY
[2020-11-25 17:47:30,369 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_HY
[2020-11-25 17:47:30,369 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_HY__success
[2020-11-25 17:47:30,370 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_HY
[2020-11-25 17:47:30,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_HY
[2020-11-25 17:47:30,370 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HY
[2020-11-25 17:47:30,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HY
[2020-11-25 17:47:30,370 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HY
[2020-11-25 17:47:30,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HY
[2020-11-25 17:47:30,370 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HY
[2020-11-25 17:47:30,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HY
[2020-11-25 17:47:30,370 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_HY
[2020-11-25 17:47:30,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_HY
[2020-11-25 17:47:30,371 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 17:47:30,371 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 17:47:30,371 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 17:47:30,371 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 17:47:30,371 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 17:47:30,371 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 17:47:30,371 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 17:47:30,371 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 17:47:30,371 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 17:47:30,371 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 17:47:30,372 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 17:47:30,372 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 17:47:30,372 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HY
[2020-11-25 17:47:30,372 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 17:47:30,372 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 17:47:30,372 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:47:30,372 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 17:47:30,372 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 17:47:30,372 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 17:47:30,373 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 17:47:30,373 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 17:47:30,373 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 17:47:30,373 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 17:47:30,373 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 17:47:30,373 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 17:47:30,373 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 17:47:30,373 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 17:47:30,373 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 17:47:30,373 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 17:47:30,374 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 17:47:30,374 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 17:47:30,374 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 17:47:30,374 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 17:47:30,374 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 17:47:30,374 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 17:47:30,374 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 17:47:30,374 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 17:47:30,374 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 17:47:30,374 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 17:47:30,375 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 17:47:30,375 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 17:47:30,375 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 17:47:30,375 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 17:47:30,375 INFO  L130     BoogieDeclarations]: Found specification of procedure HY_HY_NoBaseCtor__fail
[2020-11-25 17:47:30,375 INFO  L130     BoogieDeclarations]: Found specification of procedure HY_HY__success
[2020-11-25 17:47:30,375 INFO  L130     BoogieDeclarations]: Found specification of procedure HY_HY__fail
[2020-11-25 17:47:30,375 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HY__success
[2020-11-25 17:47:30,375 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HY__fail
[2020-11-25 17:47:30,376 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HY__success
[2020-11-25 17:47:30,376 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HY__fail
[2020-11-25 17:47:30,376 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HY__success
[2020-11-25 17:47:30,376 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HY__fail
[2020-11-25 17:47:30,376 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HY__success
[2020-11-25 17:47:30,376 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HY__fail
[2020-11-25 17:47:30,376 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HY__success
[2020-11-25 17:47:30,376 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HY__fail
[2020-11-25 17:47:30,376 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HY__success
[2020-11-25 17:47:30,376 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HY__fail
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_HY__success
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_HY__fail
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_HY__fail
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_HY__success
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_HY__fail
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HY__success
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_HY__fail
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HY__success
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure name_HY__fail
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HY__success
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_HY__fail
[2020-11-25 17:47:30,377 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_HY__success
[2020-11-25 17:47:30,378 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_HY__fail
[2020-11-25 17:47:30,378 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 17:47:30,378 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 17:47:30,378 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 17:47:30,378 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 17:47:30,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 17:47:30,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 17:47:30,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 17:47:30,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 17:47:30,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 17:47:30,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 17:47:30,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 17:47:30,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 17:47:30,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 17:47:30,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 17:47:30,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure HY_HY_NoBaseCtor__fail
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure HY_HY_NoBaseCtor__success
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure HY_HY__fail
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure HY_HY__success
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HY__fail
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HY__success
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HY__fail
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HY__success
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HY__fail
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HY__success
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HY__fail
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HY__success
[2020-11-25 17:47:30,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HY__fail
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HY__success
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HY__fail
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HY__success
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_HY__fail
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_HY__success
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_HY__fail
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_HY__success
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_HY__fail
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_HY__success
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HY__fail
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_HY__success
[2020-11-25 17:47:30,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HY__fail
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_HY__success
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HY__fail
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_HY__success
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_HY__fail
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_HY__success
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 17:47:30,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HY
[2020-11-25 17:47:30,384 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 17:47:30,385 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 17:47:30,385 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 17:47:30,744 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:47:30,820 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:47:30,821 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:47:30,821 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 17:47:31,062 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 17:47:31,063 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 17:47:31,065 INFO  L202        PluginConnector]: Adding new model HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:47:31 BoogieIcfgContainer
[2020-11-25 17:47:31,065 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:47:30" (2/2) ...
[2020-11-25 17:47:31,065 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 17:47:31,065 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@409c683f and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:47:31, skipping insertion in model container
[2020-11-25 17:47:31,065 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 17:47:31,066 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 17:47:31,066 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 17:47:31,067 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 17:47:31,067 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/3) ...
[2020-11-25 17:47:31,068 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@fab09f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:47:31, skipping insertion in model container
[2020-11-25 17:47:31,068 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:47:30" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 17:47:31,107 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:47:31 NWAContainer
[2020-11-25 17:47:31,107 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 17:47:31,108 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 17:47:31,108 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 17:47:31,109 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 17:47:31,110 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:47:31" (3/4) ...
[2020-11-25 17:47:31,110 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2d3f7e1f and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:47:31, skipping insertion in model container
[2020-11-25 17:47:31,110 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:47:31" (4/4) ...
[2020-11-25 17:47:31,114 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 17:47:31,117 INFO  L110   BuchiProductObserver]: Initial RCFG 1566 locations, 1978 edges
[2020-11-25 17:47:31,118 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 17:47:31,132 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 17:47:32,477 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 17:47:32,482 INFO  L110   BuchiProductObserver]: BuchiProgram size 3724 locations, 6408 edges
[2020-11-25 17:47:32,482 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:47:32 BoogieIcfgContainer
[2020-11-25 17:47:32,482 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 17:47:32,483 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 17:47:32,483 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 17:47:32,484 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 17:47:32,485 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:47:32" (1/1) ...
[2020-11-25 17:47:32,563 INFO  L313           BlockEncoder]: Initial Icfg 3724 locations, 6408 edges
[2020-11-25 17:47:32,563 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 17:47:32,563 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 17:47:32,564 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 17:47:32,564 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 17:47:32,575 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 17:47:32,583 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-25 17:47:32,596 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 17:47:32,602 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 17:47:32,605 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 17:47:32,606 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 17:47:32,610 INFO  L313           BlockEncoder]: Encoded RCFG 3664 locations, 6248 edges
[2020-11-25 17:47:32,610 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:47:32 BasicIcfg
[2020-11-25 17:47:32,611 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 17:47:32,611 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 17:47:32,611 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 17:47:32,613 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 17:47:32,613 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:47:32,614 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 05:47:30" (1/6) ...
[2020-11-25 17:47:32,615 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2f364351 and model type HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:47:32, skipping insertion in model container
[2020-11-25 17:47:32,615 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:47:32,615 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 05:47:30" (2/6) ...
[2020-11-25 17:47:32,616 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2f364351 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:47:32, skipping insertion in model container
[2020-11-25 17:47:32,616 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:47:32,616 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 05:47:31" (3/6) ...
[2020-11-25 17:47:32,616 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2f364351 and model type HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:47:32, skipping insertion in model container
[2020-11-25 17:47:32,616 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:47:32,616 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 05:47:31" (4/6) ...
[2020-11-25 17:47:32,616 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2f364351 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 05:47:32, skipping insertion in model container
[2020-11-25 17:47:32,616 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:47:32,616 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 05:47:32" (5/6) ...
[2020-11-25 17:47:32,616 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2f364351 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 05:47:32, skipping insertion in model container
[2020-11-25 17:47:32,616 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 17:47:32,616 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 05:47:32" (6/6) ...
[2020-11-25 17:47:32,618 INFO  L404   chiAutomizerObserver]: Analyzing ICFG HY_0x9b53e429b0badd98ef7f01f03702986c516a5715_transferfrom-normal.bpl_BEv2
[2020-11-25 17:47:32,652 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 17:47:32,653 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 17:47:32,653 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 17:47:32,653 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 17:47:32,653 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 17:47:32,653 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 17:47:32,653 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 17:47:32,653 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 17:47:32,653 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 17:47:32,683 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3664 states.
[2020-11-25 17:47:32,734 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:47:32,734 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:32,735 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:32,742 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:32,743 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:32,743 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 17:47:32,743 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3664 states.
[2020-11-25 17:47:32,760 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:47:32,760 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:32,760 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:32,761 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:32,762 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:32,775 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:32,775 INFO  L82        PathProgramCache]: Analyzing trace with hash -1107752982, now seen corresponding path program 1 times
[2020-11-25 17:47:32,779 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:32,800 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:32,837 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:47:32,839 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:47:32,839 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 17:47:33,022 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:33,030 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 17:47:33,031 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 17:47:33,032 INFO  L87              Difference]: Start difference. First operand 3664 states. Second operand 3 states.
[2020-11-25 17:47:33,179 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:33,179 INFO  L93              Difference]: Finished difference Result 2517 states and 2746 transitions.
[2020-11-25 17:47:33,179 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 17:47:33,180 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2517 states and 2746 transitions.
[2020-11-25 17:47:33,190 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:47:33,208 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2517 states to 2517 states and 2746 transitions.
[2020-11-25 17:47:33,208 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 17:47:33,210 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 858
[2020-11-25 17:47:33,211 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2517 states and 2746 transitions.
[2020-11-25 17:47:33,217 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:33,217 INFO  L728         BuchiCegarLoop]: Abstraction has 2517 states and 2746 transitions.
[2020-11-25 17:47:33,230 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2517 states and 2746 transitions.
[2020-11-25 17:47:33,270 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2517 to 2517.
[2020-11-25 17:47:33,270 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2517 states.
[2020-11-25 17:47:33,275 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2517 states to 2517 states and 2746 transitions.
[2020-11-25 17:47:33,276 INFO  L751         BuchiCegarLoop]: Abstraction has 2517 states and 2746 transitions.
[2020-11-25 17:47:33,276 INFO  L631         BuchiCegarLoop]: Abstraction has 2517 states and 2746 transitions.
[2020-11-25 17:47:33,276 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 17:47:33,276 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2517 states and 2746 transitions.
[2020-11-25 17:47:33,282 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:47:33,283 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:33,283 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:33,284 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:33,285 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND TRUE   !(b_s45 <= a_s45)
[L1996]              revert := true;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND TRUE   revert
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND TRUE   !(b_s45 <= a_s45)
[L1996]              revert := true;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND TRUE   revert
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:33,289 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:33,289 INFO  L82        PathProgramCache]: Analyzing trace with hash 672770810, now seen corresponding path program 1 times
[2020-11-25 17:47:33,290 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:33,302 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:33,323 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:47:33,323 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:47:33,323 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 17:47:33,324 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:33,325 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 17:47:33,325 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 17:47:33,325 INFO  L87              Difference]: Start difference. First operand 2517 states and 2746 transitions. cyclomatic complexity: 231 Second operand 4 states.
[2020-11-25 17:47:33,738 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:33,739 INFO  L93              Difference]: Finished difference Result 3737 states and 4238 transitions.
[2020-11-25 17:47:33,739 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 17:47:33,739 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3737 states and 4238 transitions.
[2020-11-25 17:47:33,757 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 17:47:33,775 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3737 states to 3617 states and 4110 transitions.
[2020-11-25 17:47:33,775 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1180
[2020-11-25 17:47:33,777 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1190
[2020-11-25 17:47:33,777 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3617 states and 4110 transitions.
[2020-11-25 17:47:33,782 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:33,782 INFO  L728         BuchiCegarLoop]: Abstraction has 3617 states and 4110 transitions.
[2020-11-25 17:47:33,785 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3617 states and 4110 transitions.
[2020-11-25 17:47:33,813 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3617 to 2553.
[2020-11-25 17:47:33,813 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2553 states.
[2020-11-25 17:47:33,815 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2553 states to 2553 states and 2738 transitions.
[2020-11-25 17:47:33,815 INFO  L751         BuchiCegarLoop]: Abstraction has 2553 states and 2738 transitions.
[2020-11-25 17:47:33,815 INFO  L631         BuchiCegarLoop]: Abstraction has 2553 states and 2738 transitions.
[2020-11-25 17:47:33,815 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 17:47:33,816 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2553 states and 2738 transitions.
[2020-11-25 17:47:33,822 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:47:33,822 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:33,822 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:33,823 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:33,823 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:33,827 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:33,827 INFO  L82        PathProgramCache]: Analyzing trace with hash 1623810840, now seen corresponding path program 1 times
[2020-11-25 17:47:33,828 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:33,840 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:34,020 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 17:47:34,020 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:47:34,021 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 17:47:34,021 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:34,021 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 17:47:34,022 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=181, Unknown=0, NotChecked=0, Total=210
[2020-11-25 17:47:34,022 INFO  L87              Difference]: Start difference. First operand 2553 states and 2738 transitions. cyclomatic complexity: 187 Second operand 15 states.
[2020-11-25 17:47:35,741 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:35,741 INFO  L93              Difference]: Finished difference Result 2789 states and 3023 transitions.
[2020-11-25 17:47:35,741 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 17:47:35,742 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2789 states and 3023 transitions.
[2020-11-25 17:47:35,749 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 17:47:35,757 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2789 states to 2789 states and 3023 transitions.
[2020-11-25 17:47:35,757 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 971
[2020-11-25 17:47:35,757 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 971
[2020-11-25 17:47:35,758 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2789 states and 3023 transitions.
[2020-11-25 17:47:35,760 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:35,760 INFO  L728         BuchiCegarLoop]: Abstraction has 2789 states and 3023 transitions.
[2020-11-25 17:47:35,763 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2789 states and 3023 transitions.
[2020-11-25 17:47:35,783 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2789 to 2706.
[2020-11-25 17:47:35,784 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2706 states.
[2020-11-25 17:47:35,786 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2706 states to 2706 states and 2908 transitions.
[2020-11-25 17:47:35,786 INFO  L751         BuchiCegarLoop]: Abstraction has 2706 states and 2908 transitions.
[2020-11-25 17:47:35,786 INFO  L631         BuchiCegarLoop]: Abstraction has 2706 states and 2908 transitions.
[2020-11-25 17:47:35,786 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 17:47:35,786 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2706 states and 2908 transitions.
[2020-11-25 17:47:35,791 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:47:35,791 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:35,791 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:35,793 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:35,794 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][from_s458];
[L2458]              balances_HY[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][from_s458];
[L2460]  COND TRUE   DType[this] == HY
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_HY[this][from_s458][msgsender_MSG];
[L2469]              allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_HY[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == HY
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s458];
[L2480]              balances_HY[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_HY" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:35,797 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:35,797 INFO  L82        PathProgramCache]: Analyzing trace with hash -328916030, now seen corresponding path program 1 times
[2020-11-25 17:47:35,798 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:35,856 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:36,713 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification. DAG size of input: 147 DAG size of output: 92
[2020-11-25 17:47:37,253 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 17:47:37,253 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:47:37,253 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 17:47:37,254 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:37,254 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 17:47:37,254 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=65, Invalid=691, Unknown=0, NotChecked=0, Total=756
[2020-11-25 17:47:37,254 INFO  L87              Difference]: Start difference. First operand 2706 states and 2908 transitions. cyclomatic complexity: 206 Second operand 28 states.
[2020-11-25 17:47:43,845 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:43,846 INFO  L93              Difference]: Finished difference Result 2774 states and 3019 transitions.
[2020-11-25 17:47:43,846 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 17:47:43,846 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2774 states and 3019 transitions.
[2020-11-25 17:47:43,851 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 17:47:43,858 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2774 states to 2774 states and 3019 transitions.
[2020-11-25 17:47:43,858 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 987
[2020-11-25 17:47:43,859 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 987
[2020-11-25 17:47:43,859 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2774 states and 3019 transitions.
[2020-11-25 17:47:43,861 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:43,861 INFO  L728         BuchiCegarLoop]: Abstraction has 2774 states and 3019 transitions.
[2020-11-25 17:47:43,863 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2774 states and 3019 transitions.
[2020-11-25 17:47:43,892 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2774 to 2757.
[2020-11-25 17:47:43,892 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2757 states.
[2020-11-25 17:47:43,896 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2757 states to 2757 states and 2974 transitions.
[2020-11-25 17:47:43,896 INFO  L751         BuchiCegarLoop]: Abstraction has 2757 states and 2974 transitions.
[2020-11-25 17:47:43,896 INFO  L631         BuchiCegarLoop]: Abstraction has 2757 states and 2974 transitions.
[2020-11-25 17:47:43,896 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 17:47:43,896 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2757 states and 2974 transitions.
[2020-11-25 17:47:43,901 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 17:47:43,901 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:43,901 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:43,902 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:43,902 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HY[this][from_s458];
[L2416]              __tmp__balances_HY[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HY[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == HY
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:43,906 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:43,907 INFO  L82        PathProgramCache]: Analyzing trace with hash 435732028, now seen corresponding path program 1 times
[2020-11-25 17:47:43,907 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:43,918 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:44,013 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 17:47:44,014 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:47:44,014 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 17:47:44,014 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:44,014 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 17:47:44,014 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 17:47:44,015 INFO  L87              Difference]: Start difference. First operand 2757 states and 2974 transitions. cyclomatic complexity: 223 Second operand 14 states.
[2020-11-25 17:47:45,307 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:45,308 INFO  L93              Difference]: Finished difference Result 2841 states and 3112 transitions.
[2020-11-25 17:47:45,308 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 17:47:45,308 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2841 states and 3112 transitions.
[2020-11-25 17:47:45,314 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 17:47:45,321 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2841 states to 2841 states and 3112 transitions.
[2020-11-25 17:47:45,321 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 996
[2020-11-25 17:47:45,321 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 996
[2020-11-25 17:47:45,321 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2841 states and 3112 transitions.
[2020-11-25 17:47:45,323 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:45,324 INFO  L728         BuchiCegarLoop]: Abstraction has 2841 states and 3112 transitions.
[2020-11-25 17:47:45,326 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2841 states and 3112 transitions.
[2020-11-25 17:47:45,341 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2841 to 2757.
[2020-11-25 17:47:45,342 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2757 states.
[2020-11-25 17:47:45,344 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2757 states to 2757 states and 2974 transitions.
[2020-11-25 17:47:45,344 INFO  L751         BuchiCegarLoop]: Abstraction has 2757 states and 2974 transitions.
[2020-11-25 17:47:45,344 INFO  L631         BuchiCegarLoop]: Abstraction has 2757 states and 2974 transitions.
[2020-11-25 17:47:45,344 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 17:47:45,344 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2757 states and 2974 transitions.
[2020-11-25 17:47:45,347 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 17:47:45,347 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:45,347 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:45,348 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:45,348 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HY[this][from_s458];
[L2416]              __tmp__balances_HY[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HY[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == HY
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_HY[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_HY[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == HY
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][to_s458], tokens_s458);
[L2431]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HY[this][from_s458];
[L2416]              __tmp__balances_HY[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HY[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == HY
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_HY[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_HY[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == HY
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][to_s458], tokens_s458);
[L2431]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:45,351 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:45,351 INFO  L82        PathProgramCache]: Analyzing trace with hash 242516943, now seen corresponding path program 1 times
[2020-11-25 17:47:45,352 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:45,360 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:45,523 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 17:47:45,523 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:47:45,523 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-25 17:47:45,523 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:45,523 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 17:47:45,523 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=42, Invalid=338, Unknown=0, NotChecked=0, Total=380
[2020-11-25 17:47:45,524 INFO  L87              Difference]: Start difference. First operand 2757 states and 2974 transitions. cyclomatic complexity: 223 Second operand 20 states.
[2020-11-25 17:47:48,275 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:48,275 INFO  L93              Difference]: Finished difference Result 2867 states and 3148 transitions.
[2020-11-25 17:47:48,275 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-25 17:47:48,275 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2867 states and 3148 transitions.
[2020-11-25 17:47:48,280 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 17:47:48,287 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2867 states to 2867 states and 3148 transitions.
[2020-11-25 17:47:48,287 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1009
[2020-11-25 17:47:48,288 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1009
[2020-11-25 17:47:48,288 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2867 states and 3148 transitions.
[2020-11-25 17:47:48,290 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:48,290 INFO  L728         BuchiCegarLoop]: Abstraction has 2867 states and 3148 transitions.
[2020-11-25 17:47:48,292 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2867 states and 3148 transitions.
[2020-11-25 17:47:48,309 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2867 to 2775.
[2020-11-25 17:47:48,309 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2775 states.
[2020-11-25 17:47:48,311 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2775 states to 2775 states and 2999 transitions.
[2020-11-25 17:47:48,311 INFO  L751         BuchiCegarLoop]: Abstraction has 2775 states and 2999 transitions.
[2020-11-25 17:47:48,311 INFO  L631         BuchiCegarLoop]: Abstraction has 2775 states and 2999 transitions.
[2020-11-25 17:47:48,312 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 17:47:48,312 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2775 states and 2999 transitions.
[2020-11-25 17:47:48,315 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 17:47:48,315 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:48,315 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:48,316 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:48,316 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HY[this][from_s458];
[L2416]              __tmp__balances_HY[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HY[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == HY
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_HY[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_HY[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == HY
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND FALSE  !(!(c_s23 >= a_s23))
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][to_s458], tokens_s458);
[L2431]  COND FALSE  !(revert)
[L2437]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HY[this][to_s458];
[L2438]              __tmp__balances_HY[this][to_s458] := __var_7;
[L2439]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HY[this][to_s458];
[L2440]              success_s458 := true;
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HY[this][from_s458];
[L2416]              __tmp__balances_HY[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HY[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == HY
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_HY[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_HY[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == HY
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND FALSE  !(!(c_s23 >= a_s23))
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][to_s458], tokens_s458);
[L2431]  COND FALSE  !(revert)
[L2437]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HY[this][to_s458];
[L2438]              __tmp__balances_HY[this][to_s458] := __var_7;
[L2439]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HY[this][to_s458];
[L2440]              success_s458 := true;
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:48,319 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:48,320 INFO  L82        PathProgramCache]: Analyzing trace with hash -1870658472, now seen corresponding path program 1 times
[2020-11-25 17:47:48,320 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:48,328 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:48,351 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 17:47:48,351 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:47:48,351 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 17:47:48,351 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:48,351 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 17:47:48,351 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 17:47:48,352 INFO  L87              Difference]: Start difference. First operand 2775 states and 2999 transitions. cyclomatic complexity: 230 Second operand 5 states.
[2020-11-25 17:47:48,669 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:48,669 INFO  L93              Difference]: Finished difference Result 3511 states and 3978 transitions.
[2020-11-25 17:47:48,669 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 17:47:48,669 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3511 states and 3978 transitions.
[2020-11-25 17:47:48,677 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 17:47:48,686 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3511 states to 2702 states and 3166 transitions.
[2020-11-25 17:47:48,686 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 767
[2020-11-25 17:47:48,687 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 767
[2020-11-25 17:47:48,687 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2702 states and 3166 transitions.
[2020-11-25 17:47:48,690 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:48,690 INFO  L728         BuchiCegarLoop]: Abstraction has 2702 states and 3166 transitions.
[2020-11-25 17:47:48,691 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2702 states and 3166 transitions.
[2020-11-25 17:47:48,707 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2702 to 1943.
[2020-11-25 17:47:48,707 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1943 states.
[2020-11-25 17:47:48,708 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1943 states to 1943 states and 2112 transitions.
[2020-11-25 17:47:48,708 INFO  L751         BuchiCegarLoop]: Abstraction has 1943 states and 2112 transitions.
[2020-11-25 17:47:48,709 INFO  L631         BuchiCegarLoop]: Abstraction has 1943 states and 2112 transitions.
[2020-11-25 17:47:48,709 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 17:47:48,709 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1943 states and 2112 transitions.
[2020-11-25 17:47:48,711 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:47:48,711 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:48,711 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:48,712 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:48,712 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HY[this][msgsender_MSG][spender_s399];
[L2395]              allowed_HY[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HY[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_HY" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_HY(this);
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HY[this][msgsender_MSG][spender_s399];
[L2395]              allowed_HY[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HY[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_HY" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:48,715 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:48,715 INFO  L82        PathProgramCache]: Analyzing trace with hash -411266869, now seen corresponding path program 1 times
[2020-11-25 17:47:48,715 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:48,724 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:48,766 INFO  L134       CoverageAnalysis]: Checked inductivity of 69 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-11-25 17:47:48,766 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:47:48,766 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:47:48,766 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:48,766 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:47:48,766 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:47:48,766 INFO  L87              Difference]: Start difference. First operand 1943 states and 2112 transitions. cyclomatic complexity: 174 Second operand 7 states.
[2020-11-25 17:47:49,111 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:49,111 INFO  L93              Difference]: Finished difference Result 2016 states and 2218 transitions.
[2020-11-25 17:47:49,111 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 17:47:49,111 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2016 states and 2218 transitions.
[2020-11-25 17:47:49,115 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 17:47:49,120 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2016 states to 2016 states and 2218 transitions.
[2020-11-25 17:47:49,120 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 626
[2020-11-25 17:47:49,120 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 626
[2020-11-25 17:47:49,120 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2016 states and 2218 transitions.
[2020-11-25 17:47:49,122 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:49,122 INFO  L728         BuchiCegarLoop]: Abstraction has 2016 states and 2218 transitions.
[2020-11-25 17:47:49,124 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2016 states and 2218 transitions.
[2020-11-25 17:47:49,134 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2016 to 1947.
[2020-11-25 17:47:49,134 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1947 states.
[2020-11-25 17:47:49,136 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1947 states to 1947 states and 2116 transitions.
[2020-11-25 17:47:49,136 INFO  L751         BuchiCegarLoop]: Abstraction has 1947 states and 2116 transitions.
[2020-11-25 17:47:49,136 INFO  L631         BuchiCegarLoop]: Abstraction has 1947 states and 2116 transitions.
[2020-11-25 17:47:49,136 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 17:47:49,136 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1947 states and 2116 transitions.
[2020-11-25 17:47:49,138 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:47:49,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:49,138 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:49,139 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:49,139 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HY[this][msgsender_MSG][spender_s399];
[L2395]              allowed_HY[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HY[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_HY" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_HY(this);
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][from_s458];
[L2458]              balances_HY[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][from_s458];
[L2460]  COND TRUE   DType[this] == HY
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_HY[this][from_s458][msgsender_MSG];
[L2469]              allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_HY[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == HY
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s458];
[L2480]              balances_HY[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_HY" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:49,142 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:49,142 INFO  L82        PathProgramCache]: Analyzing trace with hash -1544496075, now seen corresponding path program 1 times
[2020-11-25 17:47:49,143 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:49,193 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:49,885 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 17:47:49,885 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:47:49,885 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 17:47:49,885 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:49,885 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 17:47:49,886 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=58, Invalid=592, Unknown=0, NotChecked=0, Total=650
[2020-11-25 17:47:49,886 INFO  L87              Difference]: Start difference. First operand 1947 states and 2116 transitions. cyclomatic complexity: 174 Second operand 26 states.
[2020-11-25 17:47:54,378 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:54,378 INFO  L93              Difference]: Finished difference Result 1973 states and 2160 transitions.
[2020-11-25 17:47:54,379 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 17:47:54,379 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1973 states and 2160 transitions.
[2020-11-25 17:47:54,384 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 17:47:54,389 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1973 states to 1973 states and 2160 transitions.
[2020-11-25 17:47:54,389 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 609
[2020-11-25 17:47:54,390 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 609
[2020-11-25 17:47:54,390 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1973 states and 2160 transitions.
[2020-11-25 17:47:54,391 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:54,391 INFO  L728         BuchiCegarLoop]: Abstraction has 1973 states and 2160 transitions.
[2020-11-25 17:47:54,394 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1973 states and 2160 transitions.
[2020-11-25 17:47:54,410 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1973 to 1968.
[2020-11-25 17:47:54,410 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1968 states.
[2020-11-25 17:47:54,412 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1968 states to 1968 states and 2155 transitions.
[2020-11-25 17:47:54,412 INFO  L751         BuchiCegarLoop]: Abstraction has 1968 states and 2155 transitions.
[2020-11-25 17:47:54,412 INFO  L631         BuchiCegarLoop]: Abstraction has 1968 states and 2155 transitions.
[2020-11-25 17:47:54,412 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 17:47:54,412 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1968 states and 2155 transitions.
[2020-11-25 17:47:54,415 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 17:47:54,415 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:54,415 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:54,416 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:54,416 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HY[this][msgsender_MSG][spender_s399];
[L2395]              allowed_HY[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HY[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_HY" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_HY(this);
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HY[this][from_s458];
[L2416]              __tmp__balances_HY[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HY[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == HY
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HY[this][msgsender_MSG][spender_s399];
[L2395]              allowed_HY[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HY[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_HY" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:54,420 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:54,420 INFO  L82        PathProgramCache]: Analyzing trace with hash -101845137, now seen corresponding path program 1 times
[2020-11-25 17:47:54,421 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:54,443 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:54,561 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 17:47:54,561 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:47:54,561 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 17:47:54,562 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:54,562 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 17:47:54,562 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 17:47:54,562 INFO  L87              Difference]: Start difference. First operand 1968 states and 2155 transitions. cyclomatic complexity: 194 Second operand 7 states.
[2020-11-25 17:47:54,890 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:54,890 INFO  L93              Difference]: Finished difference Result 2010 states and 2232 transitions.
[2020-11-25 17:47:54,890 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 17:47:54,890 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2010 states and 2232 transitions.
[2020-11-25 17:47:54,894 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 17:47:54,899 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2010 states to 2010 states and 2232 transitions.
[2020-11-25 17:47:54,899 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 627
[2020-11-25 17:47:54,899 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 627
[2020-11-25 17:47:54,899 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2010 states and 2232 transitions.
[2020-11-25 17:47:54,902 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:54,902 INFO  L728         BuchiCegarLoop]: Abstraction has 2010 states and 2232 transitions.
[2020-11-25 17:47:54,906 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2010 states and 2232 transitions.
[2020-11-25 17:47:54,924 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2010 to 1940.
[2020-11-25 17:47:54,924 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1940 states.
[2020-11-25 17:47:54,927 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1940 states to 1940 states and 2102 transitions.
[2020-11-25 17:47:54,927 INFO  L751         BuchiCegarLoop]: Abstraction has 1940 states and 2102 transitions.
[2020-11-25 17:47:54,927 INFO  L631         BuchiCegarLoop]: Abstraction has 1940 states and 2102 transitions.
[2020-11-25 17:47:54,927 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 17:47:54,927 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1940 states and 2102 transitions.
[2020-11-25 17:47:54,930 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:47:54,930 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:54,930 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:54,931 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:54,932 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HY[this][msgsender_MSG][spender_s399];
[L2395]              allowed_HY[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HY[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_HY" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_HY(this);
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_HY_lvl0 := alloc_allowed_HY_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_HY := symbol_HY;
[L1064]              __tmp__name_HY := name_HY;
[L1065]              __tmp__decimals_HY := decimals_HY;
[L1066]              __tmp___totalSupply_HY := _totalSupply_HY;
[L1067]              __tmp__balances_HY := balances_HY;
[L1068]              __tmp__allowed_HY := allowed_HY;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == HY
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_HY[this][from_s458];
[L2416]              __tmp__balances_HY[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_HY[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == HY
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_HY[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_HY[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == HY
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_HY[this][to_s458], tokens_s458);
[L2431]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_HY__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:54,935 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:54,936 INFO  L82        PathProgramCache]: Analyzing trace with hash -441248388, now seen corresponding path program 1 times
[2020-11-25 17:47:54,936 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:54,951 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:55,042 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-11-25 17:47:55,042 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 17:47:55,043 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 17:47:55,043 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:55,043 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 17:47:55,043 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 17:47:55,043 INFO  L87              Difference]: Start difference. First operand 1940 states and 2102 transitions. cyclomatic complexity: 167 Second operand 9 states.
[2020-11-25 17:47:55,549 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:55,549 INFO  L93              Difference]: Finished difference Result 1994 states and 2169 transitions.
[2020-11-25 17:47:55,549 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 17:47:55,549 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1994 states and 2169 transitions.
[2020-11-25 17:47:55,553 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:47:55,557 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1994 states to 1954 states and 2127 transitions.
[2020-11-25 17:47:55,557 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 618
[2020-11-25 17:47:55,557 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 618
[2020-11-25 17:47:55,557 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1954 states and 2127 transitions.
[2020-11-25 17:47:55,558 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:55,558 INFO  L728         BuchiCegarLoop]: Abstraction has 1954 states and 2127 transitions.
[2020-11-25 17:47:55,560 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1954 states and 2127 transitions.
[2020-11-25 17:47:55,567 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1954 to 1860.
[2020-11-25 17:47:55,567 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1860 states.
[2020-11-25 17:47:55,568 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1860 states to 1860 states and 2007 transitions.
[2020-11-25 17:47:55,568 INFO  L751         BuchiCegarLoop]: Abstraction has 1860 states and 2007 transitions.
[2020-11-25 17:47:55,568 INFO  L631         BuchiCegarLoop]: Abstraction has 1860 states and 2007 transitions.
[2020-11-25 17:47:55,568 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 17:47:55,569 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1860 states and 2007 transitions.
[2020-11-25 17:47:55,570 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:47:55,570 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:55,570 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:55,571 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:55,571 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == HY
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][msgsender_MSG];
[L2365]              balances_HY[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == HY
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s371];
[L2376]              balances_HY[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_HY" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_HY(this);
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][from_s458];
[L2458]              balances_HY[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][from_s458];
[L2460]  COND TRUE   DType[this] == HY
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_HY[this][from_s458][msgsender_MSG];
[L2469]              allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_HY[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == HY
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s458];
[L2480]              balances_HY[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_HY" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:55,574 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:55,574 INFO  L82        PathProgramCache]: Analyzing trace with hash -749673929, now seen corresponding path program 1 times
[2020-11-25 17:47:55,575 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:55,637 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:47:56,088 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-11-25 17:47:56,089 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:47:56,089 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 17:47:56,089 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:47:56,089 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 17:47:56,089 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=537, Unknown=0, NotChecked=0, Total=600
[2020-11-25 17:47:56,089 INFO  L87              Difference]: Start difference. First operand 1860 states and 2007 transitions. cyclomatic complexity: 150 Second operand 25 states.
[2020-11-25 17:47:59,413 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:47:59,413 INFO  L93              Difference]: Finished difference Result 1891 states and 2048 transitions.
[2020-11-25 17:47:59,414 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 17:47:59,414 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1891 states and 2048 transitions.
[2020-11-25 17:47:59,420 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:47:59,425 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1891 states to 1891 states and 2048 transitions.
[2020-11-25 17:47:59,425 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 585
[2020-11-25 17:47:59,426 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 585
[2020-11-25 17:47:59,426 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1891 states and 2048 transitions.
[2020-11-25 17:47:59,427 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:47:59,427 INFO  L728         BuchiCegarLoop]: Abstraction has 1891 states and 2048 transitions.
[2020-11-25 17:47:59,429 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1891 states and 2048 transitions.
[2020-11-25 17:47:59,442 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1891 to 1868.
[2020-11-25 17:47:59,443 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1868 states.
[2020-11-25 17:47:59,445 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1868 states to 1868 states and 2025 transitions.
[2020-11-25 17:47:59,445 INFO  L751         BuchiCegarLoop]: Abstraction has 1868 states and 2025 transitions.
[2020-11-25 17:47:59,445 INFO  L631         BuchiCegarLoop]: Abstraction has 1868 states and 2025 transitions.
[2020-11-25 17:47:59,445 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 17:47:59,445 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1868 states and 2025 transitions.
[2020-11-25 17:47:59,448 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 17:47:59,448 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:47:59,448 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:47:59,450 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:47:59,450 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][from_s458];
[L2458]              balances_HY[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][from_s458];
[L2460]  COND TRUE   DType[this] == HY
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_HY[this][from_s458][msgsender_MSG];
[L2469]              allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_HY[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == HY
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s458];
[L2480]              balances_HY[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_HY" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][from_s458];
[L2458]              balances_HY[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][from_s458];
[L2460]  COND TRUE   DType[this] == HY
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_HY[this][from_s458][msgsender_MSG];
[L2469]              allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_HY[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == HY
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s458];
[L2480]              balances_HY[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_HY" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][from_s458];
[L2458]              balances_HY[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][from_s458];
[L2460]  COND TRUE   DType[this] == HY
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_HY[this][from_s458][msgsender_MSG];
[L2469]              allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_HY[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == HY
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s458];
[L2480]              balances_HY[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_HY" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:47:59,454 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:47:59,455 INFO  L82        PathProgramCache]: Analyzing trace with hash -879482152, now seen corresponding path program 1 times
[2020-11-25 17:47:59,455 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:47:59,570 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:48:00,350 WARN  L188               SmtUtils]: Spent 134.00 ms on a formula simplification. DAG size of input: 136 DAG size of output: 71
[2020-11-25 17:48:00,542 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification. DAG size of input: 135 DAG size of output: 81
[2020-11-25 17:48:01,141 WARN  L188               SmtUtils]: Spent 106.00 ms on a formula simplification. DAG size of input: 145 DAG size of output: 72
[2020-11-25 17:48:01,616 WARN  L188               SmtUtils]: Spent 328.00 ms on a formula simplification. DAG size of input: 250 DAG size of output: 126
[2020-11-25 17:48:01,966 WARN  L188               SmtUtils]: Spent 257.00 ms on a formula simplification. DAG size of input: 235 DAG size of output: 120
[2020-11-25 17:48:02,227 WARN  L188               SmtUtils]: Spent 190.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 97
[2020-11-25 17:48:02,489 WARN  L188               SmtUtils]: Spent 195.00 ms on a formula simplification. DAG size of input: 199 DAG size of output: 99
[2020-11-25 17:48:03,435 WARN  L188               SmtUtils]: Spent 710.00 ms on a formula simplification. DAG size of input: 387 DAG size of output: 120
[2020-11-25 17:48:04,056 WARN  L188               SmtUtils]: Spent 262.00 ms on a formula simplification. DAG size of input: 390 DAG size of output: 89
[2020-11-25 17:48:05,351 WARN  L188               SmtUtils]: Spent 191.00 ms on a formula simplification. DAG size of input: 248 DAG size of output: 102
[2020-11-25 17:48:05,985 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 2 proven. 83 refuted. 0 times theorem prover too weak. 2 trivial. 0 not checked.
[2020-11-25 17:48:05,985 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:48:05,986 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-11-25 17:48:05,986 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:48:05,986 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-11-25 17:48:05,986 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=148, Invalid=2402, Unknown=0, NotChecked=0, Total=2550
[2020-11-25 17:48:05,987 INFO  L87              Difference]: Start difference. First operand 1868 states and 2025 transitions. cyclomatic complexity: 162 Second operand 51 states.
[2020-11-25 17:48:12,577 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification. DAG size of input: 173 DAG size of output: 125
[2020-11-25 17:48:12,849 WARN  L188               SmtUtils]: Spent 196.00 ms on a formula simplification. DAG size of input: 180 DAG size of output: 125
[2020-11-25 17:48:13,047 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 132 DAG size of output: 116
[2020-11-25 17:48:13,246 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 133 DAG size of output: 117
[2020-11-25 17:48:13,743 WARN  L188               SmtUtils]: Spent 401.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 164
[2020-11-25 17:48:14,307 WARN  L188               SmtUtils]: Spent 398.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 168
[2020-11-25 17:48:16,162 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 143 DAG size of output: 117
[2020-11-25 17:48:24,581 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:48:24,581 INFO  L93              Difference]: Finished difference Result 2325 states and 2636 transitions.
[2020-11-25 17:48:24,581 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 49 states. 
[2020-11-25 17:48:24,582 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2325 states and 2636 transitions.
[2020-11-25 17:48:24,586 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:48:24,591 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2325 states to 2325 states and 2634 transitions.
[2020-11-25 17:48:24,592 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 690
[2020-11-25 17:48:24,592 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 690
[2020-11-25 17:48:24,592 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2325 states and 2634 transitions.
[2020-11-25 17:48:24,594 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:48:24,594 INFO  L728         BuchiCegarLoop]: Abstraction has 2325 states and 2634 transitions.
[2020-11-25 17:48:24,595 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2325 states and 2634 transitions.
[2020-11-25 17:48:24,605 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2325 to 2265.
[2020-11-25 17:48:24,605 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2265 states.
[2020-11-25 17:48:24,607 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2265 states to 2265 states and 2560 transitions.
[2020-11-25 17:48:24,607 INFO  L751         BuchiCegarLoop]: Abstraction has 2265 states and 2560 transitions.
[2020-11-25 17:48:24,607 INFO  L631         BuchiCegarLoop]: Abstraction has 2265 states and 2560 transitions.
[2020-11-25 17:48:24,607 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 17:48:24,607 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2265 states and 2560 transitions.
[2020-11-25 17:48:24,610 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:48:24,610 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:48:24,610 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:48:24,611 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:48:24,611 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][from_s458];
[L2458]              balances_HY[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][from_s458];
[L2460]  COND TRUE   DType[this] == HY
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_HY[this][from_s458][msgsender_MSG];
[L2469]              allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_HY[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == HY
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s458];
[L2480]              balances_HY[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_HY" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L3]                 success_transferFrom_HY0 := true;
[L3]                 success_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][from_s458];
[L2458]              balances_HY[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][from_s458];
[L2460]  COND TRUE   DType[this] == HY
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_HY[this][from_s458][msgsender_MSG];
[L2469]              allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_HY[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == HY
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s458];
[L2480]              balances_HY[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_HY" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HY[this][msgsender_MSG][spender_s399];
[L2395]              allowed_HY[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HY[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_HY" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:48:24,614 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:48:24,614 INFO  L82        PathProgramCache]: Analyzing trace with hash 473755309, now seen corresponding path program 1 times
[2020-11-25 17:48:24,614 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:48:24,676 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:48:25,373 WARN  L188               SmtUtils]: Spent 194.00 ms on a formula simplification. DAG size of input: 168 DAG size of output: 90
[2020-11-25 17:48:26,716 WARN  L188               SmtUtils]: Spent 375.00 ms on a formula simplification. DAG size of input: 252 DAG size of output: 116
[2020-11-25 17:48:26,954 WARN  L188               SmtUtils]: Spent 157.00 ms on a formula simplification. DAG size of input: 210 DAG size of output: 76
[2020-11-25 17:48:27,361 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 0 proven. 9 refuted. 0 times theorem prover too weak. 78 trivial. 0 not checked.
[2020-11-25 17:48:27,361 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:48:27,361 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 17:48:27,361 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:48:27,361 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 17:48:27,362 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=118, Invalid=1522, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 17:48:27,362 INFO  L87              Difference]: Start difference. First operand 2265 states and 2560 transitions. cyclomatic complexity: 303 Second operand 41 states.
[2020-11-25 17:48:30,845 WARN  L188               SmtUtils]: Spent 400.00 ms on a formula simplification. DAG size of input: 161 DAG size of output: 158
[2020-11-25 17:48:31,732 WARN  L188               SmtUtils]: Spent 804.00 ms on a formula simplification. DAG size of input: 178 DAG size of output: 161
[2020-11-25 17:48:32,869 WARN  L188               SmtUtils]: Spent 554.00 ms on a formula simplification. DAG size of input: 167 DAG size of output: 146
[2020-11-25 17:48:36,038 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:48:36,038 INFO  L93              Difference]: Finished difference Result 2523 states and 2907 transitions.
[2020-11-25 17:48:36,039 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 17:48:36,040 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2523 states and 2907 transitions.
[2020-11-25 17:48:36,049 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 17:48:36,055 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2523 states to 2523 states and 2907 transitions.
[2020-11-25 17:48:36,056 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 787
[2020-11-25 17:48:36,056 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 787
[2020-11-25 17:48:36,056 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2523 states and 2907 transitions.
[2020-11-25 17:48:36,058 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:48:36,058 INFO  L728         BuchiCegarLoop]: Abstraction has 2523 states and 2907 transitions.
[2020-11-25 17:48:36,060 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2523 states and 2907 transitions.
[2020-11-25 17:48:36,071 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2523 to 2267.
[2020-11-25 17:48:36,071 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2267 states.
[2020-11-25 17:48:36,073 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2267 states to 2267 states and 2567 transitions.
[2020-11-25 17:48:36,073 INFO  L751         BuchiCegarLoop]: Abstraction has 2267 states and 2567 transitions.
[2020-11-25 17:48:36,073 INFO  L631         BuchiCegarLoop]: Abstraction has 2267 states and 2567 transitions.
[2020-11-25 17:48:36,073 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 17:48:36,073 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2267 states and 2567 transitions.
[2020-11-25 17:48:36,076 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 17:48:36,076 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 17:48:36,076 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 17:48:36,077 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 17:48:36,077 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_HY0 := false;
[L3]                 call_transferFrom_HY0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == HY;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_HY[this] := 1792990956;
[L2236]              name_HY[this] := 1792990956;
[L2237]              decimals_HY[this] := 0;
[L2238]              _totalSupply_HY[this] := 0;
[L2239]              balances_HY[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_HY[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_HY[this] := 1159622092;
[L2245]              name_HY[this] := -1506217422;
[L2246]              decimals_HY[this] := 18;
[L2247]              _totalSupply_HY[this] := 7000000000000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][615403135660766958745290992591269755305743528583];
[L2249]              balances_HY[this][615403135660766958745290992591269755305743528583] := _totalSupply_HY[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][615403135660766958745290992591269755305743528583];
[L2251]              assert { :EventEmitted "Transfer_HY" } true;
[L2288]  RET         call HY_HY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call HY_HY__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call HY_HY(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HY[this][msgsender_MSG][spender_s399];
[L2395]              allowed_HY[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HY[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_HY" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_HY(this);
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == HY
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][msgsender_MSG];
[L2365]              balances_HY[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == HY
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s371];
[L2376]              balances_HY[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_HY" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_HY(this);
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_HY[this][from_s458]) && tokens_s458 <= allowed_HY[this][from_s458][msgsender_MSG]) && balances_HY[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][to_s458] >= 0) && balances_HY[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_HY[this][from_s458] >= 0) && balances_HY[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_HY[this][from_s458][msgsender_MSG] >= 0) && allowed_HY[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_HY0 := true;
[L3]                 call_transferFrom_HY0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == HY
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][from_s458];
[L2458]              balances_HY[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][from_s458];
[L2460]  COND TRUE   DType[this] == HY
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_HY[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_HY[this][from_s458][msgsender_MSG];
[L2469]              allowed_HY[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_HY[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == HY
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_HY[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_HY[this][to_s458];
[L2480]              balances_HY[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_HY[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_HY" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_HY[this][from_s458] == old(balances_HY[this][from_s458]) - tokens_s458) && balances_HY[this][to_s458] == old(balances_HY[this][to_s458]) + tokens_s458) && allowed_HY[this][from_s458][msgsender_MSG] == old(allowed_HY[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_HY[this] == old(_totalSupply_HY[this])) && balances_HY[this][p1] == old(balances_HY[this][p1])) && allowed_HY[this][p2][p3] == old(allowed_HY[this][p2][p3])) && symbol_HY[this] == old(symbol_HY[this])) && name_HY[this] == old(name_HY[this])) && decimals_HY[this] == old(decimals_HY[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_HY(this);

Loop:
[L4261]  CALL        call CorralChoice_HY(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != HY;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_HY[this][msgsender_MSG][spender_s399];
[L2395]              allowed_HY[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_HY[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_HY" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_HY__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_HY(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_HY(this);

[2020-11-25 17:48:36,080 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 17:48:36,080 INFO  L82        PathProgramCache]: Analyzing trace with hash 1519098596, now seen corresponding path program 1 times
[2020-11-25 17:48:36,081 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 17:48:36,218 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 17:48:36,561 INFO  L134       CoverageAnalysis]: Checked inductivity of 212 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 209 trivial. 0 not checked.
[2020-11-25 17:48:36,562 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 17:48:36,562 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-25 17:48:36,562 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 17:48:36,562 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 17:48:36,562 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=334, Unknown=0, NotChecked=0, Total=380
[2020-11-25 17:48:36,562 INFO  L87              Difference]: Start difference. First operand 2267 states and 2567 transitions. cyclomatic complexity: 309 Second operand 20 states.
[2020-11-25 17:48:38,352 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 17:48:38,352 INFO  L93              Difference]: Finished difference Result 1240 states and 1403 transitions.
[2020-11-25 17:48:38,352 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 17:48:38,352 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1240 states and 1403 transitions.
[2020-11-25 17:48:38,354 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 17:48:38,355 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1240 states to 0 states and 0 transitions.
[2020-11-25 17:48:38,355 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 17:48:38,355 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 17:48:38,355 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 17:48:38,355 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 17:48:38,355 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:48:38,355 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:48:38,355 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 17:48:38,355 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 17:48:38,355 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 17:48:38,355 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 17:48:38,355 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 17:48:38,358 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 05:48:38 BasicIcfg
[2020-11-25 17:48:38,358 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 17:48:38,358 INFO  L168              Benchmark]: Toolchain (without parser) took 68231.01 ms. Allocated memory was 1.0 GB in the beginning and 3.7 GB in the end (delta: 2.7 GB). Free memory was 935.2 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 17:48:38,358 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 17:48:38,359 INFO  L168              Benchmark]: Boogie Preprocessor took 91.97 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:48:38,359 INFO  L168              Benchmark]: UtopiaSpecLang took 64.06 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 17:48:38,359 INFO  L168              Benchmark]: Boogie Printer took 15.84 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 17:48:38,359 INFO  L168              Benchmark]: RCFGBuilder took 764.71 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 790.2 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
[2020-11-25 17:48:38,359 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.89 ms. Allocated memory is still 1.0 GB. Free memory was 790.2 MB in the beginning and 781.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 17:48:38,361 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1374.79 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 200.3 MB). Free memory was 781.2 MB in the beginning and 997.8 MB in the end (delta: -216.6 MB). Peak memory consumption was 161.5 MB. Max. memory is 15.3 GB.
[2020-11-25 17:48:38,361 INFO  L168              Benchmark]: BlockEncodingV2 took 127.81 ms. Allocated memory is still 1.2 GB. Free memory was 997.8 MB in the beginning and 931.7 MB in the end (delta: 66.1 MB). Peak memory consumption was 66.1 MB. Max. memory is 15.3 GB.
[2020-11-25 17:48:38,361 INFO  L168              Benchmark]: BuchiAutomizer took 65746.95 ms. Allocated memory was 1.2 GB in the beginning and 3.7 GB in the end (delta: 2.5 GB). Free memory was 928.7 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-25 17:48:38,363 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3724 locations, 6408 edges
  - StatisticsResult: Encoded RCFG
    3664 locations, 6248 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 91.97 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 64.06 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 913.7 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 15.84 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 908.3 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 764.71 ms. Allocated memory is still 1.0 GB. Free memory was 908.3 MB in the beginning and 790.2 MB in the end (delta: 118.1 MB). Peak memory consumption was 118.1 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.89 ms. Allocated memory is still 1.0 GB. Free memory was 790.2 MB in the beginning and 781.2 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1374.79 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 200.3 MB). Free memory was 781.2 MB in the beginning and 997.8 MB in the end (delta: -216.6 MB). Peak memory consumption was 161.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 127.81 ms. Allocated memory is still 1.2 GB. Free memory was 997.8 MB in the beginning and 931.7 MB in the end (delta: 66.1 MB). Peak memory consumption was 66.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 65746.95 ms. Allocated memory was 1.2 GB in the beginning and 3.7 GB in the end (delta: 2.5 GB). Free memory was 928.7 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1566 locations, 1978 edges
  - StatisticsResult: BuchiProgram size
    3724 locations, 6408 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 15 terminating modules (15 trivial, 0 deterministic, 0 nondeterministic). 15 modules have a trivial ranking function, the largest among these consists of 51 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 65.7s and 16 iterations.  TraceHistogramMax:3. Analysis of lassos took 13.6s. Construction of modules took 38.6s. BÃ¼chi inclusion checks took 12.6s. Highest rank in rank-based complementation 0. Minimization of det autom 15. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 14 MinimizatonAttempts, 2676 StatesRemovedByMinimization, 13 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 2775 states and ocurred in iteration 6.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 33235 SDtfs, 43266 SDslu, 139896 SDs, 0 SdLazy, 253446 SolverSat, 7044 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 38.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU15 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_HY0) ==> ( <>(success_transferFrom_HY0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
