This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:56:37,932 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:56:37,933 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:56:37,943 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:56:37,943 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:56:37,944 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:56:37,945 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:56:37,946 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:56:37,948 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:56:37,948 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:56:37,949 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:56:37,949 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:56:37,950 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:56:37,950 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:56:37,951 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:56:37,952 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:56:37,952 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:56:37,953 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:56:37,955 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:56:37,956 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:56:37,957 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:56:37,957 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:56:37,959 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:56:37,959 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:56:37,959 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:56:37,960 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:56:37,960 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:56:37,961 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:56:37,961 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:56:37,961 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:56:37,961 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:56:37,962 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:56:37,962 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:56:37,963 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:56:37,964 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:56:37,964 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:56:37,964 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:56:37,964 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:56:37,964 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:56:37,965 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:56:37,965 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:56:37,966 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:56:37,973 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:56:37,973 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:56:37,974 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:56:37,974 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:56:37,974 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:56:37,974 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:56:37,974 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:56:37,975 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:56:37,975 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:56:37,975 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:56:37,975 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:56:37,975 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:56:37,975 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:56:37,975 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:56:37,975 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:56:37,975 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:56:37,976 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:56:37,976 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:56:37,976 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:56:37,976 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:56:37,976 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:56:37,976 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:56:37,976 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:56:37,976 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:56:37,976 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:56:37,976 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:56:37,997 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:56:38,006 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:56:38,008 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:56:38,009 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:56:38,010 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:56:38,010 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl
[2020-11-24 20:56:38,011 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl'
[2020-11-24 20:56:38,181 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:56:38,182 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:56:38,183 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:56:38,183 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:56:38,183 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:56:38,199 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/1) ...
[2020-11-24 20:56:38,201 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/1) ...
[2020-11-24 20:56:38,251 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/1) ...
[2020-11-24 20:56:38,252 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/1) ...
[2020-11-24 20:56:38,293 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/1) ...
[2020-11-24 20:56:38,318 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/1) ...
[2020-11-24 20:56:38,336 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/1) ...
[2020-11-24 20:56:38,360 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:56:38,360 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:56:38,360 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:56:38,362 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:56:38,366 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/1) ...
[2020-11-24 20:56:38,396 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:56:38,401 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:56:38,408 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:56:38,418 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==_to_s1572 && _value_s1572<=balances_BasicToken[this][msg.sender] ) && _value_s1572>=0 ) && _value_s1572<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][_to_s1572]>=0 ) && balances_BasicToken[this][_to_s1572]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_BasicToken[this][msg.sender]>=0 ) && balances_BasicToken[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]],BinaryExpression[COMPLEQ,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[_to_s1572,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:56:38,422 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( _success_s1572==true && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[_success_s1572,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_MainToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MainToken>]]]]]]
[2020-11-24 20:56:38,428 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MainToken.transfer(to, value), msg.sender == to && value <= balances_BasicToken[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][to] >= 0 && balances_BasicToken[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_BasicToken[this][msg.sender] >= 0 &&  balances_BasicToken[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(MainToken.transfer(to, value), return == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:56:38,428 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_MainToken0) ==> ( <>AP(success_transfer_MainToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:56:38,451 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:56:38 PropertyContainer
[2020-11-24 20:56:38,451 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:56:38,451 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:56:38,451 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:56:38,451 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:56:38,452 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/2) ...
[2020-11-24 20:56:38,452 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:56:38,453 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:56:38,482 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:56:38" (2/2) ...
[2020-11-24 20:56:38,482 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:56:38,482 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:56:38,482 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:56:38,483 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:56:38,483 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/2) ...
[2020-11-24 20:56:38,535 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:56:38,535 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 20:56:38,535 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 20:56:38,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 20:56:38,535 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 20:56:38,535 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 20:56:38,536 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 20:56:38,536 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:56:38,536 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:56:38,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:56:38,536 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:56:38,536 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:56:38,536 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:56:38,536 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:56:38,536 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 20:56:38,537 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 20:56:38,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 20:56:38,537 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 20:56:38,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 20:56:38,537 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 20:56:38,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 20:56:38,538 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 20:56:38,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 20:56:38,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:56:38,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:56:38,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:56:38,538 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:56:38,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:56:38,538 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:56:38,538 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:56:38,539 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 20:56:38,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 20:56:38,539 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:56:38,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:56:38,539 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 20:56:38,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 20:56:38,539 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 20:56:38,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 20:56:38,539 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 20:56:38,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 20:56:38,540 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 20:56:38,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 20:56:38,540 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:56:38,540 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:56:38,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:56:38,540 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 20:56:38,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 20:56:38,540 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:56:38,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:56:38,540 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:56:38,540 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:56:38,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:56:38,541 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 20:56:38,541 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 20:56:38,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 20:56:38,541 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 20:56:38,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 20:56:38,541 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 20:56:38,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 20:56:38,541 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 20:56:38,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 20:56:38,541 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 20:56:38,542 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 20:56:38,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 20:56:38,542 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 20:56:38,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 20:56:38,542 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 20:56:38,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 20:56:38,542 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 20:56:38,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 20:56:38,542 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 20:56:38,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 20:56:38,542 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 20:56:38,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 20:56:38,543 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 20:56:38,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 20:56:38,543 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 20:56:38,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 20:56:38,543 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 20:56:38,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 20:56:38,543 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 20:56:38,543 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 20:56:38,543 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:56:38,544 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 20:56:38,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 20:56:38,544 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 20:56:38,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 20:56:38,544 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 20:56:38,544 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:56:38,544 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:56:38,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:56:38,544 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:56:38,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:56:38,544 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:56:38,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:56:38,545 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:56:38,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:56:38,545 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 20:56:38,545 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 20:56:38,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 20:56:38,545 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 20:56:38,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 20:56:38,545 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 20:56:38,545 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 20:56:38,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 20:56:38,546 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 20:56:38,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 20:56:38,546 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 20:56:38,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 20:56:38,546 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 20:56:38,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 20:56:38,546 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 20:56:38,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 20:56:38,546 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 20:56:38,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 20:56:38,547 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 20:56:38,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 20:56:38,547 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 20:56:38,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 20:56:38,547 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 20:56:38,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 20:56:38,547 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 20:56:38,547 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 20:56:38,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 20:56:38,547 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 20:56:38,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 20:56:38,548 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 20:56:38,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 20:56:38,548 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 20:56:38,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 20:56:38,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 20:56:38,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 20:56:38,548 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 20:56:38,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 20:56:38,548 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 20:56:38,549 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 20:56:38,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 20:56:38,549 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:56:38,549 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:56:38,549 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:56:38,549 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:56:38,549 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 20:56:38,549 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 20:56:38,549 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:56:38,550 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:56:38,550 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 20:56:38,550 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 20:56:38,550 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:56:38,550 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:56:38,550 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 20:56:38,550 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 20:56:38,550 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:56:38,550 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:56:38,550 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:56:38,551 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 20:56:38,552 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 20:56:38,553 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:56:38,554 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:56:38,555 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 20:56:38,556 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 20:56:38,557 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 20:56:38,558 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:56:38,559 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 20:56:38,560 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 20:56:38,561 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 20:56:38,562 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:56:38,563 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:56:38,564 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:56:38,564 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 20:56:38,564 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 20:56:38,564 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:56:38,564 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:56:38,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:56:38,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:56:38,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 20:56:38,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 20:56:38,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 20:56:38,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 20:56:38,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:56:38,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 20:56:38,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:56:38,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:56:38,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:56:38,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 20:56:38,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 20:56:38,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:56:38,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 20:56:38,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 20:56:38,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 20:56:38,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 20:56:38,575 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:56:38,576 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:56:38,577 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 20:56:38,578 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:56:38,578 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:56:38,579 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:56:39,838 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:56:39,838 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:56:39,838 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:56:40,182 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:56:40,182 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 20:56:40,186 INFO  L202        PluginConnector]: Adding new model MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:56:40 BoogieIcfgContainer
[2020-11-24 20:56:40,186 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:56:38" (2/2) ...
[2020-11-24 20:56:40,186 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:56:40,186 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@c106ada and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:56:40, skipping insertion in model container
[2020-11-24 20:56:40,187 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:56:40,187 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:56:40,187 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:56:40,188 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:56:40,188 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/3) ...
[2020-11-24 20:56:40,189 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1d13ce9a and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:56:40, skipping insertion in model container
[2020-11-24 20:56:40,189 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:56:38" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:56:40,222 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:56:40 NWAContainer
[2020-11-24 20:56:40,223 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:56:40,223 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:56:40,223 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:56:40,223 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:56:40,224 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:56:40" (3/4) ...
[2020-11-24 20:56:40,225 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@788dca55 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:56:40, skipping insertion in model container
[2020-11-24 20:56:40,225 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:56:40" (4/4) ...
[2020-11-24 20:56:40,229 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:56:40,237 INFO  L110   BuchiProductObserver]: Initial RCFG 5384 locations, 7560 edges
[2020-11-24 20:56:40,238 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:56:40,252 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:56:44,241 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:56:44,256 INFO  L110   BuchiProductObserver]: BuchiProgram size 13448 locations, 24717 edges
[2020-11-24 20:56:44,256 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:56:44 BoogieIcfgContainer
[2020-11-24 20:56:44,256 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:56:44,256 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:56:44,257 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:56:44,258 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:56:44,258 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:56:44" (1/1) ...
[2020-11-24 20:56:44,468 INFO  L313           BlockEncoder]: Initial Icfg 13448 locations, 24717 edges
[2020-11-24 20:56:44,468 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:56:44,469 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:56:44,469 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:56:44,469 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:56:44,492 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 20:56:44,515 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 20:56:44,537 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:56:44,544 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:56:44,551 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:56:44,552 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:56:44,557 INFO  L313           BlockEncoder]: Encoded RCFG 13238 locations, 24131 edges
[2020-11-24 20:56:44,557 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:56:44 BasicIcfg
[2020-11-24 20:56:44,557 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:56:44,558 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:56:44,558 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:56:44,559 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:56:44,559 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:56:44,559 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:56:38" (1/6) ...
[2020-11-24 20:56:44,561 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55dad923 and model type MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:56:44, skipping insertion in model container
[2020-11-24 20:56:44,561 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:56:44,561 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:56:38" (2/6) ...
[2020-11-24 20:56:44,562 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55dad923 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:56:44, skipping insertion in model container
[2020-11-24 20:56:44,562 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:56:44,562 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:56:40" (3/6) ...
[2020-11-24 20:56:44,562 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55dad923 and model type MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:56:44, skipping insertion in model container
[2020-11-24 20:56:44,562 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:56:44,562 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:56:40" (4/6) ...
[2020-11-24 20:56:44,562 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55dad923 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:56:44, skipping insertion in model container
[2020-11-24 20:56:44,563 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:56:44,563 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:56:44" (5/6) ...
[2020-11-24 20:56:44,563 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@55dad923 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:56:44, skipping insertion in model container
[2020-11-24 20:56:44,563 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:56:44,563 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:56:44" (6/6) ...
[2020-11-24 20:56:44,564 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x0eF3b2024ae079e6dBC2b37435cE30d2731F0101_transfer-self.bpl_BEv2
[2020-11-24 20:56:44,597 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:56:44,598 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:56:44,598 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:56:44,598 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:56:44,598 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:56:44,598 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:56:44,598 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:56:44,598 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:56:44,598 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:56:44,673 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13238 states.
[2020-11-24 20:56:44,781 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:56:44,781 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:56:44,781 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:56:44,792 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:56:44,792 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:56:44,792 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:56:44,792 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13238 states.
[2020-11-24 20:56:44,847 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:56:44,847 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:56:44,847 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:56:44,849 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:56:44,849 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 121052762;
[L9290]               TOKEN_SYMBOL_Consts[this] := 121052762;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND TRUE   revert
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:56:44,865 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:56:44,866 INFO  L82        PathProgramCache]: Analyzing trace with hash -1225388166, now seen corresponding path program 1 times
[2020-11-24 20:56:44,872 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:56:44,894 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:56:44,937 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:56:44,938 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:56:44,938 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:56:45,300 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:56:45,308 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:56:45,309 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:56:45,310 INFO  L87              Difference]: Start difference. First operand 13238 states. Second operand 4 states.
[2020-11-24 20:56:46,561 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:56:46,561 INFO  L93              Difference]: Finished difference Result 8276 states and 9691 transitions.
[2020-11-24 20:56:46,561 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:56:46,562 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8276 states and 9691 transitions.
[2020-11-24 20:56:46,595 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:56:46,641 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8276 states to 8272 states and 9683 transitions.
[2020-11-24 20:56:46,642 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:56:46,645 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1863
[2020-11-24 20:56:46,645 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8272 states and 9683 transitions.
[2020-11-24 20:56:46,666 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:56:46,666 INFO  L728         BuchiCegarLoop]: Abstraction has 8272 states and 9683 transitions.
[2020-11-24 20:56:46,688 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8272 states and 9683 transitions.
[2020-11-24 20:56:46,794 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8272 to 8272.
[2020-11-24 20:56:46,795 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8272 states.
[2020-11-24 20:56:46,808 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8272 states to 8272 states and 9683 transitions.
[2020-11-24 20:56:46,809 INFO  L751         BuchiCegarLoop]: Abstraction has 8272 states and 9683 transitions.
[2020-11-24 20:56:46,809 INFO  L631         BuchiCegarLoop]: Abstraction has 8272 states and 9683 transitions.
[2020-11-24 20:56:46,809 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:56:46,809 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8272 states and 9683 transitions.
[2020-11-24 20:56:46,822 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:56:46,822 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:56:46,822 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:56:46,824 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:56:46,824 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 121052762;
[L9290]               TOKEN_SYMBOL_Consts[this] := 121052762;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND TRUE   revert
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND TRUE   !!paused_Pausable[this]
[L9657]               revert := true;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND TRUE   !!paused_Pausable[this]
[L9657]               revert := true;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:56:46,828 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:56:46,828 INFO  L82        PathProgramCache]: Analyzing trace with hash 2053633447, now seen corresponding path program 1 times
[2020-11-24 20:56:46,830 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:56:46,843 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:56:46,870 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:56:46,870 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:56:46,870 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:56:46,871 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:56:46,871 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:56:46,871 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:56:46,871 INFO  L87              Difference]: Start difference. First operand 8272 states and 9683 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 20:56:47,074 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:56:47,074 INFO  L93              Difference]: Finished difference Result 9730 states and 11135 transitions.
[2020-11-24 20:56:47,074 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:56:47,074 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9730 states and 11135 transitions.
[2020-11-24 20:56:47,102 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:56:47,147 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9730 states to 9730 states and 11135 transitions.
[2020-11-24 20:56:47,147 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2286
[2020-11-24 20:56:47,149 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2286
[2020-11-24 20:56:47,149 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9730 states and 11135 transitions.
[2020-11-24 20:56:47,160 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:56:47,160 INFO  L728         BuchiCegarLoop]: Abstraction has 9730 states and 11135 transitions.
[2020-11-24 20:56:47,169 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9730 states and 11135 transitions.
[2020-11-24 20:56:47,255 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9730 to 8648.
[2020-11-24 20:56:47,255 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8648 states.
[2020-11-24 20:56:47,266 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8648 states to 8648 states and 9789 transitions.
[2020-11-24 20:56:47,266 INFO  L751         BuchiCegarLoop]: Abstraction has 8648 states and 9789 transitions.
[2020-11-24 20:56:47,266 INFO  L631         BuchiCegarLoop]: Abstraction has 8648 states and 9789 transitions.
[2020-11-24 20:56:47,266 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:56:47,266 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8648 states and 9789 transitions.
[2020-11-24 20:56:47,277 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:56:47,277 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:56:47,278 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:56:47,284 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:56:47,284 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 121052762;
[L9290]               TOKEN_SYMBOL_Consts[this] := 121052762;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND TRUE   !!initialized_MainToken[this]
[L9755]               revert := true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND TRUE   revert
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND TRUE   !!paused_Pausable[this]
[L9657]               revert := true;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND TRUE   !!paused_Pausable[this]
[L9657]               revert := true;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:56:47,295 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:56:47,295 INFO  L82        PathProgramCache]: Analyzing trace with hash 2119375518, now seen corresponding path program 1 times
[2020-11-24 20:56:47,296 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:56:47,334 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:56:47,869 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:56:47,869 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:56:47,870 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:56:47,871 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:56:47,871 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:56:47,871 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:56:47,871 INFO  L87              Difference]: Start difference. First operand 8648 states and 9789 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 20:56:47,995 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:56:47,995 INFO  L93              Difference]: Finished difference Result 9730 states and 10977 transitions.
[2020-11-24 20:56:47,995 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:56:47,995 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9730 states and 10977 transitions.
[2020-11-24 20:56:48,016 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:56:48,046 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9730 states to 9382 states and 10569 transitions.
[2020-11-24 20:56:48,047 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2166
[2020-11-24 20:56:48,048 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2195
[2020-11-24 20:56:48,048 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9382 states and 10569 transitions.
[2020-11-24 20:56:48,057 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:56:48,057 INFO  L728         BuchiCegarLoop]: Abstraction has 9382 states and 10569 transitions.
[2020-11-24 20:56:48,065 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9382 states and 10569 transitions.
[2020-11-24 20:56:48,140 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9382 to 8402.
[2020-11-24 20:56:48,140 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8402 states.
[2020-11-24 20:56:48,148 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8402 states to 8402 states and 9325 transitions.
[2020-11-24 20:56:48,149 INFO  L751         BuchiCegarLoop]: Abstraction has 8402 states and 9325 transitions.
[2020-11-24 20:56:48,149 INFO  L631         BuchiCegarLoop]: Abstraction has 8402 states and 9325 transitions.
[2020-11-24 20:56:48,149 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:56:48,149 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8402 states and 9325 transitions.
[2020-11-24 20:56:48,157 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:56:48,157 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:56:48,157 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:56:48,162 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:56:48,162 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 121052762;
[L9290]               TOKEN_SYMBOL_Consts[this] := 121052762;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9770]               addresses_s1673 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9771]               __var_58 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND TRUE   __exception
[L4824]               __tmp__Balance := Balance;
[L4825]               __tmp__DType := DType;
[L4826]               __tmp__Alloc := Alloc;
[L4827]               __tmp__balance_ADDR := balance_ADDR;
[L4828]               __tmp__M_Ref_int := M_Ref_int;
[L4829]               __tmp__sum_balances0 := sum_balances0;
[L4830]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4831]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4832]               __tmp__sum_allowed1 := sum_allowed1;
[L4833]               __tmp__M_int_int := M_int_int;
[L4834]               __tmp__sum_chains2 := sum_chains2;
[L4835]               __tmp__sum_freezings3 := sum_freezings3;
[L4836]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4837]               __tmp__M_int_Ref := M_int_Ref;
[L4838]               __tmp__sum := sum;
[L4839]               __tmp__Length := Length;
[L4840]               __tmp__now := now;
[L4841]               __tmp__balances_BasicToken := balances_BasicToken;
[L4842]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4843]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4844]               __tmp__owner_Ownable := owner_Ownable;
[L4845]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4846]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4847]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4848]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4849]               __tmp__paused_Pausable := paused_Pausable;
[L4850]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4851]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4852]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4853]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4854]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4855]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4856]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4857]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4858]               __tmp__initialized_MainToken := initialized_MainToken;
[L4859]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9636]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9637]               revert := true;
[L4859]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4860]               assume revert || gas < 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND TRUE   __exception
[L4824]               __tmp__Balance := Balance;
[L4825]               __tmp__DType := DType;
[L4826]               __tmp__Alloc := Alloc;
[L4827]               __tmp__balance_ADDR := balance_ADDR;
[L4828]               __tmp__M_Ref_int := M_Ref_int;
[L4829]               __tmp__sum_balances0 := sum_balances0;
[L4830]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4831]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4832]               __tmp__sum_allowed1 := sum_allowed1;
[L4833]               __tmp__M_int_int := M_int_int;
[L4834]               __tmp__sum_chains2 := sum_chains2;
[L4835]               __tmp__sum_freezings3 := sum_freezings3;
[L4836]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4837]               __tmp__M_int_Ref := M_int_Ref;
[L4838]               __tmp__sum := sum;
[L4839]               __tmp__Length := Length;
[L4840]               __tmp__now := now;
[L4841]               __tmp__balances_BasicToken := balances_BasicToken;
[L4842]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4843]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4844]               __tmp__owner_Ownable := owner_Ownable;
[L4845]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4846]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4847]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4848]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4849]               __tmp__paused_Pausable := paused_Pausable;
[L4850]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4851]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4852]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4853]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4854]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4855]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4856]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4857]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4858]               __tmp__initialized_MainToken := initialized_MainToken;
[L4859]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9636]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9637]               revert := true;
[L4859]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4860]               assume revert || gas < 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:56:48,171 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:56:48,172 INFO  L82        PathProgramCache]: Analyzing trace with hash 2006837169, now seen corresponding path program 1 times
[2020-11-24 20:56:48,173 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:56:48,205 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:56:48,817 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:56:48,817 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:56:48,817 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [11] imperfect sequences [] total 11
[2020-11-24 20:56:48,818 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:56:48,818 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-24 20:56:48,818 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-24 20:56:48,818 INFO  L87              Difference]: Start difference. First operand 8402 states and 9325 transitions. cyclomatic complexity: 943 Second operand 12 states.
[2020-11-24 20:56:56,534 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:56:56,534 INFO  L93              Difference]: Finished difference Result 13768 states and 15398 transitions.
[2020-11-24 20:56:56,534 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-24 20:56:56,534 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13768 states and 15398 transitions.
[2020-11-24 20:56:56,561 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 20:56:56,598 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13768 states to 13708 states and 15327 transitions.
[2020-11-24 20:56:56,598 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3220
[2020-11-24 20:56:56,599 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3220
[2020-11-24 20:56:56,599 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13708 states and 15327 transitions.
[2020-11-24 20:56:56,608 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:56:56,609 INFO  L728         BuchiCegarLoop]: Abstraction has 13708 states and 15327 transitions.
[2020-11-24 20:56:56,616 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13708 states and 15327 transitions.
[2020-11-24 20:56:56,703 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13708 to 11669.
[2020-11-24 20:56:56,703 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11669 states.
[2020-11-24 20:56:56,734 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11669 states to 11669 states and 13267 transitions.
[2020-11-24 20:56:56,734 INFO  L751         BuchiCegarLoop]: Abstraction has 11669 states and 13267 transitions.
[2020-11-24 20:56:56,734 INFO  L631         BuchiCegarLoop]: Abstraction has 11669 states and 13267 transitions.
[2020-11-24 20:56:56,734 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:56:56,734 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11669 states and 13267 transitions.
[2020-11-24 20:56:56,750 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:56:56,750 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:56:56,750 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:56:56,754 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:56:56,754 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 121052762;
[L9290]               TOKEN_SYMBOL_Consts[this] := 121052762;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND TRUE   PAUSED_Consts[this]
[L9760]   COND TRUE   DType[this] == MainToken
[L9761]   CALL        call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L8988]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8989]   COND FALSE  !(revert)
[L8992]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12769]  COND FALSE  !(!!paused_Pausable[this])
[L8992]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L8993]   COND FALSE  !(revert)
[L8996]               paused_Pausable[this] := true;
[L8997]               assert { :EventEmitted "Pause_Pausable" } true;
[L9761]   RET         call pause_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9762]   COND FALSE  !(revert)
[L9769]               __var_57 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9770]               addresses_s1673 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9771]               __var_58 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND TRUE   __exception
[L4824]               __tmp__Balance := Balance;
[L4825]               __tmp__DType := DType;
[L4826]               __tmp__Alloc := Alloc;
[L4827]               __tmp__balance_ADDR := balance_ADDR;
[L4828]               __tmp__M_Ref_int := M_Ref_int;
[L4829]               __tmp__sum_balances0 := sum_balances0;
[L4830]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4831]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4832]               __tmp__sum_allowed1 := sum_allowed1;
[L4833]               __tmp__M_int_int := M_int_int;
[L4834]               __tmp__sum_chains2 := sum_chains2;
[L4835]               __tmp__sum_freezings3 := sum_freezings3;
[L4836]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4837]               __tmp__M_int_Ref := M_int_Ref;
[L4838]               __tmp__sum := sum;
[L4839]               __tmp__Length := Length;
[L4840]               __tmp__now := now;
[L4841]               __tmp__balances_BasicToken := balances_BasicToken;
[L4842]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4843]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4844]               __tmp__owner_Ownable := owner_Ownable;
[L4845]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4846]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4847]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4848]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4849]               __tmp__paused_Pausable := paused_Pausable;
[L4850]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4851]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4852]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4853]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4854]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4855]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4856]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4857]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4858]               __tmp__initialized_MainToken := initialized_MainToken;
[L4859]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9636]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9637]               revert := true;
[L4859]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4860]               assume revert || gas < 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND TRUE   __exception
[L4824]               __tmp__Balance := Balance;
[L4825]               __tmp__DType := DType;
[L4826]               __tmp__Alloc := Alloc;
[L4827]               __tmp__balance_ADDR := balance_ADDR;
[L4828]               __tmp__M_Ref_int := M_Ref_int;
[L4829]               __tmp__sum_balances0 := sum_balances0;
[L4830]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4831]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4832]               __tmp__sum_allowed1 := sum_allowed1;
[L4833]               __tmp__M_int_int := M_int_int;
[L4834]               __tmp__sum_chains2 := sum_chains2;
[L4835]               __tmp__sum_freezings3 := sum_freezings3;
[L4836]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4837]               __tmp__M_int_Ref := M_int_Ref;
[L4838]               __tmp__sum := sum;
[L4839]               __tmp__Length := Length;
[L4840]               __tmp__now := now;
[L4841]               __tmp__balances_BasicToken := balances_BasicToken;
[L4842]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4843]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4844]               __tmp__owner_Ownable := owner_Ownable;
[L4845]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4846]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4847]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4848]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4849]               __tmp__paused_Pausable := paused_Pausable;
[L4850]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4851]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4852]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4853]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4854]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4855]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4856]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4857]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4858]               __tmp__initialized_MainToken := initialized_MainToken;
[L4859]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9636]   COND TRUE   !!__tmp__paused_Pausable[this]
[L9637]               revert := true;
[L4859]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4860]               assume revert || gas < 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:56:56,762 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:56:56,762 INFO  L82        PathProgramCache]: Analyzing trace with hash -40103140, now seen corresponding path program 1 times
[2020-11-24 20:56:56,763 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:56:56,793 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:56:57,488 INFO  L134       CoverageAnalysis]: Checked inductivity of 9826 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9826 trivial. 0 not checked.
[2020-11-24 20:56:57,488 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:56:57,488 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:56:57,489 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:56:57,489 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:56:57,489 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:56:57,489 INFO  L87              Difference]: Start difference. First operand 11669 states and 13267 transitions. cyclomatic complexity: 1630 Second operand 7 states.
[2020-11-24 20:56:57,609 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:56:57,609 INFO  L93              Difference]: Finished difference Result 11663 states and 13260 transitions.
[2020-11-24 20:56:57,609 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:56:57,609 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11663 states and 13260 transitions.
[2020-11-24 20:56:57,631 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:56:57,662 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11663 states to 11623 states and 13211 transitions.
[2020-11-24 20:56:57,662 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2650
[2020-11-24 20:56:57,663 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2650
[2020-11-24 20:56:57,663 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11623 states and 13211 transitions.
[2020-11-24 20:56:57,671 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:56:57,671 INFO  L728         BuchiCegarLoop]: Abstraction has 11623 states and 13211 transitions.
[2020-11-24 20:56:57,679 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11623 states and 13211 transitions.
[2020-11-24 20:56:57,754 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11623 to 11623.
[2020-11-24 20:56:57,755 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11623 states.
[2020-11-24 20:56:57,769 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11623 states to 11623 states and 13211 transitions.
[2020-11-24 20:56:57,769 INFO  L751         BuchiCegarLoop]: Abstraction has 11623 states and 13211 transitions.
[2020-11-24 20:56:57,769 INFO  L631         BuchiCegarLoop]: Abstraction has 11623 states and 13211 transitions.
[2020-11-24 20:56:57,769 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:56:57,769 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11623 states and 13211 transitions.
[2020-11-24 20:56:57,782 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 20:56:57,782 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:56:57,782 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:56:57,785 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:56:57,785 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 121052762;
[L9290]               TOKEN_SYMBOL_Consts[this] := 121052762;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9770]               addresses_s1673 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9771]               __var_58 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND FALSE  !(!!paused_Pausable[this])
[L9660]   COND TRUE   DType[this] == MainToken
[L9661]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6925]               __var_1 := null;
[L6926]   COND FALSE  !(!(_to_s202 != null))
[L6930]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6934]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6934]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6935]   COND FALSE  !(revert)
[L6938]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6939]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6940]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6941]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L6941]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6942]   COND FALSE  !(revert)
[L6945]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6946]               balances_BasicToken[this][_to_s202] := __var_3;
[L6947]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6948]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6949]               __ret_0_ := true;
[L9661]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9662]   COND FALSE  !(revert)
[L9668]               _success_s1572 := __var_55;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND FALSE  !(!!paused_Pausable[this])
[L9660]   COND TRUE   DType[this] == MainToken
[L9661]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6925]               __var_1 := null;
[L6926]   COND FALSE  !(!(_to_s202 != null))
[L6930]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6934]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6934]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6935]   COND FALSE  !(revert)
[L6938]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6939]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6940]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6941]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L6941]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6942]   COND FALSE  !(revert)
[L6945]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6946]               balances_BasicToken[this][_to_s202] := __var_3;
[L6947]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6948]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6949]               __ret_0_ := true;
[L9661]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9662]   COND FALSE  !(revert)
[L9668]               _success_s1572 := __var_55;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:56:57,793 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:56:57,793 INFO  L82        PathProgramCache]: Analyzing trace with hash -226123240, now seen corresponding path program 1 times
[2020-11-24 20:56:57,794 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:56:57,864 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:56:59,067 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 96 proven. 0 refuted. 0 times theorem prover too weak. 9727 trivial. 0 not checked.
[2020-11-24 20:56:59,067 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:56:59,067 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [25] imperfect sequences [] total 25
[2020-11-24 20:56:59,068 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:56:59,068 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-24 20:56:59,068 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=61, Invalid=589, Unknown=0, NotChecked=0, Total=650
[2020-11-24 20:56:59,068 INFO  L87              Difference]: Start difference. First operand 11623 states and 13211 transitions. cyclomatic complexity: 1619 Second operand 26 states.
[2020-11-24 20:57:16,967 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:57:16,967 INFO  L93              Difference]: Finished difference Result 11949 states and 13700 transitions.
[2020-11-24 20:57:16,967 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-24 20:57:16,967 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11949 states and 13700 transitions.
[2020-11-24 20:57:16,991 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 24
[2020-11-24 20:57:17,020 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11949 states to 11949 states and 13700 transitions.
[2020-11-24 20:57:17,021 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2734
[2020-11-24 20:57:17,022 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2734
[2020-11-24 20:57:17,022 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11949 states and 13700 transitions.
[2020-11-24 20:57:17,030 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:57:17,030 INFO  L728         BuchiCegarLoop]: Abstraction has 11949 states and 13700 transitions.
[2020-11-24 20:57:17,037 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11949 states and 13700 transitions.
[2020-11-24 20:57:17,110 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11949 to 11857.
[2020-11-24 20:57:17,110 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11857 states.
[2020-11-24 20:57:17,126 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11857 states to 11857 states and 13523 transitions.
[2020-11-24 20:57:17,126 INFO  L751         BuchiCegarLoop]: Abstraction has 11857 states and 13523 transitions.
[2020-11-24 20:57:17,126 INFO  L631         BuchiCegarLoop]: Abstraction has 11857 states and 13523 transitions.
[2020-11-24 20:57:17,126 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:57:17,126 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11857 states and 13523 transitions.
[2020-11-24 20:57:17,139 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:57:17,139 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:57:17,139 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:57:17,141 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:57:17,141 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 121052762;
[L9290]               TOKEN_SYMBOL_Consts[this] := 121052762;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9770]               addresses_s1673 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9771]               __var_58 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND TRUE   __exception
[L4824]               __tmp__Balance := Balance;
[L4825]               __tmp__DType := DType;
[L4826]               __tmp__Alloc := Alloc;
[L4827]               __tmp__balance_ADDR := balance_ADDR;
[L4828]               __tmp__M_Ref_int := M_Ref_int;
[L4829]               __tmp__sum_balances0 := sum_balances0;
[L4830]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4831]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4832]               __tmp__sum_allowed1 := sum_allowed1;
[L4833]               __tmp__M_int_int := M_int_int;
[L4834]               __tmp__sum_chains2 := sum_chains2;
[L4835]               __tmp__sum_freezings3 := sum_freezings3;
[L4836]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4837]               __tmp__M_int_Ref := M_int_Ref;
[L4838]               __tmp__sum := sum;
[L4839]               __tmp__Length := Length;
[L4840]               __tmp__now := now;
[L4841]               __tmp__balances_BasicToken := balances_BasicToken;
[L4842]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4843]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4844]               __tmp__owner_Ownable := owner_Ownable;
[L4845]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4846]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4847]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4848]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4849]               __tmp__paused_Pausable := paused_Pausable;
[L4850]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4851]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4852]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4853]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4854]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4855]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4856]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4857]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4858]               __tmp__initialized_MainToken := initialized_MainToken;
[L4859]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9636]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9640]   COND TRUE   __tmp__DType[this] == MainToken
[L9641]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6893]               __var_1 := null;
[L6894]   COND TRUE   !(_to_s202 != null)
[L6895]               revert := true;
[L9641]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9642]   COND TRUE   revert
[L4859]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4860]               assume revert || gas < 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND TRUE   __exception
[L4824]               __tmp__Balance := Balance;
[L4825]               __tmp__DType := DType;
[L4826]               __tmp__Alloc := Alloc;
[L4827]               __tmp__balance_ADDR := balance_ADDR;
[L4828]               __tmp__M_Ref_int := M_Ref_int;
[L4829]               __tmp__sum_balances0 := sum_balances0;
[L4830]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4831]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4832]               __tmp__sum_allowed1 := sum_allowed1;
[L4833]               __tmp__M_int_int := M_int_int;
[L4834]               __tmp__sum_chains2 := sum_chains2;
[L4835]               __tmp__sum_freezings3 := sum_freezings3;
[L4836]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4837]               __tmp__M_int_Ref := M_int_Ref;
[L4838]               __tmp__sum := sum;
[L4839]               __tmp__Length := Length;
[L4840]               __tmp__now := now;
[L4841]               __tmp__balances_BasicToken := balances_BasicToken;
[L4842]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4843]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4844]               __tmp__owner_Ownable := owner_Ownable;
[L4845]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4846]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4847]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4848]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4849]               __tmp__paused_Pausable := paused_Pausable;
[L4850]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4851]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4852]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4853]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4854]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4855]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4856]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4857]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4858]               __tmp__initialized_MainToken := initialized_MainToken;
[L4859]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9636]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9640]   COND TRUE   __tmp__DType[this] == MainToken
[L9641]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6893]               __var_1 := null;
[L6894]   COND TRUE   !(_to_s202 != null)
[L6895]               revert := true;
[L9641]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9642]   COND TRUE   revert
[L4859]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4860]               assume revert || gas < 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:57:17,149 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:57:17,149 INFO  L82        PathProgramCache]: Analyzing trace with hash 81048426, now seen corresponding path program 1 times
[2020-11-24 20:57:17,150 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:57:17,178 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:57:17,689 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:57:17,689 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:57:17,689 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:57:17,690 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:57:17,690 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:57:17,690 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:57:17,690 INFO  L87              Difference]: Start difference. First operand 11857 states and 13523 transitions. cyclomatic complexity: 1702 Second operand 7 states.
[2020-11-24 20:57:17,773 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:57:17,773 INFO  L93              Difference]: Finished difference Result 11931 states and 13601 transitions.
[2020-11-24 20:57:17,773 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:57:17,774 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11931 states and 13601 transitions.
[2020-11-24 20:57:17,795 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:57:17,821 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11931 states to 11923 states and 13593 transitions.
[2020-11-24 20:57:17,821 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2732
[2020-11-24 20:57:17,822 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2732
[2020-11-24 20:57:17,822 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11923 states and 13593 transitions.
[2020-11-24 20:57:17,829 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:57:17,829 INFO  L728         BuchiCegarLoop]: Abstraction has 11923 states and 13593 transitions.
[2020-11-24 20:57:17,836 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11923 states and 13593 transitions.
[2020-11-24 20:57:17,912 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11923 to 11905.
[2020-11-24 20:57:17,912 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 11905 states.
[2020-11-24 20:57:17,933 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 11905 states to 11905 states and 13573 transitions.
[2020-11-24 20:57:17,933 INFO  L751         BuchiCegarLoop]: Abstraction has 11905 states and 13573 transitions.
[2020-11-24 20:57:17,933 INFO  L631         BuchiCegarLoop]: Abstraction has 11905 states and 13573 transitions.
[2020-11-24 20:57:17,934 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 20:57:17,934 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11905 states and 13573 transitions.
[2020-11-24 20:57:17,951 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:57:17,951 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:57:17,951 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:57:17,954 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:57:17,954 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 121052762;
[L9290]               TOKEN_SYMBOL_Consts[this] := 121052762;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9770]               addresses_s1673 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9771]               __var_58 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND TRUE   __exception
[L4824]               __tmp__Balance := Balance;
[L4825]               __tmp__DType := DType;
[L4826]               __tmp__Alloc := Alloc;
[L4827]               __tmp__balance_ADDR := balance_ADDR;
[L4828]               __tmp__M_Ref_int := M_Ref_int;
[L4829]               __tmp__sum_balances0 := sum_balances0;
[L4830]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4831]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4832]               __tmp__sum_allowed1 := sum_allowed1;
[L4833]               __tmp__M_int_int := M_int_int;
[L4834]               __tmp__sum_chains2 := sum_chains2;
[L4835]               __tmp__sum_freezings3 := sum_freezings3;
[L4836]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4837]               __tmp__M_int_Ref := M_int_Ref;
[L4838]               __tmp__sum := sum;
[L4839]               __tmp__Length := Length;
[L4840]               __tmp__now := now;
[L4841]               __tmp__balances_BasicToken := balances_BasicToken;
[L4842]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4843]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4844]               __tmp__owner_Ownable := owner_Ownable;
[L4845]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4846]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4847]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4848]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4849]               __tmp__paused_Pausable := paused_Pausable;
[L4850]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4851]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4852]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4853]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4854]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4855]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4856]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4857]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4858]               __tmp__initialized_MainToken := initialized_MainToken;
[L4859]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9636]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9640]   COND TRUE   __tmp__DType[this] == MainToken
[L9641]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6893]               __var_1 := null;
[L6894]   COND FALSE  !(!(_to_s202 != null))
[L6898]   COND TRUE   !(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L6899]               revert := true;
[L9641]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9642]   COND TRUE   revert
[L4859]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4860]               assume revert || gas < 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND TRUE   __exception
[L4824]               __tmp__Balance := Balance;
[L4825]               __tmp__DType := DType;
[L4826]               __tmp__Alloc := Alloc;
[L4827]               __tmp__balance_ADDR := balance_ADDR;
[L4828]               __tmp__M_Ref_int := M_Ref_int;
[L4829]               __tmp__sum_balances0 := sum_balances0;
[L4830]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4831]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4832]               __tmp__sum_allowed1 := sum_allowed1;
[L4833]               __tmp__M_int_int := M_int_int;
[L4834]               __tmp__sum_chains2 := sum_chains2;
[L4835]               __tmp__sum_freezings3 := sum_freezings3;
[L4836]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4837]               __tmp__M_int_Ref := M_int_Ref;
[L4838]               __tmp__sum := sum;
[L4839]               __tmp__Length := Length;
[L4840]               __tmp__now := now;
[L4841]               __tmp__balances_BasicToken := balances_BasicToken;
[L4842]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4843]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4844]               __tmp__owner_Ownable := owner_Ownable;
[L4845]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4846]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4847]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4848]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4849]               __tmp__paused_Pausable := paused_Pausable;
[L4850]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4851]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4852]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4853]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4854]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4855]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4856]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4857]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4858]               __tmp__initialized_MainToken := initialized_MainToken;
[L4859]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9636]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9640]   COND TRUE   __tmp__DType[this] == MainToken
[L9641]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6893]               __var_1 := null;
[L6894]   COND FALSE  !(!(_to_s202 != null))
[L6898]   COND TRUE   !(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG])
[L6899]               revert := true;
[L9641]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9642]   COND TRUE   revert
[L4859]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4860]               assume revert || gas < 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:57:17,965 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:57:17,965 INFO  L82        PathProgramCache]: Analyzing trace with hash 1729301598, now seen corresponding path program 1 times
[2020-11-24 20:57:17,966 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:57:18,007 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:57:18,601 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:57:18,602 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:57:18,602 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 20:57:18,602 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:57:18,602 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:57:18,603 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:57:18,603 INFO  L87              Difference]: Start difference. First operand 11905 states and 13573 transitions. cyclomatic complexity: 1704 Second operand 7 states.
[2020-11-24 20:57:21,353 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:57:21,353 INFO  L93              Difference]: Finished difference Result 12188 states and 13941 transitions.
[2020-11-24 20:57:21,353 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-24 20:57:21,353 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 12188 states and 13941 transitions.
[2020-11-24 20:57:21,381 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 20
[2020-11-24 20:57:21,411 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 12188 states to 12188 states and 13941 transitions.
[2020-11-24 20:57:21,411 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2848
[2020-11-24 20:57:21,413 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2848
[2020-11-24 20:57:21,413 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 12188 states and 13941 transitions.
[2020-11-24 20:57:21,420 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:57:21,420 INFO  L728         BuchiCegarLoop]: Abstraction has 12188 states and 13941 transitions.
[2020-11-24 20:57:21,427 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 12188 states and 13941 transitions.
[2020-11-24 20:57:21,487 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 12188 to 12085.
[2020-11-24 20:57:21,487 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12085 states.
[2020-11-24 20:57:21,502 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12085 states to 12085 states and 13765 transitions.
[2020-11-24 20:57:21,502 INFO  L751         BuchiCegarLoop]: Abstraction has 12085 states and 13765 transitions.
[2020-11-24 20:57:21,502 INFO  L631         BuchiCegarLoop]: Abstraction has 12085 states and 13765 transitions.
[2020-11-24 20:57:21,502 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 20:57:21,502 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12085 states and 13765 transitions.
[2020-11-24 20:57:21,513 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:57:21,513 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:57:21,513 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:57:21,515 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:57:21,516 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 121052762;
[L9290]               TOKEN_SYMBOL_Consts[this] := 121052762;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9770]               addresses_s1673 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9771]               __var_58 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND TRUE   __exception
[L4824]               __tmp__Balance := Balance;
[L4825]               __tmp__DType := DType;
[L4826]               __tmp__Alloc := Alloc;
[L4827]               __tmp__balance_ADDR := balance_ADDR;
[L4828]               __tmp__M_Ref_int := M_Ref_int;
[L4829]               __tmp__sum_balances0 := sum_balances0;
[L4830]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L4831]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L4832]               __tmp__sum_allowed1 := sum_allowed1;
[L4833]               __tmp__M_int_int := M_int_int;
[L4834]               __tmp__sum_chains2 := sum_chains2;
[L4835]               __tmp__sum_freezings3 := sum_freezings3;
[L4836]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L4837]               __tmp__M_int_Ref := M_int_Ref;
[L4838]               __tmp__sum := sum;
[L4839]               __tmp__Length := Length;
[L4840]               __tmp__now := now;
[L4841]               __tmp__balances_BasicToken := balances_BasicToken;
[L4842]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L4843]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L4844]               __tmp__owner_Ownable := owner_Ownable;
[L4845]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L4846]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L4847]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L4848]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L4849]               __tmp__paused_Pausable := paused_Pausable;
[L4850]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L4851]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L4852]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L4853]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L4854]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L4855]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L4856]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L4857]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L4858]               __tmp__initialized_MainToken := initialized_MainToken;
[L4859]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9636]   COND FALSE  !(!!__tmp__paused_Pausable[this])
[L9640]   COND TRUE   __tmp__DType[this] == MainToken
[L9641]   CALL        call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6893]               __var_1 := null;
[L6894]   COND FALSE  !(!(_to_s202 != null))
[L6898]   COND FALSE  !(!(_value_s202 <= __tmp__balances_BasicToken[this][msgsender_MSG]))
[L6902]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6804]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6902]   RET         call __var_2 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6903]   COND FALSE  !(revert)
[L6906]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][msgsender_MSG];
[L6907]               __tmp__balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6908]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][msgsender_MSG];
[L6909]   CALL        call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L6817]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6818]               c_s122 := c_s122;
[L6909]   RET         call __var_3 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__balances_BasicToken[this][_to_s202], _value_s202);
[L6910]   COND FALSE  !(revert)
[L6913]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_BasicToken[this][_to_s202];
[L6914]               __tmp__balances_BasicToken[this][_to_s202] := __var_3;
[L6915]               __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_BasicToken[this][_to_s202];
[L6916]               __ret_0_ := true;
[L9641]   RET         call __var_55 := transfer~address~uint256_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9642]   COND FALSE  !(revert)
[L9648]               _success_s1572 := __var_55;
[L4859]   RET         call _success_s1572 := transfer~address~uint256_MainToken__fail(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4860]               assume revert || gas < 0;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:57:21,522 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:57:21,522 INFO  L82        PathProgramCache]: Analyzing trace with hash 2099068440, now seen corresponding path program 1 times
[2020-11-24 20:57:21,522 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:57:21,550 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:57:22,030 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:57:22,030 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:57:22,031 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:57:22,031 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:57:22,031 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:57:22,031 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:57:22,032 INFO  L87              Difference]: Start difference. First operand 12085 states and 13765 transitions. cyclomatic complexity: 1716 Second operand 5 states.
[2020-11-24 20:57:23,382 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:57:23,382 INFO  L93              Difference]: Finished difference Result 14955 states and 17404 transitions.
[2020-11-24 20:57:23,382 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:57:23,382 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 14955 states and 17404 transitions.
[2020-11-24 20:57:23,419 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 44
[2020-11-24 20:57:23,450 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 14955 states to 11106 states and 13230 transitions.
[2020-11-24 20:57:23,450 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2066
[2020-11-24 20:57:23,451 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2261
[2020-11-24 20:57:23,452 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 11106 states and 13230 transitions.
[2020-11-24 20:57:23,460 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:57:23,460 INFO  L728         BuchiCegarLoop]: Abstraction has 11106 states and 13230 transitions.
[2020-11-24 20:57:23,465 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 11106 states and 13230 transitions.
[2020-11-24 20:57:23,522 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 11106 to 9252.
[2020-11-24 20:57:23,522 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9252 states.
[2020-11-24 20:57:23,533 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9252 states to 9252 states and 10727 transitions.
[2020-11-24 20:57:23,533 INFO  L751         BuchiCegarLoop]: Abstraction has 9252 states and 10727 transitions.
[2020-11-24 20:57:23,533 INFO  L631         BuchiCegarLoop]: Abstraction has 9252 states and 10727 transitions.
[2020-11-24 20:57:23,533 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 20:57:23,533 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9252 states and 10727 transitions.
[2020-11-24 20:57:23,542 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 16
[2020-11-24 20:57:23,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:57:23,542 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:57:23,544 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:57:23,544 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_transfer_MainToken0 := false;
[L2]                  call_transfer_MainToken0 := false;
[L2]      CALL        call main();
[L14767]              assume null == 0;
[L14768]  CALL        call this := FreshRefGenerator__success();
[L6697]               havoc newRef;
[L6698]               assume Alloc[newRef] == false;
[L6699]               Alloc[newRef] := true;
[L6700]               assume newRef != null;
[L14768]  RET         call this := FreshRefGenerator__success();
[L14769]              assume now >= 0;
[L14770]              assume DType[this] == MainToken;
[L14771]              assume msgvalue_MSG == 0;
[L14772]              gas := gas - 53000;
[L14773]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4385]               havoc __exception;
[L4386]               revert := false;
[L4387]   COND FALSE  !(__exception)
[L4426]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9506]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9284]               assume msgsender_MSG != null;
[L9285]               Balance[this] := 0;
[L9286]               TOKEN_DECIMALS_Consts[this] := 18;
[L9287]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9288]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9289]               TOKEN_NAME_Consts[this] := 121052762;
[L9290]               TOKEN_SYMBOL_Consts[this] := 121052762;
[L9291]               PAUSED_Consts[this] := false;
[L9292]               __var_52 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9293]               TARGET_USER_Consts[this] := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9294]               CONTINUE_MINTING_Consts[this] := true;
[L9308]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9309]   COND FALSE  !(revert)
[L9506]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9507]   COND FALSE  !(revert)
[L9510]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9510]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9511]   COND FALSE  !(revert)
[L9514]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9514]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9515]   COND FALSE  !(revert)
[L9518]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9518]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9519]   COND FALSE  !(revert)
[L9522]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9522]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9523]   COND FALSE  !(revert)
[L9526]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9526]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9527]   COND FALSE  !(revert)
[L9530]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9530]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9534]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9093]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L9093]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9094]   COND FALSE  !(revert)
[L9097]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L9097]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9098]   COND FALSE  !(revert)
[L9101]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L9101]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9102]   COND FALSE  !(revert)
[L9105]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L9105]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9106]   COND FALSE  !(revert)
[L9109]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7654]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7654]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7655]   COND FALSE  !(revert)
[L7658]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7658]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7659]   COND FALSE  !(revert)
[L7662]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7662]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7663]   COND FALSE  !(revert)
[L7666]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7666]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7667]   COND FALSE  !(revert)
[L7670]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7617]               assume msgsender_MSG != null;
[L7618]               Balance[this] := 0;
[L7619]               chains_FreezableToken[this] := zerointintArr();
[L7620]               sum_chains2[this] := 0;
[L7621]               freezings_FreezableToken[this] := zerointintArr();
[L7622]               sum_freezings3[this] := 0;
[L7623]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7624]               sum_freezingBalance4[this] := 0;
[L7670]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7671]   COND FALSE  !(revert)
[L9109]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9110]   COND FALSE  !(revert)
[L9113]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L9113]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9114]   COND FALSE  !(revert)
[L9117]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7473]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7473]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7474]   COND FALSE  !(revert)
[L7477]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7477]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7478]   COND FALSE  !(revert)
[L7481]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7481]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7482]   COND FALSE  !(revert)
[L7485]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7047]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L7047]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7048]   COND FALSE  !(revert)
[L7051]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6995]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6995]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6996]   COND FALSE  !(revert)
[L6999]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6976]               assume msgsender_MSG != null;
[L6977]               Balance[this] := 0;
[L6999]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]   COND FALSE  !(revert)
[L7051]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7052]   COND FALSE  !(revert)
[L7055]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L7055]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7056]   COND FALSE  !(revert)
[L7059]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7018]               assume msgsender_MSG != null;
[L7019]               Balance[this] := 0;
[L7020]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7021]               sum_allowed1[this] := 0;
[L7059]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7060]   COND FALSE  !(revert)
[L7485]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7486]   COND FALSE  !(revert)
[L7489]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L7489]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7490]   COND FALSE  !(revert)
[L7493]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7437]               assume msgsender_MSG != null;
[L7438]               Balance[this] := 0;
[L7439]               mintingFinished_MintableToken[this] := false;
[L7493]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7494]   COND FALSE  !(revert)
[L9117]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9050]               assume msgsender_MSG != null;
[L9051]               Balance[this] := 0;
[L9121]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9538]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8837]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L8837]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]   COND FALSE  !(revert)
[L8841]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6866]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6729]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6714]               assume msgsender_MSG != null;
[L6715]               Balance[this] := 0;
[L6729]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6730]   COND FALSE  !(revert)
[L6866]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6867]   COND FALSE  !(revert)
[L6870]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6844]               assume msgsender_MSG != null;
[L6845]               Balance[this] := 0;
[L6846]               balances_BasicToken[this] := zeroRefintArr();
[L6847]               sum_balances0[this] := 0;
[L6848]               totalSupply__BasicToken[this] := 0;
[L6870]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6871]   COND FALSE  !(revert)
[L8841]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8842]   COND FALSE  !(revert)
[L8845]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8814]               assume msgsender_MSG != null;
[L8815]               Balance[this] := 0;
[L8845]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8846]   COND FALSE  !(revert)
[L9542]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8963]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7289]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7272]               assume msgsender_MSG != null;
[L7273]               Balance[this] := 0;
[L7274]               owner_Ownable[this] := null;
[L7276]               owner_Ownable[this] := msgsender_MSG;
[L7289]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7290]   COND FALSE  !(revert)
[L8963]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8964]   COND FALSE  !(revert)
[L8967]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8943]               assume msgsender_MSG != null;
[L8944]               Balance[this] := 0;
[L8945]               paused_Pausable[this] := false;
[L8967]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8968]   COND FALSE  !(revert)
[L9546]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9434]               assume msgsender_MSG != null;
[L9435]               Balance[this] := 0;
[L9436]               initialized_MainToken[this] := false;
[L9438]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9754]   COND FALSE  !(!!initialized_MainToken[this])
[L9758]               initialized_MainToken[this] := true;
[L9759]   COND FALSE  !(PAUSED_Consts[this])
[L9769]               __var_57 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9770]               addresses_s1673 := ConstantToRef(486125518849875443936882518942134259020290811154);
[L9771]               __var_58 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9772]               amounts_s1673 := 175000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9773]               __var_59 := 0 % 18446744073709551616;
[L9774]               freezes_s1673 := 0 % 18446744073709551616;
[L9775]               i_s1673 := 0;
[L9776]   COND TRUE   i_s1673 < Length[addresses_s1673]
[L9778]   COND TRUE   M_int_int[freezes_s1673][i_s1673] == 0
[L9779]   COND TRUE   DType[this] == MainToken
[L9780]   CALL        call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L7531]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12753]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7531]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7532]   COND FALSE  !(revert)
[L7535]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12737]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7535]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7536]   COND FALSE  !(revert)
[L7539]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7539]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7540]   COND FALSE  !(revert)
[L7543]               totalSupply__BasicToken[this] := __var_12;
[L7544]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L7544]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7545]   COND FALSE  !(revert)
[L7548]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7549]               balances_BasicToken[this][_to_s664] := __var_13;
[L7550]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7551]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7552]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7553]               __ret_0_ := true;
[L9780]   RET         call __var_60 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1673][i_s1673], M_int_int[amounts_s1673][i_s1673]);
[L9781]   COND FALSE  !(revert)
[L9795]               i_s1673 := (i_s1673 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9796]   COND FALSE  !(gas < 0)
[L9776]   COND FALSE  !(i_s1673 < Length[addresses_s1673])
[L9800]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9810]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9438]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9439]   COND FALSE  !(revert)
[L9442]   COND TRUE   DType[this] == MainToken
[L9443]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7356]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12721]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7356]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   COND TRUE   DType[this] == MainToken
[L7361]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7404]               __var_11 := null;
[L7405]   COND FALSE  !(!(_newOwner_s581 != null))
[L7409]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7410]               owner_Ownable[this] := _newOwner_s581;
[L7361]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7362]   COND FALSE  !(revert)
[L9443]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9444]   COND FALSE  !(revert)
[L9550]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L4426]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4427]               assume !revert && gas >= 0;
[L14773]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14774]              assume !revert && gas >= 0;
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND FALSE  !(choice == 38)
[L14525]  COND FALSE  !(choice == 37)
[L14531]  COND TRUE   choice == 36
[L14532]              gas := gas - 21000;
[L14533]  COND TRUE   gas >= 0
[L14534]              assume _value_s1572 >= 0 && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14535]              assume msgvalue_MSG == 0;
[L14536]  CALL        call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG == _to_s1572 && _value_s1572 <= balances_BasicToken[this][msgsender_MSG]) && _value_s1572 >= 0) && _value_s1572 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][_to_s1572] >= 0) && balances_BasicToken[this][_to_s1572] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_BasicToken[this][msgsender_MSG] >= 0) && balances_BasicToken[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_MainToken0 := true;
[L2]                  call_transfer_MainToken0 := false;
[L2]                  revert := revert_hold;
[L4821]               havoc __exception;
[L4822]               revert := false;
[L4823]   COND FALSE  !(__exception)
[L4862]   CALL        call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9656]   COND FALSE  !(!!paused_Pausable[this])
[L9660]   COND TRUE   DType[this] == MainToken
[L9661]   CALL        call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L6925]               __var_1 := null;
[L6926]   COND FALSE  !(!(_to_s202 != null))
[L6930]   COND FALSE  !(!(_value_s202 <= balances_BasicToken[this][msgsender_MSG]))
[L6934]   CALL        call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6810]               assert b_s98 <= a_s98;
[L6811]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6934]   RET         call __var_2 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _value_s202);
[L6935]   COND FALSE  !(revert)
[L6938]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L6939]               balances_BasicToken[this][msgsender_MSG] := __var_2;
[L6940]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L6941]   CALL        call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6824]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6825]               assert c_s122 >= a_s122;
[L6826]               c_s122 := c_s122;
[L6941]   RET         call __var_3 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s202], _value_s202);
[L6942]   COND FALSE  !(revert)
[L6945]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s202];
[L6946]               balances_BasicToken[this][_to_s202] := __var_3;
[L6947]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s202];
[L6948]               assert { :EventEmitted "Transfer_BasicToken" } true;
[L6949]               __ret_0_ := true;
[L9661]   RET         call __var_55 := transfer~address~uint256_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L9662]   COND FALSE  !(revert)
[L9668]               _success_s1572 := __var_55;
[L4862]   RET         call _success_s1572 := transfer~address~uint256_MainToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L4863]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((_success_s1572 == true && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14536]  RET         call _success_s1572 := transfer~address~uint256_MainToken(this, msgsender_MSG, msgvalue_MSG, _to_s1572, _value_s1572);
[L14777]  RET         call CorralChoice_MainToken(this);

Loop:
[L14777]  CALL        call CorralChoice_MainToken(this);
[L14434]              havoc msgsender_MSG;
[L14435]              havoc msgvalue_MSG;
[L14436]              havoc choice;
[L14437]              havoc __ret_0_totalSupply;
[L14438]              havoc _owner_s729;
[L14439]              havoc balance_s729;
[L14440]              havoc _to_s1572;
[L14441]              havoc _value_s1572;
[L14442]              havoc _success_s1572;
[L14443]              havoc _owner_s395;
[L14444]              havoc _spender_s395;
[L14445]              havoc __ret_0_allowance;
[L14446]              havoc _from_s1551;
[L14447]              havoc _to_s1551;
[L14448]              havoc _value_s1551;
[L14449]              havoc _success_s1551;
[L14450]              havoc _spender_s379;
[L14451]              havoc _value_s379;
[L14452]              havoc __ret_0_approve;
[L14453]              havoc _spender_s437;
[L14454]              havoc _addedValue_s437;
[L14455]              havoc __ret_0_increaseApproval;
[L14456]              havoc _spender_s497;
[L14457]              havoc _subtractedValue_s497;
[L14458]              havoc __ret_0_decreaseApproval;
[L14459]              havoc __ret_0_owner;
[L14460]              havoc _newOwner_s558;
[L14461]              havoc __ret_0_mintingFinished;
[L14462]              havoc _to_s664;
[L14463]              havoc _amount_s664;
[L14464]              havoc __ret_0_mint;
[L14465]              havoc __ret_0_finishMinting;
[L14466]              havoc _owner_s742;
[L14467]              havoc balance_s742;
[L14468]              havoc _owner_s754;
[L14469]              havoc balance_s754;
[L14470]              havoc _addr_s792;
[L14471]              havoc count_s792;
[L14472]              havoc _addr_s849;
[L14473]              havoc _index_s849;
[L14474]              havoc _release_s849;
[L14475]              havoc _balance_s849;
[L14476]              havoc _to_s938;
[L14477]              havoc _amount_s938;
[L14478]              havoc _until_s938;
[L14479]              havoc tokens_s1107;
[L14480]              havoc _value_s1261;
[L14481]              havoc __ret_0_paused;
[L14482]              havoc _to_s1449;
[L14483]              havoc _amount_s1449;
[L14484]              havoc _until_s1449;
[L14485]              havoc __ret_0_mintAndFreeze;
[L14486]              havoc __ret_0_TOKEN_DECIMALS;
[L14487]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14488]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14489]              havoc __ret_0_TOKEN_NAME;
[L14490]              havoc __ret_0_TOKEN_SYMBOL;
[L14491]              havoc __ret_0_PAUSED;
[L14492]              havoc __ret_0_TARGET_USER;
[L14493]              havoc __ret_0_CONTINUE_MINTING;
[L14494]              havoc __ret_0_initialized;
[L14495]              havoc _name_s1511;
[L14496]              havoc _symbol_s1519;
[L14497]              havoc _decimals_s1527;
[L14498]              havoc tmpNow;
[L14499]              havoc gas;
[L14500]              assume gas > 4000000 && gas <= 8000000;
[L14501]              tmpNow := now;
[L14502]              havoc now;
[L14503]              assume now > tmpNow;
[L14504]              assume msgsender_MSG != null;
[L14505]              assume DType[msgsender_MSG] != ERC20Basic;
[L14506]              assume DType[msgsender_MSG] != SafeMath;
[L14507]              assume DType[msgsender_MSG] != BasicToken;
[L14508]              assume DType[msgsender_MSG] != ERC20;
[L14509]              assume DType[msgsender_MSG] != StandardToken;
[L14510]              assume DType[msgsender_MSG] != Ownable;
[L14511]              assume DType[msgsender_MSG] != MintableToken;
[L14512]              assume DType[msgsender_MSG] != FreezableToken;
[L14513]              assume DType[msgsender_MSG] != BurnableToken;
[L14514]              assume DType[msgsender_MSG] != Pausable;
[L14515]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14516]              assume DType[msgsender_MSG] != Consts;
[L14517]              assume DType[msgsender_MSG] != MainToken;
[L14518]              Alloc[msgsender_MSG] := true;
[L14519]  COND TRUE   choice == 38
[L14520]              gas := gas - 21000;
[L14521]  COND FALSE  !(gas >= 0)
[L14777]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:57:23,551 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:57:23,551 INFO  L82        PathProgramCache]: Analyzing trace with hash 5625874, now seen corresponding path program 1 times
[2020-11-24 20:57:23,552 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:57:23,656 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-24 21:11:36,908 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-24 21:11:36,909 INFO  L168              Benchmark]: Toolchain (without parser) took 898727.45 ms. Allocated memory was 1.0 GB in the beginning and 6.7 GB in the end (delta: 5.6 GB). Free memory was 913.7 MB in the beginning and 3.1 GB in the end (delta: -2.2 GB). Peak memory consumption was 6.3 GB. Max. memory is 15.3 GB.
[2020-11-24 21:11:36,910 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:11:36,910 INFO  L168              Benchmark]: Boogie Preprocessor took 177.18 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:11:36,910 INFO  L168              Benchmark]: UtopiaSpecLang took 90.68 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.6 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:11:36,911 INFO  L168              Benchmark]: Boogie Printer took 30.89 ms. Allocated memory is still 1.0 GB. Free memory was 870.6 MB in the beginning and 859.5 MB in the end (delta: 11.1 MB). Peak memory consumption was 11.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:11:36,911 INFO  L168              Benchmark]: RCFGBuilder took 1704.24 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 136.8 MB). Free memory was 859.5 MB in the beginning and 1.0 GB in the end (delta: -162.2 MB). Peak memory consumption was 227.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:11:36,911 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.80 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 14.6 MB). Peak memory consumption was 14.6 MB. Max. memory is 15.3 GB.
[2020-11-24 21:11:36,912 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4033.58 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 597.2 MB). Free memory was 1.0 GB in the beginning and 1.5 GB in the end (delta: -526.6 MB). Peak memory consumption was 716.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:11:36,912 INFO  L168              Benchmark]: BlockEncodingV2 took 301.04 ms. Allocated memory is still 1.8 GB. Free memory was 1.5 GB in the beginning and 1.3 GB in the end (delta: 186.1 MB). Peak memory consumption was 186.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:11:36,912 INFO  L168              Benchmark]: BuchiAutomizer took 892351.25 ms. Allocated memory was 1.8 GB in the beginning and 6.7 GB in the end (delta: 4.9 GB). Free memory was 1.3 GB in the beginning and 3.1 GB in the end (delta: -1.8 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
[2020-11-24 21:11:36,915 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13448 locations, 24717 edges
  - StatisticsResult: Encoded RCFG
    13238 locations, 24131 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 177.18 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 90.68 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.6 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 30.89 ms. Allocated memory is still 1.0 GB. Free memory was 870.6 MB in the beginning and 859.5 MB in the end (delta: 11.1 MB). Peak memory consumption was 11.1 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1704.24 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 136.8 MB). Free memory was 859.5 MB in the beginning and 1.0 GB in the end (delta: -162.2 MB). Peak memory consumption was 227.7 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.80 ms. Allocated memory is still 1.2 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 14.6 MB). Peak memory consumption was 14.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4033.58 ms. Allocated memory was 1.2 GB in the beginning and 1.8 GB in the end (delta: 597.2 MB). Free memory was 1.0 GB in the beginning and 1.5 GB in the end (delta: -526.6 MB). Peak memory consumption was 716.3 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 301.04 ms. Allocated memory is still 1.8 GB. Free memory was 1.5 GB in the beginning and 1.3 GB in the end (delta: 186.1 MB). Peak memory consumption was 186.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 892351.25 ms. Allocated memory was 1.8 GB in the beginning and 6.7 GB in the end (delta: 4.9 GB). Free memory was 1.3 GB in the beginning and 3.1 GB in the end (delta: -1.8 GB). Peak memory consumption was 6.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5384 locations, 7560 edges
  - StatisticsResult: BuchiProgram size
    13448 locations, 24717 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
