This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 15:03:59,160 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 15:03:59,161 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 15:03:59,171 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 15:03:59,171 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 15:03:59,172 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 15:03:59,173 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 15:03:59,174 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 15:03:59,176 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 15:03:59,176 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 15:03:59,177 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 15:03:59,177 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 15:03:59,178 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 15:03:59,178 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 15:03:59,179 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 15:03:59,180 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 15:03:59,180 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 15:03:59,181 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 15:03:59,183 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 15:03:59,184 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 15:03:59,185 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 15:03:59,185 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 15:03:59,187 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 15:03:59,187 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 15:03:59,187 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 15:03:59,188 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 15:03:59,188 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 15:03:59,188 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 15:03:59,189 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 15:03:59,189 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 15:03:59,189 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 15:03:59,190 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 15:03:59,190 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 15:03:59,191 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 15:03:59,191 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 15:03:59,192 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 15:03:59,192 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 15:03:59,192 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 15:03:59,192 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 15:03:59,193 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 15:03:59,193 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 15:03:59,194 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 15:03:59,201 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 15:03:59,201 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 15:03:59,202 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 15:03:59,202 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 15:03:59,202 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 15:03:59,203 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 15:03:59,203 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 15:03:59,203 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 15:03:59,203 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 15:03:59,203 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 15:03:59,203 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 15:03:59,203 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 15:03:59,203 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 15:03:59,203 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 15:03:59,204 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 15:03:59,204 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 15:03:59,204 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 15:03:59,204 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 15:03:59,204 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 15:03:59,204 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 15:03:59,204 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 15:03:59,204 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 15:03:59,204 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 15:03:59,204 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 15:03:59,205 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 15:03:59,205 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 15:03:59,227 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 15:03:59,239 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 15:03:59,241 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 15:03:59,242 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 15:03:59,243 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 15:03:59,243 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl
[2020-11-25 15:03:59,243 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl'
[2020-11-25 15:03:59,316 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 15:03:59,318 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 15:03:59,318 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 15:03:59,318 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 15:03:59,318 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 15:03:59,335 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/1) ...
[2020-11-25 15:03:59,336 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/1) ...
[2020-11-25 15:03:59,363 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/1) ...
[2020-11-25 15:03:59,364 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/1) ...
[2020-11-25 15:03:59,382 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/1) ...
[2020-11-25 15:03:59,392 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/1) ...
[2020-11-25 15:03:59,398 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/1) ...
[2020-11-25 15:03:59,407 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 15:03:59,408 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 15:03:59,408 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 15:03:59,410 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 15:03:59,413 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/1) ...
[2020-11-25 15:03:59,431 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Token.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Token.approve(spender, value), return == true && allowed_ERC20Token[this][msg.sender][spender] == value &&  totalSupply_ERC20[this] == old(totalSupply_ERC20[this]) && balances_ERC20Token[this] == old(balances_ERC20Token[this]) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2]) && name_Erc20Base[this] == old(name_Erc20Base[this]) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this]) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this]) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 15:03:59,436 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Token.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Token.approve(spender, value), return == true && allowed_ERC20Token[this][msg.sender][spender] == value &&  totalSupply_ERC20[this] == old(totalSupply_ERC20[this]) && balances_ERC20Token[this] == old(balances_ERC20Token[this]) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2]) && name_Erc20Base[this] == old(name_Erc20Base[this]) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this]) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this]) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 15:03:59,443 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Token.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Token.approve(spender, value), return == true && allowed_ERC20Token[this][msg.sender][spender] == value &&  totalSupply_ERC20[this] == old(totalSupply_ERC20[this]) && balances_ERC20Token[this] == old(balances_ERC20Token[this]) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2]) && name_Erc20Base[this] == old(name_Erc20Base[this]) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this]) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this]) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 15:03:59,449 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=_spender_s473 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[_spender_s473,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]]
[2020-11-25 15:03:59,452 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( success_s473==true && allowed_ERC20Token[this][msg.sender][_spender_s473]==_value_s473 ) && totalSupply_ERC20[this]==( old(totalSupply_ERC20[this]) ) ) && balances_ERC20Token[this]==( old(balances_ERC20Token[this]) ) ) && allowed_ERC20Token[this][p1][p2]==( old(allowed_ERC20Token[this][p1][p2]) ) ) && name_Erc20Base[this]==( old(name_Erc20Base[this]) ) ) && symbol_Erc20Base[this]==( old(symbol_Erc20Base[this]) ) ) && decimals_Erc20Base[this]==( old(decimals_Erc20Base[this]) ) ) && transferable_ERC20Token[this]==( old(transferable_ERC20Token[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s473,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_ERC20Token>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],[IdentifierExpression[_spender_s473,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],IdentifierExpression[_value_s473,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_Erc20Base,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[transferable_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[transferable_ERC20Token,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Token>]]]]]]
[2020-11-25 15:03:59,457 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Token.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Token.approve(spender, value), return == true && allowed_ERC20Token[this][msg.sender][spender] == value &&  totalSupply_ERC20[this] == old(totalSupply_ERC20[this]) && balances_ERC20Token[this] == old(balances_ERC20Token[this]) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2]) && name_Erc20Base[this] == old(name_Erc20Base[this]) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this]) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this]) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this]) && owner_Owned[this] == old(owner_Owned[this]))))
[2020-11-25 15:03:59,457 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_ERC20Token0) ==> ( <>AP(success_approve_ERC20Token0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 15:03:59,464 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:03:59 PropertyContainer
[2020-11-25 15:03:59,464 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 15:03:59,465 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 15:03:59,465 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 15:03:59,465 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 15:03:59,466 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/2) ...
[2020-11-25 15:03:59,466 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 15:03:59,466 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 15:03:59,479 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:03:59" (2/2) ...
[2020-11-25 15:03:59,479 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 15:03:59,479 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 15:03:59,479 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 15:03:59,480 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 15:03:59,480 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/2) ...
[2020-11-25 15:03:59,530 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 15:03:59,530 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:03:59,531 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 15:03:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 15:03:59,531 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:03:59,531 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:03:59,531 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:03:59,531 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:03:59,531 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:03:59,531 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 15:03:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 15:03:59,531 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 15:03:59,531 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 15:03:59,531 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 15:03:59,532 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 15:03:59,532 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 15:03:59,532 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 15:03:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 15:03:59,532 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 15:03:59,532 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 15:03:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 15:03:59,532 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 15:03:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 15:03:59,533 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 15:03:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 15:03:59,533 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token_NoBaseCtor__success
[2020-11-25 15:03:59,533 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token
[2020-11-25 15:03:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token
[2020-11-25 15:03:59,533 INFO  L130     BoogieDeclarations]: Found specification of procedure setTransferable~bool_ERC20Token
[2020-11-25 15:03:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure setTransferable~bool_ERC20Token
[2020-11-25 15:03:59,533 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Token
[2020-11-25 15:03:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Token
[2020-11-25 15:03:59,533 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Token
[2020-11-25 15:03:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20Token
[2020-11-25 15:03:59,533 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Token
[2020-11-25 15:03:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Token
[2020-11-25 15:03:59,534 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Token
[2020-11-25 15:03:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Token
[2020-11-25 15:03:59,534 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Token
[2020-11-25 15:03:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20Token
[2020-11-25 15:03:59,534 INFO  L130     BoogieDeclarations]: Found specification of procedure signature_ERC20Token
[2020-11-25 15:03:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure signature_ERC20Token
[2020-11-25 15:03:59,534 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Token__success
[2020-11-25 15:03:59,534 INFO  L130     BoogieDeclarations]: Found specification of procedure transferable_ERC20Token
[2020-11-25 15:03:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferable_ERC20Token
[2020-11-25 15:03:59,534 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base_NoBaseCtor__success
[2020-11-25 15:03:59,534 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base
[2020-11-25 15:03:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Erc20Base
[2020-11-25 15:03:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Erc20Base
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Erc20Base
[2020-11-25 15:03:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Erc20Base
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Erc20Base
[2020-11-25 15:03:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Erc20Base
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer_pre__success
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 15:03:59,535 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Token
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Token
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Erc20Base
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:03:59,536 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 15:03:59,537 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token_NoBaseCtor__fail
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token__success
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Token_ERC20Token__fail
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure setTransferable~bool_ERC20Token__success
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure setTransferable~bool_ERC20Token__fail
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Token__success
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Token__fail
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Token__success
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Token__fail
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Token__success
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Token__fail
[2020-11-25 15:03:59,538 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Token__success
[2020-11-25 15:03:59,539 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Token__fail
[2020-11-25 15:03:59,539 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Token__success
[2020-11-25 15:03:59,539 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Token__fail
[2020-11-25 15:03:59,539 INFO  L130     BoogieDeclarations]: Found specification of procedure signature_ERC20Token__success
[2020-11-25 15:03:59,539 INFO  L130     BoogieDeclarations]: Found specification of procedure signature_ERC20Token__fail
[2020-11-25 15:03:59,539 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_ERC20Token__fail
[2020-11-25 15:03:59,539 INFO  L130     BoogieDeclarations]: Found specification of procedure transferable_ERC20Token__success
[2020-11-25 15:03:59,539 INFO  L130     BoogieDeclarations]: Found specification of procedure transferable_ERC20Token__fail
[2020-11-25 15:03:59,539 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base_NoBaseCtor__fail
[2020-11-25 15:03:59,539 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base__success
[2020-11-25 15:03:59,540 INFO  L130     BoogieDeclarations]: Found specification of procedure Erc20Base_Erc20Base__fail
[2020-11-25 15:03:59,540 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Erc20Base__success
[2020-11-25 15:03:59,540 INFO  L130     BoogieDeclarations]: Found specification of procedure name_Erc20Base__fail
[2020-11-25 15:03:59,540 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Erc20Base__success
[2020-11-25 15:03:59,540 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_Erc20Base__fail
[2020-11-25 15:03:59,540 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Erc20Base__success
[2020-11-25 15:03:59,540 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_Erc20Base__fail
[2020-11-25 15:03:59,540 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 15:03:59,541 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 15:03:59,541 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 15:03:59,541 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 15:03:59,541 INFO  L130     BoogieDeclarations]: Found specification of procedure canTransfer_pre__fail
[2020-11-25 15:03:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 15:03:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 15:03:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 15:03:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 15:03:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 15:03:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 15:03:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 15:03:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 15:03:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 15:03:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 15:03:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 15:03:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 15:03:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 15:03:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 15:03:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 15:03:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 15:03:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 15:03:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 15:03:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 15:03:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 15:03:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 15:03:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 15:03:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 15:03:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 15:03:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 15:03:59,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 15:03:59,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 15:03:59,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 15:03:59,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token_NoBaseCtor__fail
[2020-11-25 15:03:59,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token_NoBaseCtor__success
[2020-11-25 15:03:59,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token__fail
[2020-11-25 15:03:59,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Token_ERC20Token__success
[2020-11-25 15:03:59,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure setTransferable~bool_ERC20Token__fail
[2020-11-25 15:03:59,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure setTransferable~bool_ERC20Token__success
[2020-11-25 15:03:59,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Token__fail
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Token__success
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20Token__fail
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20Token__success
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Token__fail
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Token__success
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Token__fail
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Token__success
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20Token__fail
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20Token__success
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure signature_ERC20Token__fail
[2020-11-25 15:03:59,545 INFO  L138     BoogieDeclarations]: Found implementation of procedure signature_ERC20Token__success
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Token__fail
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_ERC20Token__success
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferable_ERC20Token__fail
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferable_ERC20Token__success
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base_NoBaseCtor__fail
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base_NoBaseCtor__success
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base__fail
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure Erc20Base_Erc20Base__success
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Erc20Base__fail
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_Erc20Base__success
[2020-11-25 15:03:59,546 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Erc20Base__fail
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_Erc20Base__success
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Erc20Base__fail
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_Erc20Base__success
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 15:03:59,547 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer_pre__fail
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure canTransfer_pre__success
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Token
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Token
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Erc20Base
[2020-11-25 15:03:59,548 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 15:03:59,548 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 15:03:59,549 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 15:03:59,626 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:03:59,627 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:03:59,628 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:03:59,928 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 15:04:00,142 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 15:04:00,143 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 15:04:00,144 INFO  L202        PluginConnector]: Adding new model Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:04:00 BoogieIcfgContainer
[2020-11-25 15:04:00,145 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:03:59" (2/2) ...
[2020-11-25 15:04:00,145 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 15:04:00,145 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2ac2d5b2 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:04:00, skipping insertion in model container
[2020-11-25 15:04:00,145 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 15:04:00,145 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 15:04:00,145 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 15:04:00,147 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 15:04:00,147 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/3) ...
[2020-11-25 15:04:00,147 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@436148bd and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:04:00, skipping insertion in model container
[2020-11-25 15:04:00,147 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:03:59" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 15:04:00,182 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:04:00 NWAContainer
[2020-11-25 15:04:00,182 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 15:04:00,182 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 15:04:00,182 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 15:04:00,183 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 15:04:00,184 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:04:00" (3/4) ...
[2020-11-25 15:04:00,185 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@53d37007 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:04:00, skipping insertion in model container
[2020-11-25 15:04:00,185 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:04:00" (4/4) ...
[2020-11-25 15:04:00,188 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 15:04:00,191 INFO  L110   BuchiProductObserver]: Initial RCFG 1323 locations, 1717 edges
[2020-11-25 15:04:00,191 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 15:04:00,201 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 15:04:01,382 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 15:04:01,386 INFO  L110   BuchiProductObserver]: BuchiProgram size 3206 locations, 5612 edges
[2020-11-25 15:04:01,387 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:04:01 BoogieIcfgContainer
[2020-11-25 15:04:01,387 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 15:04:01,387 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 15:04:01,387 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 15:04:01,388 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 15:04:01,389 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:04:01" (1/1) ...
[2020-11-25 15:04:01,482 INFO  L313           BlockEncoder]: Initial Icfg 3206 locations, 5612 edges
[2020-11-25 15:04:01,482 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 15:04:01,483 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 15:04:01,483 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 15:04:01,484 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 15:04:01,495 INFO  L70    emoveInfeasibleEdges]: Removed 51 edges and 13 locations because of local infeasibility
[2020-11-25 15:04:01,502 INFO  L70        RemoveSinkStates]: Removed 2 edges and 1 locations by removing sink states
[2020-11-25 15:04:01,513 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 15:04:01,517 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 15:04:01,520 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 15:04:01,520 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 15:04:01,525 INFO  L313           BlockEncoder]: Encoded RCFG 3172 locations, 5530 edges
[2020-11-25 15:04:01,526 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:04:01 BasicIcfg
[2020-11-25 15:04:01,526 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 15:04:01,526 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 15:04:01,526 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 15:04:01,529 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 15:04:01,529 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:01,529 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 03:03:59" (1/6) ...
[2020-11-25 15:04:01,531 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d837eeb and model type Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:04:01, skipping insertion in model container
[2020-11-25 15:04:01,531 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:01,531 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 03:03:59" (2/6) ...
[2020-11-25 15:04:01,531 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d837eeb and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:04:01, skipping insertion in model container
[2020-11-25 15:04:01,531 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:01,531 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 03:04:00" (3/6) ...
[2020-11-25 15:04:01,531 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d837eeb and model type Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:04:01, skipping insertion in model container
[2020-11-25 15:04:01,531 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:01,532 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 03:04:00" (4/6) ...
[2020-11-25 15:04:01,532 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d837eeb and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 03:04:01, skipping insertion in model container
[2020-11-25 15:04:01,532 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:01,532 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 03:04:01" (5/6) ...
[2020-11-25 15:04:01,532 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@6d837eeb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 03:04:01, skipping insertion in model container
[2020-11-25 15:04:01,532 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 15:04:01,533 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 03:04:01" (6/6) ...
[2020-11-25 15:04:01,534 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Erc20Base_0x6251e725cd45fb1af99354035a414a2c0890b929_approve.bpl_BEv2
[2020-11-25 15:04:01,572 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 15:04:01,572 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 15:04:01,573 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 15:04:01,573 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 15:04:01,573 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 15:04:01,573 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 15:04:01,573 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 15:04:01,573 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 15:04:01,573 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 15:04:01,608 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3172 states.
[2020-11-25 15:04:01,656 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:01,656 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:01,656 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:01,665 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:01,665 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:01,666 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 15:04:01,666 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3172 states.
[2020-11-25 15:04:01,684 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:01,685 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:01,685 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:01,687 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:01,687 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Token0 := false;
[L3]                 call_approve_ERC20Token0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3816]              assume null == 0;
[L3817]  CALL        call this := FreshRefGenerator__success();
[L1655]              havoc newRef;
[L1656]              assume Alloc[newRef] == false;
[L1657]              Alloc[newRef] := true;
[L1658]              assume newRef != null;
[L3817]  RET         call this := FreshRefGenerator__success();
[L3818]              assume now >= 0;
[L3819]              assume DType[this] == Erc20Base;
[L3820]              assume msgvalue_MSG == 0;
[L3821]              gas := gas - 53000;
[L3822]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L977]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2284]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L2284]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND TRUE   revert
[L977]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L978]               assume !revert && gas >= 0;
[L3822]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3823]              assume !revert && gas >= 0;

Loop:
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND TRUE   choice == 14
[L3717]              gas := gas - 21000;
[L3718]  COND FALSE  !(gas >= 0)
[L3826]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:01,704 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:01,704 INFO  L82        PathProgramCache]: Analyzing trace with hash 796873224, now seen corresponding path program 1 times
[2020-11-25 15:04:01,710 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:01,734 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:01,780 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:04:01,784 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:01,784 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 15:04:01,788 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:01,962 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 15:04:01,962 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 15:04:01,964 INFO  L87              Difference]: Start difference. First operand 3172 states. Second operand 3 states.
[2020-11-25 15:04:02,139 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:02,139 INFO  L93              Difference]: Finished difference Result 1954 states and 2159 transitions.
[2020-11-25 15:04:02,139 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 15:04:02,141 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1954 states and 2159 transitions.
[2020-11-25 15:04:02,153 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:02,171 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1954 states to 1950 states and 2151 transitions.
[2020-11-25 15:04:02,172 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 15:04:02,174 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 652
[2020-11-25 15:04:02,175 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1950 states and 2151 transitions.
[2020-11-25 15:04:02,181 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:02,181 INFO  L728         BuchiCegarLoop]: Abstraction has 1950 states and 2151 transitions.
[2020-11-25 15:04:02,198 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1950 states and 2151 transitions.
[2020-11-25 15:04:02,237 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1950 to 1950.
[2020-11-25 15:04:02,238 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1950 states.
[2020-11-25 15:04:02,243 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1950 states to 1950 states and 2151 transitions.
[2020-11-25 15:04:02,244 INFO  L751         BuchiCegarLoop]: Abstraction has 1950 states and 2151 transitions.
[2020-11-25 15:04:02,244 INFO  L631         BuchiCegarLoop]: Abstraction has 1950 states and 2151 transitions.
[2020-11-25 15:04:02,244 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 15:04:02,244 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1950 states and 2151 transitions.
[2020-11-25 15:04:02,251 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:02,252 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:02,252 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:02,254 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:02,254 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Token0 := false;
[L3]                 call_approve_ERC20Token0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3816]              assume null == 0;
[L3817]  CALL        call this := FreshRefGenerator__success();
[L1655]              havoc newRef;
[L1656]              assume Alloc[newRef] == false;
[L1657]              Alloc[newRef] := true;
[L1658]              assume newRef != null;
[L3817]  RET         call this := FreshRefGenerator__success();
[L3818]              assume now >= 0;
[L3819]              assume DType[this] == Erc20Base;
[L3820]              assume msgvalue_MSG == 0;
[L3821]              gas := gas - 53000;
[L3822]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L977]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2284]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L2284]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND TRUE   revert
[L977]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L978]               assume !revert && gas >= 0;
[L3822]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3823]              assume !revert && gas >= 0;
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND FALSE  !(__exception)
[L736]   CALL        call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2155]  COND TRUE   _value_s473 != 0 && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0
[L2156]              revert := true;
[L736]   RET         call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L737]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s473 == true && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] == _value_s473) && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND FALSE  !(__exception)
[L736]   CALL        call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2155]  COND TRUE   _value_s473 != 0 && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0
[L2156]              revert := true;
[L736]   RET         call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L737]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s473 == true && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] == _value_s473) && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:02,258 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:02,258 INFO  L82        PathProgramCache]: Analyzing trace with hash 252826247, now seen corresponding path program 1 times
[2020-11-25 15:04:02,259 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:02,271 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:02,297 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 15:04:02,297 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:02,297 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 15:04:02,299 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:02,299 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 15:04:02,299 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 15:04:02,299 INFO  L87              Difference]: Start difference. First operand 1950 states and 2151 transitions. cyclomatic complexity: 203 Second operand 4 states.
[2020-11-25 15:04:02,595 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:02,595 INFO  L93              Difference]: Finished difference Result 2778 states and 3145 transitions.
[2020-11-25 15:04:02,595 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 15:04:02,596 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2778 states and 3145 transitions.
[2020-11-25 15:04:02,612 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 15:04:02,628 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2778 states to 2696 states and 3051 transitions.
[2020-11-25 15:04:02,628 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 884
[2020-11-25 15:04:02,630 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 891
[2020-11-25 15:04:02,630 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2696 states and 3051 transitions.
[2020-11-25 15:04:02,637 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:02,637 INFO  L728         BuchiCegarLoop]: Abstraction has 2696 states and 3051 transitions.
[2020-11-25 15:04:02,641 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2696 states and 3051 transitions.
[2020-11-25 15:04:02,670 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2696 to 1956.
[2020-11-25 15:04:02,670 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1956 states.
[2020-11-25 15:04:02,674 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1956 states to 1956 states and 2091 transitions.
[2020-11-25 15:04:02,674 INFO  L751         BuchiCegarLoop]: Abstraction has 1956 states and 2091 transitions.
[2020-11-25 15:04:02,674 INFO  L631         BuchiCegarLoop]: Abstraction has 1956 states and 2091 transitions.
[2020-11-25 15:04:02,674 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 15:04:02,674 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1956 states and 2091 transitions.
[2020-11-25 15:04:02,680 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:02,681 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:02,681 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:02,683 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:02,683 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Token0 := false;
[L3]                 call_approve_ERC20Token0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3816]              assume null == 0;
[L3817]  CALL        call this := FreshRefGenerator__success();
[L1655]              havoc newRef;
[L1656]              assume Alloc[newRef] == false;
[L1657]              Alloc[newRef] := true;
[L1658]              assume newRef != null;
[L3817]  RET         call this := FreshRefGenerator__success();
[L3818]              assume now >= 0;
[L3819]              assume DType[this] == Erc20Base;
[L3820]              assume msgvalue_MSG == 0;
[L3821]              gas := gas - 53000;
[L3822]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L977]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2284]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L2284]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1841]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1824]              assume msgsender_MSG != null;
[L1825]              Balance[this] := 0;
[L1826]              owner_Owned[this] := null;
[L1828]              owner_Owned[this] := _owner_s185;
[L1841]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1842]  COND FALSE  !(revert)
[L2288]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2289]  COND FALSE  !(revert)
[L2292]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L1930]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1931]  COND FALSE  !(revert)
[L1934]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1906]              assume msgsender_MSG != null;
[L1907]              Balance[this] := 0;
[L1908]              balances_ERC20Token[this] := zeroRefintArr();
[L1909]              sum_balances0[this] := 0;
[L1910]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1911]              sum_allowed1[this] := 0;
[L1912]              transferable_ERC20Token[this] := true;
[L1934]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1935]  COND FALSE  !(revert)
[L2292]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2293]  COND FALSE  !(revert)
[L2296]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2246]              assume msgsender_MSG != null;
[L2247]              Balance[this] := 0;
[L2248]              name_Erc20Base[this] := -1000343086;
[L2249]              symbol_Erc20Base[this] := -1000343086;
[L2250]              decimals_Erc20Base[this] := 0;
[L2252]              name_Erc20Base[this] := _name_s560;
[L2253]              symbol_Erc20Base[this] := _symbol_s560;
[L2254]              decimals_Erc20Base[this] := _decimals_s560;
[L2255]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2256]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2257]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2258]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2259]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2296]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2297]  COND FALSE  !(revert)
[L977]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L978]               assume !revert && gas >= 0;
[L3822]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3823]              assume !revert && gas >= 0;
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND FALSE  !(__exception)
[L736]   CALL        call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2155]  COND FALSE  !(_value_s473 != 0 && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0)
[L2159]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2160]              allowed_ERC20Token[this][msgsender_MSG][_spender_s473] := _value_s473;
[L2161]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2162]              assert { :EventEmitted "Approval_ERC20Token" } true;
[L2163]              success_s473 := true;
[L736]   RET         call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L737]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s473 == true && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] == _value_s473) && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND FALSE  !(__exception)
[L736]   CALL        call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2155]  COND FALSE  !(_value_s473 != 0 && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0)
[L2159]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2160]              allowed_ERC20Token[this][msgsender_MSG][_spender_s473] := _value_s473;
[L2161]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2162]              assert { :EventEmitted "Approval_ERC20Token" } true;
[L2163]              success_s473 := true;
[L736]   RET         call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L737]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s473 == true && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] == _value_s473) && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:02,687 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:02,688 INFO  L82        PathProgramCache]: Analyzing trace with hash 481057379, now seen corresponding path program 1 times
[2020-11-25 15:04:02,688 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:02,721 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:02,866 INFO  L134       CoverageAnalysis]: Checked inductivity of 11 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-25 15:04:02,866 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:02,867 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 15:04:02,867 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:02,867 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 15:04:02,867 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 15:04:02,868 INFO  L87              Difference]: Start difference. First operand 1956 states and 2091 transitions. cyclomatic complexity: 137 Second operand 14 states.
[2020-11-25 15:04:04,182 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:04,182 INFO  L93              Difference]: Finished difference Result 2067 states and 2224 transitions.
[2020-11-25 15:04:04,182 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 15:04:04,182 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2067 states and 2224 transitions.
[2020-11-25 15:04:04,189 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 15:04:04,195 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2067 states to 2067 states and 2224 transitions.
[2020-11-25 15:04:04,195 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 709
[2020-11-25 15:04:04,197 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 709
[2020-11-25 15:04:04,197 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2067 states and 2224 transitions.
[2020-11-25 15:04:04,198 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:04,199 INFO  L728         BuchiCegarLoop]: Abstraction has 2067 states and 2224 transitions.
[2020-11-25 15:04:04,200 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2067 states and 2224 transitions.
[2020-11-25 15:04:04,216 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2067 to 2036.
[2020-11-25 15:04:04,216 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2036 states.
[2020-11-25 15:04:04,219 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2036 states to 2036 states and 2184 transitions.
[2020-11-25 15:04:04,219 INFO  L751         BuchiCegarLoop]: Abstraction has 2036 states and 2184 transitions.
[2020-11-25 15:04:04,219 INFO  L631         BuchiCegarLoop]: Abstraction has 2036 states and 2184 transitions.
[2020-11-25 15:04:04,219 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 15:04:04,219 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2036 states and 2184 transitions.
[2020-11-25 15:04:04,224 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 15:04:04,224 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:04,224 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:04,227 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:04,227 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Token0 := false;
[L3]                 call_approve_ERC20Token0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3816]              assume null == 0;
[L3817]  CALL        call this := FreshRefGenerator__success();
[L1655]              havoc newRef;
[L1656]              assume Alloc[newRef] == false;
[L1657]              Alloc[newRef] := true;
[L1658]              assume newRef != null;
[L3817]  RET         call this := FreshRefGenerator__success();
[L3818]              assume now >= 0;
[L3819]              assume DType[this] == Erc20Base;
[L3820]              assume msgvalue_MSG == 0;
[L3821]              gas := gas - 53000;
[L3822]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L977]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2284]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L2284]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1841]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1824]              assume msgsender_MSG != null;
[L1825]              Balance[this] := 0;
[L1826]              owner_Owned[this] := null;
[L1828]              owner_Owned[this] := _owner_s185;
[L1841]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1842]  COND FALSE  !(revert)
[L2288]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2289]  COND FALSE  !(revert)
[L2292]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L1930]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1931]  COND FALSE  !(revert)
[L1934]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1906]              assume msgsender_MSG != null;
[L1907]              Balance[this] := 0;
[L1908]              balances_ERC20Token[this] := zeroRefintArr();
[L1909]              sum_balances0[this] := 0;
[L1910]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1911]              sum_allowed1[this] := 0;
[L1912]              transferable_ERC20Token[this] := true;
[L1934]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1935]  COND FALSE  !(revert)
[L2292]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2293]  COND FALSE  !(revert)
[L2296]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2246]              assume msgsender_MSG != null;
[L2247]              Balance[this] := 0;
[L2248]              name_Erc20Base[this] := -1000343086;
[L2249]              symbol_Erc20Base[this] := -1000343086;
[L2250]              decimals_Erc20Base[this] := 0;
[L2252]              name_Erc20Base[this] := _name_s560;
[L2253]              symbol_Erc20Base[this] := _symbol_s560;
[L2254]              decimals_Erc20Base[this] := _decimals_s560;
[L2255]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2256]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2257]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2258]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2259]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2296]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2297]  COND FALSE  !(revert)
[L977]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L978]               assume !revert && gas >= 0;
[L3822]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3823]              assume !revert && gas >= 0;
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND TRUE   __exception
[L714]               __tmp__Balance := Balance;
[L715]               __tmp__DType := DType;
[L716]               __tmp__Alloc := Alloc;
[L717]               __tmp__balance_ADDR := balance_ADDR;
[L718]               __tmp__M_Ref_int := M_Ref_int;
[L719]               __tmp__sum_balances0 := sum_balances0;
[L720]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L721]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L722]               __tmp__sum_allowed1 := sum_allowed1;
[L723]               __tmp__Length := Length;
[L724]               __tmp__now := now;
[L725]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L726]               __tmp__owner_Owned := owner_Owned;
[L727]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L728]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L729]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L730]               __tmp__name_Erc20Base := name_Erc20Base;
[L731]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L732]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L733]   CALL        call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2142]  COND TRUE   _value_s473 != 0 && __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0
[L2143]              revert := true;
[L733]   RET         call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L734]               assume revert || gas < 0;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND TRUE   __exception
[L714]               __tmp__Balance := Balance;
[L715]               __tmp__DType := DType;
[L716]               __tmp__Alloc := Alloc;
[L717]               __tmp__balance_ADDR := balance_ADDR;
[L718]               __tmp__M_Ref_int := M_Ref_int;
[L719]               __tmp__sum_balances0 := sum_balances0;
[L720]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L721]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L722]               __tmp__sum_allowed1 := sum_allowed1;
[L723]               __tmp__Length := Length;
[L724]               __tmp__now := now;
[L725]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L726]               __tmp__owner_Owned := owner_Owned;
[L727]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L728]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L729]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L730]               __tmp__name_Erc20Base := name_Erc20Base;
[L731]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L732]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L733]   CALL        call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2142]  COND TRUE   _value_s473 != 0 && __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0
[L2143]              revert := true;
[L733]   RET         call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L734]               assume revert || gas < 0;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:04,230 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:04,231 INFO  L82        PathProgramCache]: Analyzing trace with hash -2046829160, now seen corresponding path program 1 times
[2020-11-25 15:04:04,231 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:04,239 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:04,295 INFO  L134       CoverageAnalysis]: Checked inductivity of 11 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-25 15:04:04,296 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:04,296 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 15:04:04,297 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:04,297 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 15:04:04,297 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=133, Unknown=0, NotChecked=0, Total=156
[2020-11-25 15:04:04,297 INFO  L87              Difference]: Start difference. First operand 2036 states and 2184 transitions. cyclomatic complexity: 152 Second operand 13 states.
[2020-11-25 15:04:05,662 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:05,662 INFO  L93              Difference]: Finished difference Result 3686 states and 4041 transitions.
[2020-11-25 15:04:05,663 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 15:04:05,663 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3686 states and 4041 transitions.
[2020-11-25 15:04:05,672 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 12
[2020-11-25 15:04:05,682 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3686 states to 3686 states and 4041 transitions.
[2020-11-25 15:04:05,682 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1378
[2020-11-25 15:04:05,683 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1378
[2020-11-25 15:04:05,683 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3686 states and 4041 transitions.
[2020-11-25 15:04:05,685 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:05,685 INFO  L728         BuchiCegarLoop]: Abstraction has 3686 states and 4041 transitions.
[2020-11-25 15:04:05,687 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3686 states and 4041 transitions.
[2020-11-25 15:04:05,720 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3686 to 3658.
[2020-11-25 15:04:05,721 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3658 states.
[2020-11-25 15:04:05,724 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3658 states to 3658 states and 3975 transitions.
[2020-11-25 15:04:05,725 INFO  L751         BuchiCegarLoop]: Abstraction has 3658 states and 3975 transitions.
[2020-11-25 15:04:05,725 INFO  L631         BuchiCegarLoop]: Abstraction has 3658 states and 3975 transitions.
[2020-11-25 15:04:05,725 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 15:04:05,725 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3658 states and 3975 transitions.
[2020-11-25 15:04:05,729 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 8
[2020-11-25 15:04:05,730 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:05,730 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:05,731 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:05,731 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Token0 := false;
[L3]                 call_approve_ERC20Token0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3816]              assume null == 0;
[L3817]  CALL        call this := FreshRefGenerator__success();
[L1655]              havoc newRef;
[L1656]              assume Alloc[newRef] == false;
[L1657]              Alloc[newRef] := true;
[L1658]              assume newRef != null;
[L3817]  RET         call this := FreshRefGenerator__success();
[L3818]              assume now >= 0;
[L3819]              assume DType[this] == Erc20Base;
[L3820]              assume msgvalue_MSG == 0;
[L3821]              gas := gas - 53000;
[L3822]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L977]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2284]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L2284]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1841]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1824]              assume msgsender_MSG != null;
[L1825]              Balance[this] := 0;
[L1826]              owner_Owned[this] := null;
[L1828]              owner_Owned[this] := _owner_s185;
[L1841]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1842]  COND FALSE  !(revert)
[L2288]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2289]  COND FALSE  !(revert)
[L2292]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L1930]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1931]  COND FALSE  !(revert)
[L1934]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1906]              assume msgsender_MSG != null;
[L1907]              Balance[this] := 0;
[L1908]              balances_ERC20Token[this] := zeroRefintArr();
[L1909]              sum_balances0[this] := 0;
[L1910]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1911]              sum_allowed1[this] := 0;
[L1912]              transferable_ERC20Token[this] := true;
[L1934]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1935]  COND FALSE  !(revert)
[L2292]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2293]  COND FALSE  !(revert)
[L2296]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2246]              assume msgsender_MSG != null;
[L2247]              Balance[this] := 0;
[L2248]              name_Erc20Base[this] := -1000343086;
[L2249]              symbol_Erc20Base[this] := -1000343086;
[L2250]              decimals_Erc20Base[this] := 0;
[L2252]              name_Erc20Base[this] := _name_s560;
[L2253]              symbol_Erc20Base[this] := _symbol_s560;
[L2254]              decimals_Erc20Base[this] := _decimals_s560;
[L2255]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2256]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2257]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2258]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2259]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2296]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2297]  COND FALSE  !(revert)
[L977]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L978]               assume !revert && gas >= 0;
[L3822]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3823]              assume !revert && gas >= 0;
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND TRUE   __exception
[L714]               __tmp__Balance := Balance;
[L715]               __tmp__DType := DType;
[L716]               __tmp__Alloc := Alloc;
[L717]               __tmp__balance_ADDR := balance_ADDR;
[L718]               __tmp__M_Ref_int := M_Ref_int;
[L719]               __tmp__sum_balances0 := sum_balances0;
[L720]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L721]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L722]               __tmp__sum_allowed1 := sum_allowed1;
[L723]               __tmp__Length := Length;
[L724]               __tmp__now := now;
[L725]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L726]               __tmp__owner_Owned := owner_Owned;
[L727]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L728]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L729]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L730]               __tmp__name_Erc20Base := name_Erc20Base;
[L731]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L732]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L733]   CALL        call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2142]  COND FALSE  !(_value_s473 != 0 && __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0)
[L2146]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] - __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2147]              __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473] := _value_s473;
[L2148]              __tmp__sum_allowed1[msgsender_MSG] := __tmp__sum_allowed1[msgsender_MSG] + __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2149]              success_s473 := true;
[L733]   RET         call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L734]               assume revert || gas < 0;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND TRUE   choice == 14
[L3717]              gas := gas - 21000;
[L3718]  COND FALSE  !(gas >= 0)
[L3826]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:05,733 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:05,733 INFO  L82        PathProgramCache]: Analyzing trace with hash 1704799716, now seen corresponding path program 1 times
[2020-11-25 15:04:05,734 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:05,741 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:05,766 INFO  L134       CoverageAnalysis]: Checked inductivity of 11 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 11 trivial. 0 not checked.
[2020-11-25 15:04:05,766 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:05,766 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 15:04:05,766 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:05,766 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 15:04:05,766 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=10, Invalid=20, Unknown=0, NotChecked=0, Total=30
[2020-11-25 15:04:05,767 INFO  L87              Difference]: Start difference. First operand 3658 states and 3975 transitions. cyclomatic complexity: 323 Second operand 6 states.
[2020-11-25 15:04:06,041 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:06,041 INFO  L93              Difference]: Finished difference Result 2604 states and 2887 transitions.
[2020-11-25 15:04:06,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 15:04:06,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2604 states and 2887 transitions.
[2020-11-25 15:04:06,047 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 15:04:06,052 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2604 states to 1889 states and 2165 transitions.
[2020-11-25 15:04:06,052 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 572
[2020-11-25 15:04:06,052 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 632
[2020-11-25 15:04:06,052 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1889 states and 2165 transitions.
[2020-11-25 15:04:06,054 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:06,054 INFO  L728         BuchiCegarLoop]: Abstraction has 1889 states and 2165 transitions.
[2020-11-25 15:04:06,055 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1889 states and 2165 transitions.
[2020-11-25 15:04:06,064 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1889 to 1350.
[2020-11-25 15:04:06,065 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1350 states.
[2020-11-25 15:04:06,066 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1350 states to 1350 states and 1457 transitions.
[2020-11-25 15:04:06,066 INFO  L751         BuchiCegarLoop]: Abstraction has 1350 states and 1457 transitions.
[2020-11-25 15:04:06,066 INFO  L631         BuchiCegarLoop]: Abstraction has 1350 states and 1457 transitions.
[2020-11-25 15:04:06,066 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 15:04:06,066 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1350 states and 1457 transitions.
[2020-11-25 15:04:06,067 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:06,067 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:06,067 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:06,068 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:06,068 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Token0 := false;
[L3]                 call_approve_ERC20Token0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3816]              assume null == 0;
[L3817]  CALL        call this := FreshRefGenerator__success();
[L1655]              havoc newRef;
[L1656]              assume Alloc[newRef] == false;
[L1657]              Alloc[newRef] := true;
[L1658]              assume newRef != null;
[L3817]  RET         call this := FreshRefGenerator__success();
[L3818]              assume now >= 0;
[L3819]              assume DType[this] == Erc20Base;
[L3820]              assume msgvalue_MSG == 0;
[L3821]              gas := gas - 53000;
[L3822]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L977]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2284]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L2284]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1841]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1824]              assume msgsender_MSG != null;
[L1825]              Balance[this] := 0;
[L1826]              owner_Owned[this] := null;
[L1828]              owner_Owned[this] := _owner_s185;
[L1841]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1842]  COND FALSE  !(revert)
[L2288]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2289]  COND FALSE  !(revert)
[L2292]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L1930]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1931]  COND FALSE  !(revert)
[L1934]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1906]              assume msgsender_MSG != null;
[L1907]              Balance[this] := 0;
[L1908]              balances_ERC20Token[this] := zeroRefintArr();
[L1909]              sum_balances0[this] := 0;
[L1910]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1911]              sum_allowed1[this] := 0;
[L1912]              transferable_ERC20Token[this] := true;
[L1934]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1935]  COND FALSE  !(revert)
[L2292]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2293]  COND FALSE  !(revert)
[L2296]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2246]              assume msgsender_MSG != null;
[L2247]              Balance[this] := 0;
[L2248]              name_Erc20Base[this] := -1000343086;
[L2249]              symbol_Erc20Base[this] := -1000343086;
[L2250]              decimals_Erc20Base[this] := 0;
[L2252]              name_Erc20Base[this] := _name_s560;
[L2253]              symbol_Erc20Base[this] := _symbol_s560;
[L2254]              decimals_Erc20Base[this] := _decimals_s560;
[L2255]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2256]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2257]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2258]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2259]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2296]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2297]  COND FALSE  !(revert)
[L977]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L978]               assume !revert && gas >= 0;
[L3822]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3823]              assume !revert && gas >= 0;
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(p1 != msgsender_MSG || p2 != _spender_s473);
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND FALSE  !(__exception)
[L736]   CALL        call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2155]  COND FALSE  !(_value_s473 != 0 && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0)
[L2159]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2160]              allowed_ERC20Token[this][msgsender_MSG][_spender_s473] := _value_s473;
[L2161]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2162]              assert { :EventEmitted "Approval_ERC20Token" } true;
[L2163]              success_s473 := true;
[L736]   RET         call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L737]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s473 == true && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] == _value_s473) && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND FALSE  !(__exception)
[L736]   CALL        call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2155]  COND FALSE  !(_value_s473 != 0 && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0)
[L2159]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2160]              allowed_ERC20Token[this][msgsender_MSG][_spender_s473] := _value_s473;
[L2161]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2162]              assert { :EventEmitted "Approval_ERC20Token" } true;
[L2163]              success_s473 := true;
[L736]   RET         call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L737]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s473 == true && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] == _value_s473) && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND TRUE   choice == 14
[L3717]              gas := gas - 21000;
[L3718]  COND FALSE  !(gas >= 0)
[L3826]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:06,071 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:06,072 INFO  L82        PathProgramCache]: Analyzing trace with hash -175476530, now seen corresponding path program 1 times
[2020-11-25 15:04:06,072 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:06,087 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:06,146 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 15:04:06,146 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 15:04:06,146 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 15:04:06,146 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:06,147 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 15:04:06,147 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=29, Unknown=0, NotChecked=0, Total=42
[2020-11-25 15:04:06,147 INFO  L87              Difference]: Start difference. First operand 1350 states and 1457 transitions. cyclomatic complexity: 110 Second operand 7 states.
[2020-11-25 15:04:06,444 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:06,444 INFO  L93              Difference]: Finished difference Result 1380 states and 1486 transitions.
[2020-11-25 15:04:06,444 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 15:04:06,444 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1380 states and 1486 transitions.
[2020-11-25 15:04:06,447 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:06,449 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1380 states to 1374 states and 1479 transitions.
[2020-11-25 15:04:06,449 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 501
[2020-11-25 15:04:06,450 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 501
[2020-11-25 15:04:06,450 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1374 states and 1479 transitions.
[2020-11-25 15:04:06,451 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:06,451 INFO  L728         BuchiCegarLoop]: Abstraction has 1374 states and 1479 transitions.
[2020-11-25 15:04:06,452 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1374 states and 1479 transitions.
[2020-11-25 15:04:06,458 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1374 to 1342.
[2020-11-25 15:04:06,458 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1342 states.
[2020-11-25 15:04:06,459 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1342 states to 1342 states and 1446 transitions.
[2020-11-25 15:04:06,460 INFO  L751         BuchiCegarLoop]: Abstraction has 1342 states and 1446 transitions.
[2020-11-25 15:04:06,460 INFO  L631         BuchiCegarLoop]: Abstraction has 1342 states and 1446 transitions.
[2020-11-25 15:04:06,460 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 15:04:06,460 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1342 states and 1446 transitions.
[2020-11-25 15:04:06,461 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:06,461 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:06,461 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:06,462 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:06,462 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Token0 := false;
[L3]                 call_approve_ERC20Token0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3816]              assume null == 0;
[L3817]  CALL        call this := FreshRefGenerator__success();
[L1655]              havoc newRef;
[L1656]              assume Alloc[newRef] == false;
[L1657]              Alloc[newRef] := true;
[L1658]              assume newRef != null;
[L3817]  RET         call this := FreshRefGenerator__success();
[L3818]              assume now >= 0;
[L3819]              assume DType[this] == Erc20Base;
[L3820]              assume msgvalue_MSG == 0;
[L3821]              gas := gas - 53000;
[L3822]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L977]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2284]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L2284]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1841]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1824]              assume msgsender_MSG != null;
[L1825]              Balance[this] := 0;
[L1826]              owner_Owned[this] := null;
[L1828]              owner_Owned[this] := _owner_s185;
[L1841]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1842]  COND FALSE  !(revert)
[L2288]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2289]  COND FALSE  !(revert)
[L2292]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L1930]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1931]  COND FALSE  !(revert)
[L1934]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1906]              assume msgsender_MSG != null;
[L1907]              Balance[this] := 0;
[L1908]              balances_ERC20Token[this] := zeroRefintArr();
[L1909]              sum_balances0[this] := 0;
[L1910]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1911]              sum_allowed1[this] := 0;
[L1912]              transferable_ERC20Token[this] := true;
[L1934]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1935]  COND FALSE  !(revert)
[L2292]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2293]  COND FALSE  !(revert)
[L2296]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2246]              assume msgsender_MSG != null;
[L2247]              Balance[this] := 0;
[L2248]              name_Erc20Base[this] := -1000343086;
[L2249]              symbol_Erc20Base[this] := -1000343086;
[L2250]              decimals_Erc20Base[this] := 0;
[L2252]              name_Erc20Base[this] := _name_s560;
[L2253]              symbol_Erc20Base[this] := _symbol_s560;
[L2254]              decimals_Erc20Base[this] := _decimals_s560;
[L2255]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2256]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2257]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2258]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2259]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2296]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2297]  COND FALSE  !(revert)
[L977]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L978]               assume !revert && gas >= 0;
[L3822]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3823]              assume !revert && gas >= 0;
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(p1 != msgsender_MSG || p2 != _spender_s473);
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND FALSE  !(__exception)
[L736]   CALL        call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2155]  COND FALSE  !(_value_s473 != 0 && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0)
[L2159]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2160]              allowed_ERC20Token[this][msgsender_MSG][_spender_s473] := _value_s473;
[L2161]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2162]              assert { :EventEmitted "Approval_ERC20Token" } true;
[L2163]              success_s473 := true;
[L736]   RET         call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L737]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((success_s473 == true && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] == _value_s473) && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]));
[L3]                 revert := revert_hold;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND TRUE   __exception
[L714]               __tmp__Balance := Balance;
[L715]               __tmp__DType := DType;
[L716]               __tmp__Alloc := Alloc;
[L717]               __tmp__balance_ADDR := balance_ADDR;
[L718]               __tmp__M_Ref_int := M_Ref_int;
[L719]               __tmp__sum_balances0 := sum_balances0;
[L720]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L721]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L722]               __tmp__sum_allowed1 := sum_allowed1;
[L723]               __tmp__Length := Length;
[L724]               __tmp__now := now;
[L725]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L726]               __tmp__owner_Owned := owner_Owned;
[L727]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L728]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L729]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L730]               __tmp__name_Erc20Base := name_Erc20Base;
[L731]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L732]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L733]   CALL        call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2142]  COND TRUE   _value_s473 != 0 && __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0
[L2143]              revert := true;
[L733]   RET         call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L734]               assume revert || gas < 0;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND TRUE   __exception
[L714]               __tmp__Balance := Balance;
[L715]               __tmp__DType := DType;
[L716]               __tmp__Alloc := Alloc;
[L717]               __tmp__balance_ADDR := balance_ADDR;
[L718]               __tmp__M_Ref_int := M_Ref_int;
[L719]               __tmp__sum_balances0 := sum_balances0;
[L720]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L721]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L722]               __tmp__sum_allowed1 := sum_allowed1;
[L723]               __tmp__Length := Length;
[L724]               __tmp__now := now;
[L725]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L726]               __tmp__owner_Owned := owner_Owned;
[L727]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L728]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L729]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L730]               __tmp__name_Erc20Base := name_Erc20Base;
[L731]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L732]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L733]   CALL        call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2142]  COND TRUE   _value_s473 != 0 && __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0
[L2143]              revert := true;
[L733]   RET         call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L734]               assume revert || gas < 0;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:06,466 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:06,466 INFO  L82        PathProgramCache]: Analyzing trace with hash -1848105395, now seen corresponding path program 1 times
[2020-11-25 15:04:06,466 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:06,476 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 15:04:06,620 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-11-25 15:04:06,620 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 15:04:06,620 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [18] total 18
[2020-11-25 15:04:06,621 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 15:04:06,621 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 15:04:06,621 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=47, Invalid=295, Unknown=0, NotChecked=0, Total=342
[2020-11-25 15:04:06,621 INFO  L87              Difference]: Start difference. First operand 1342 states and 1446 transitions. cyclomatic complexity: 107 Second operand 19 states.
[2020-11-25 15:04:07,770 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 15:04:07,770 INFO  L93              Difference]: Finished difference Result 1417 states and 1545 transitions.
[2020-11-25 15:04:07,770 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 15:04:07,770 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1417 states and 1545 transitions.
[2020-11-25 15:04:07,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:07,776 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1417 states to 1417 states and 1545 transitions.
[2020-11-25 15:04:07,776 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 517
[2020-11-25 15:04:07,777 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 517
[2020-11-25 15:04:07,777 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1417 states and 1545 transitions.
[2020-11-25 15:04:07,778 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 15:04:07,778 INFO  L728         BuchiCegarLoop]: Abstraction has 1417 states and 1545 transitions.
[2020-11-25 15:04:07,779 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1417 states and 1545 transitions.
[2020-11-25 15:04:07,785 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1417 to 1377.
[2020-11-25 15:04:07,785 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1377 states.
[2020-11-25 15:04:07,786 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1377 states to 1377 states and 1487 transitions.
[2020-11-25 15:04:07,786 INFO  L751         BuchiCegarLoop]: Abstraction has 1377 states and 1487 transitions.
[2020-11-25 15:04:07,786 INFO  L631         BuchiCegarLoop]: Abstraction has 1377 states and 1487 transitions.
[2020-11-25 15:04:07,786 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 15:04:07,786 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1377 states and 1487 transitions.
[2020-11-25 15:04:07,788 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 15:04:07,788 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 15:04:07,788 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 15:04:07,789 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 15:04:07,789 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Token0 := false;
[L3]                 call_approve_ERC20Token0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L3816]              assume null == 0;
[L3817]  CALL        call this := FreshRefGenerator__success();
[L1655]              havoc newRef;
[L1656]              assume Alloc[newRef] == false;
[L1657]              Alloc[newRef] := true;
[L1658]              assume newRef != null;
[L3817]  RET         call this := FreshRefGenerator__success();
[L3818]              assume now >= 0;
[L3819]              assume DType[this] == Erc20Base;
[L3820]              assume msgvalue_MSG == 0;
[L3821]              gas := gas - 53000;
[L3822]  CALL        call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L977]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2284]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L2284]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1841]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1824]              assume msgsender_MSG != null;
[L1825]              Balance[this] := 0;
[L1826]              owner_Owned[this] := null;
[L1828]              owner_Owned[this] := _owner_s185;
[L1841]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1842]  COND FALSE  !(revert)
[L2288]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2289]  COND FALSE  !(revert)
[L2292]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L1930]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1931]  COND FALSE  !(revert)
[L1934]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1906]              assume msgsender_MSG != null;
[L1907]              Balance[this] := 0;
[L1908]              balances_ERC20Token[this] := zeroRefintArr();
[L1909]              sum_balances0[this] := 0;
[L1910]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1911]              sum_allowed1[this] := 0;
[L1912]              transferable_ERC20Token[this] := true;
[L1934]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1935]  COND FALSE  !(revert)
[L2292]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2293]  COND FALSE  !(revert)
[L2296]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2246]              assume msgsender_MSG != null;
[L2247]              Balance[this] := 0;
[L2248]              name_Erc20Base[this] := -1000343086;
[L2249]              symbol_Erc20Base[this] := -1000343086;
[L2250]              decimals_Erc20Base[this] := 0;
[L2252]              name_Erc20Base[this] := _name_s560;
[L2253]              symbol_Erc20Base[this] := _symbol_s560;
[L2254]              decimals_Erc20Base[this] := _decimals_s560;
[L2255]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2256]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2257]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2258]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2259]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2296]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2297]  COND FALSE  !(revert)
[L977]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L978]               assume !revert && gas >= 0;
[L3822]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L3823]              assume !revert && gas >= 0;
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND FALSE  !(__exception)
[L736]   CALL        call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2155]  COND FALSE  !(_value_s473 != 0 && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0)
[L2159]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2160]              allowed_ERC20Token[this][msgsender_MSG][_spender_s473] := _value_s473;
[L2161]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2162]              assert { :EventEmitted "Approval_ERC20Token" } true;
[L2163]              success_s473 := true;
[L736]   RET         call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L737]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((success_s473 == true && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] == _value_s473) && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]);
[L3]                 success_approve_ERC20Token0 := true;
[L3]                 success_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND TRUE   __exception
[L714]               __tmp__Balance := Balance;
[L715]               __tmp__DType := DType;
[L716]               __tmp__Alloc := Alloc;
[L717]               __tmp__balance_ADDR := balance_ADDR;
[L718]               __tmp__M_Ref_int := M_Ref_int;
[L719]               __tmp__sum_balances0 := sum_balances0;
[L720]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L721]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L722]               __tmp__sum_allowed1 := sum_allowed1;
[L723]               __tmp__Length := Length;
[L724]               __tmp__now := now;
[L725]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L726]               __tmp__owner_Owned := owner_Owned;
[L727]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L728]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L729]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L730]               __tmp__name_Erc20Base := name_Erc20Base;
[L731]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L732]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L733]   CALL        call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2142]  COND TRUE   _value_s473 != 0 && __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0
[L2143]              revert := true;
[L733]   RET         call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L734]               assume revert || gas < 0;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

Loop:
[L3826]  CALL        call CorralChoice_Erc20Base(this);
[L3670]              havoc msgsender_MSG;
[L3671]              havoc msgvalue_MSG;
[L3672]              havoc choice;
[L3673]              havoc __ret_0_totalSupply;
[L3674]              havoc _owner_s338;
[L3675]              havoc balance_s338;
[L3676]              havoc _to_s326;
[L3677]              havoc _value_s326;
[L3678]              havoc __ret_0_transfer;
[L3679]              havoc _owner_s489;
[L3680]              havoc _spender_s489;
[L3681]              havoc __ret_0_allowance;
[L3682]              havoc _from_s426;
[L3683]              havoc _to_s426;
[L3684]              havoc _value_s426;
[L3685]              havoc __ret_0_transferFrom;
[L3686]              havoc _spender_s473;
[L3687]              havoc _value_s473;
[L3688]              havoc success_s473;
[L3689]              havoc __ret_0_owner;
[L3690]              havoc _owner_s185;
[L3691]              havoc _owner_s221;
[L3692]              havoc __ret_0_transferable;
[L3693]              havoc _transferable_s264;
[L3694]              havoc __ret_0_signature;
[L3695]              havoc __ret_0_name;
[L3696]              havoc __ret_0_symbol;
[L3697]              havoc __ret_0_decimals;
[L3698]              havoc _issuer_s560;
[L3699]              havoc _name_s560;
[L3700]              havoc _symbol_s560;
[L3701]              havoc _totalSupplyCap_s560;
[L3702]              havoc _decimals_s560;
[L3703]              havoc tmpNow;
[L3704]              havoc gas;
[L3705]              assume gas > 4000000 && gas <= 8000000;
[L3706]              tmpNow := now;
[L3707]              havoc now;
[L3708]              assume now > tmpNow;
[L3709]              assume msgsender_MSG != null;
[L3710]              assume DType[msgsender_MSG] != SafeMath;
[L3711]              assume DType[msgsender_MSG] != ERC20;
[L3712]              assume DType[msgsender_MSG] != Owned;
[L3713]              assume DType[msgsender_MSG] != ERC20Token;
[L3714]              assume DType[msgsender_MSG] != Erc20Base;
[L3715]              Alloc[msgsender_MSG] := true;
[L3716]  COND FALSE  !(choice == 14)
[L3722]  COND FALSE  !(choice == 13)
[L3728]  COND FALSE  !(choice == 12)
[L3735]  COND FALSE  !(choice == 11)
[L3741]  COND FALSE  !(choice == 10)
[L3748]  COND TRUE   choice == 9
[L3749]              gas := gas - 21000;
[L3750]  COND TRUE   gas >= 0
[L3751]              assume _value_s473 >= 0 && _value_s473 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3752]              assume msgvalue_MSG == 0;
[L3753]  CALL        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND TRUE   __exception
[L714]               __tmp__Balance := Balance;
[L715]               __tmp__DType := DType;
[L716]               __tmp__Alloc := Alloc;
[L717]               __tmp__balance_ADDR := balance_ADDR;
[L718]               __tmp__M_Ref_int := M_Ref_int;
[L719]               __tmp__sum_balances0 := sum_balances0;
[L720]               __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L721]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L722]               __tmp__sum_allowed1 := sum_allowed1;
[L723]               __tmp__Length := Length;
[L724]               __tmp__now := now;
[L725]               __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L726]               __tmp__owner_Owned := owner_Owned;
[L727]               __tmp__balances_ERC20Token := balances_ERC20Token;
[L728]               __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L729]               __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L730]               __tmp__name_Erc20Base := name_Erc20Base;
[L731]               __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L732]               __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L733]   CALL        call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2142]  COND TRUE   _value_s473 != 0 && __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0
[L2143]              revert := true;
[L733]   RET         call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L734]               assume revert || gas < 0;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L3826]  RET         call CorralChoice_Erc20Base(this);

[2020-11-25 15:04:07,792 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:07,793 INFO  L82        PathProgramCache]: Analyzing trace with hash 1954515113, now seen corresponding path program 1 times
[2020-11-25 15:04:07,793 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:07,803 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:07,819 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:07,884 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:07,885 INFO  L82        PathProgramCache]: Analyzing trace with hash 192577671, now seen corresponding path program 1 times
[2020-11-25 15:04:07,885 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:07,889 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:07,892 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:07,899 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 15:04:07,899 INFO  L82        PathProgramCache]: Analyzing trace with hash 1460472623, now seen corresponding path program 1 times
[2020-11-25 15:04:07,899 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 15:04:07,912 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:07,929 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #7: 2179 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2179 to 4357
[2020-11-25 15:04:08,254 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification that was a NOOP. DAG size: 230
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2647 to 5281
[2020-11-25 15:04:08,574 WARN  L188               SmtUtils]: Spent 309.00 ms on a formula simplification. DAG size of input: 186 DAG size of output: 186
[2020-11-25 15:04:09,091 WARN  L188               SmtUtils]: Spent 514.00 ms on a formula simplification. DAG size of input: 247 DAG size of output: 230
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 9973 to 19937
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 6271 to 12541
[2020-11-25 15:04:09,220 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 135
[2020-11-25 15:04:09,331 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification that was a NOOP. DAG size: 288
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 15:04:09,612 WARN  L188               SmtUtils]: Spent 274.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 231
[2020-11-25 15:04:09,811 WARN  L188               SmtUtils]: Spent 197.00 ms on a formula simplification that was a NOOP. DAG size: 231
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
[2020-11-25 15:04:10,082 WARN  L188               SmtUtils]: Spent 253.00 ms on a formula simplification. DAG size of input: 166 DAG size of output: 149
[2020-11-25 15:04:10,090 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #6: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 15:04:10,710 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification. DAG size of input: 175 DAG size of output: 174
[2020-11-25 15:04:11,057 WARN  L188               SmtUtils]: Spent 345.00 ms on a formula simplification. DAG size of input: 235 DAG size of output: 219
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
[2020-11-25 15:04:11,197 WARN  L188               SmtUtils]: Spent 131.00 ms on a formula simplification. DAG size of input: 148 DAG size of output: 147
[2020-11-25 15:04:11,373 WARN  L188               SmtUtils]: Spent 174.00 ms on a formula simplification that was a NOOP. DAG size: 287
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #7: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
[2020-11-25 15:04:11,716 WARN  L188               SmtUtils]: Spent 333.00 ms on a formula simplification. DAG size of input: 237 DAG size of output: 230
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #6: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #7: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2647 to 5281
[2020-11-25 15:04:12,145 WARN  L188               SmtUtils]: Spent 264.00 ms on a formula simplification. DAG size of input: 186 DAG size of output: 186
[2020-11-25 15:04:12,482 WARN  L188               SmtUtils]: Spent 335.00 ms on a formula simplification. DAG size of input: 246 DAG size of output: 230
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 15:04:12,603 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 153 DAG size of output: 139
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 15:04:12,835 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification that was a NOOP. DAG size: 235
[2020-11-25 15:04:14,572 WARN  L188               SmtUtils]: Spent 1.74 s on a formula simplification. DAG size of input: 609 DAG size of output: 581
Garbage collection #1: 239 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 239 to 467
Garbage collection #2: 467 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 467 to 929
Garbage collection #3: 929 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 929 to 1847
Garbage collection #4: 1847 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1847 to 3691
Garbage collection #5: 3691 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3691 to 7369
Garbage collection #6: 7369 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7369 to 14737
Garbage collection #7: 14737 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 14737 to 29473
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-25 15:04:15,103 WARN  L188               SmtUtils]: Spent 457.00 ms on a formula simplification. DAG size of input: 227 DAG size of output: 216
[2020-11-25 15:04:15,431 WARN  L188               SmtUtils]: Spent 314.00 ms on a formula simplification that was a NOOP. DAG size: 320
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
[2020-11-25 15:04:16,167 WARN  L188               SmtUtils]: Spent 713.00 ms on a formula simplification. DAG size of input: 253 DAG size of output: 216
[2020-11-25 15:04:16,498 WARN  L188               SmtUtils]: Spent 329.00 ms on a formula simplification that was a NOOP. DAG size: 322
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
[2020-11-25 15:04:16,841 WARN  L188               SmtUtils]: Spent 338.00 ms on a formula simplification that was a NOOP. DAG size: 317
[2020-11-25 15:04:16,864 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:16,893 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 15:04:16,904 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 03:04:16 BasicIcfg
[2020-11-25 15:04:16,904 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 15:04:16,905 INFO  L168              Benchmark]: Toolchain (without parser) took 17588.28 ms. Allocated memory was 1.0 GB in the beginning and 2.4 GB in the end (delta: 1.4 GB). Free memory was 935.2 MB in the beginning and 1.8 GB in the end (delta: -861.0 MB). Peak memory consumption was 1.5 GB. Max. memory is 15.3 GB.
[2020-11-25 15:04:16,906 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 15:04:16,906 INFO  L168              Benchmark]: Boogie Preprocessor took 89.03 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:16,906 INFO  L168              Benchmark]: UtopiaSpecLang took 57.03 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:16,907 INFO  L168              Benchmark]: Boogie Printer took 14.33 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:16,907 INFO  L168              Benchmark]: RCFGBuilder took 665.79 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 811.7 MB in the end (delta: 107.4 MB). Peak memory consumption was 107.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:16,908 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.86 ms. Allocated memory is still 1.0 GB. Free memory was 811.7 MB in the beginning and 802.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:16,908 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1204.58 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 186.6 MB). Free memory was 802.8 MB in the beginning and 1.1 GB in the end (delta: -270.7 MB). Peak memory consumption was 172.0 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:16,908 INFO  L168              Benchmark]: BlockEncodingV2 took 138.81 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 67.4 MB). Peak memory consumption was 67.4 MB. Max. memory is 15.3 GB.
[2020-11-25 15:04:16,909 INFO  L168              Benchmark]: BuchiAutomizer took 15378.30 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: -790.2 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-25 15:04:16,912 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3206 locations, 5612 edges
  - StatisticsResult: Encoded RCFG
    3172 locations, 5530 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 89.03 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 929.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 57.03 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.33 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 665.79 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 811.7 MB in the end (delta: 107.4 MB). Peak memory consumption was 107.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.86 ms. Allocated memory is still 1.0 GB. Free memory was 811.7 MB in the beginning and 802.8 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1204.58 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 186.6 MB). Free memory was 802.8 MB in the beginning and 1.1 GB in the end (delta: -270.7 MB). Peak memory consumption was 172.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 138.81 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.0 GB in the end (delta: 67.4 MB). Peak memory consumption was 67.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 15378.30 ms. Allocated memory was 1.2 GB in the beginning and 2.4 GB in the end (delta: 1.2 GB). Free memory was 1.0 GB in the beginning and 1.8 GB in the end (delta: -790.2 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1323 locations, 1717 edges
  - StatisticsResult: BuchiProgram size
    3206 locations, 5612 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 7 terminating modules (7 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.7 modules have a trivial ranking function, the largest among these consists of 19 locations. The remainder module has 1377 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 15.3s and 8 iterations.  TraceHistogramMax:2. Analysis of lassos took 9.7s. Construction of modules took 3.5s. BÃ¼chi inclusion checks took 1.4s. Highest rank in rank-based complementation 0. Minimization of det autom 7. Minimization of nondet autom 0. Automata minimization 0.1s AutomataMinimizationTime, 7 MinimizatonAttempts, 1410 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3658 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 15141 SDtfs, 19255 SDslu, 27249 SDs, 0 SdLazy, 56572 SolverSat, 3942 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 3.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU7 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(3979019) = (new Erc20Base).gas(2)({from : 3979022, _issuer : 3979021, _name : 3979016, _symbol : 3979005, _totalSupplyCap : (- 2), _decimals : 3979011});
[L952]               havoc __exception;
[L953]               revert := false;
[L954]   COND FALSE  !(__exception)
[L977]   CALL        call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2284]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L2284]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L1841]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1824]              assume msgsender_MSG != null;
[L1825]              Balance[this] := 0;
[L1826]              owner_Owned[this] := null;
[L1828]              owner_Owned[this] := _owner_s185;
[L1841]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _owner_s185);
[L1842]  COND FALSE  !(revert)
[L2288]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560);
[L2289]  COND FALSE  !(revert)
[L2292]  CALL        call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L1930]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1793]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1777]              assume msgsender_MSG != null;
[L1778]              Balance[this] := 0;
[L1779]              totalSupply_ERC20[this] := 0;
[L1793]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1794]  COND FALSE  !(revert)
[L1930]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L1931]  COND FALSE  !(revert)
[L1934]  CALL        call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1906]              assume msgsender_MSG != null;
[L1907]              Balance[this] := 0;
[L1908]              balances_ERC20Token[this] := zeroRefintArr();
[L1909]              sum_balances0[this] := 0;
[L1910]              allowed_ERC20Token[this] := zeroRefRefintArr();
[L1911]              sum_allowed1[this] := 0;
[L1912]              transferable_ERC20Token[this] := true;
[L1934]  RET         call ERC20Token_ERC20Token_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1935]  COND FALSE  !(revert)
[L2292]  RET         call ERC20Token_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG);
[L2293]  COND FALSE  !(revert)
[L2296]  CALL        call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2246]              assume msgsender_MSG != null;
[L2247]              Balance[this] := 0;
[L2248]              name_Erc20Base[this] := -1000343086;
[L2249]              symbol_Erc20Base[this] := -1000343086;
[L2250]              decimals_Erc20Base[this] := 0;
[L2252]              name_Erc20Base[this] := _name_s560;
[L2253]              symbol_Erc20Base[this] := _symbol_s560;
[L2254]              decimals_Erc20Base[this] := _decimals_s560;
[L2255]              totalSupply_ERC20[this] := _totalSupplyCap_s560;
[L2256]              sum_balances0[this] := sum_balances0[this] - balances_ERC20Token[this][_issuer_s560];
[L2257]              balances_ERC20Token[this][_issuer_s560] := _totalSupplyCap_s560;
[L2258]              sum_balances0[this] := sum_balances0[this] + balances_ERC20Token[this][_issuer_s560];
[L2259]              assert { :EventEmitted "Transfer_Erc20Base" } true;
[L2296]  RET         call Erc20Base_Erc20Base_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L2297]  COND FALSE  !(revert)
[L977]   RET         call Erc20Base_Erc20Base__success(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
[L978]               assume !revert && gas >= 0;
[L3822]  RET         call Erc20Base_Erc20Base(this, msgsender_MSG, msgvalue_MSG, _issuer_s560, _name_s560, _symbol_s560, _totalSupplyCap_s560, _decimals_s560);
ERC20Token(3979019).approve~address~uint256.gas(3979002)({from : 3979017, _spender : 3979018, _value : 1});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                 call_approve_ERC20Token0 := true;
[L3]                 call_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L711]               havoc __exception;
[L712]               revert := false;
[L713]   COND FALSE  !(__exception)
[L736]   CALL        call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2155]  COND FALSE  !(_value_s473 != 0 && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0)
[L2159]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2160]              allowed_ERC20Token[this][msgsender_MSG][_spender_s473] := _value_s473;
[L2161]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_ERC20Token[this][msgsender_MSG][_spender_s473];
[L2162]              assert { :EventEmitted "Approval_ERC20Token" } true;
[L2163]              success_s473 := true;
[L736]   RET         call success_s473 := approve~address~uint256_ERC20Token__success(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L737]               assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((success_s473 == true && allowed_ERC20Token[this][msgsender_MSG][_spender_s473] == _value_s473) && totalSupply_ERC20[this] == old(totalSupply_ERC20[this])) && balances_ERC20Token[this] == old(balances_ERC20Token[this])) && allowed_ERC20Token[this][p1][p2] == old(allowed_ERC20Token[this][p1][p2])) && name_Erc20Base[this] == old(name_Erc20Base[this])) && symbol_Erc20Base[this] == old(symbol_Erc20Base[this])) && decimals_Erc20Base[this] == old(decimals_Erc20Base[this])) && transferable_ERC20Token[this] == old(transferable_ERC20Token[this])) && owner_Owned[this] == old(owner_Owned[this]);
[L3]                 success_approve_ERC20Token0 := true;
[L3]                 success_approve_ERC20Token0 := false;
[L3]                 revert := revert_hold;
[L3753]  RET         call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
ERC20Token(3979019).approve~address~uint256.gas(3979003)({from : 3979017, _spender : 3979018, _value : 1});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                call_approve_ERC20Token0 := true;
[L3]                call_approve_ERC20Token0 := false;
[L3]                revert := revert_hold;
[L711]              havoc __exception;
[L712]              revert := false;
[L713]   COND TRUE  __exception
[L714]              __tmp__Balance := Balance;
[L715]              __tmp__DType := DType;
[L716]              __tmp__Alloc := Alloc;
[L717]              __tmp__balance_ADDR := balance_ADDR;
[L718]              __tmp__M_Ref_int := M_Ref_int;
[L719]              __tmp__sum_balances0 := sum_balances0;
[L720]              __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L721]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L722]              __tmp__sum_allowed1 := sum_allowed1;
[L723]              __tmp__Length := Length;
[L724]              __tmp__now := now;
[L725]              __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L726]              __tmp__owner_Owned := owner_Owned;
[L727]              __tmp__balances_ERC20Token := balances_ERC20Token;
[L728]              __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L729]              __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L730]              __tmp__name_Erc20Base := name_Erc20Base;
[L731]              __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L732]              __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L733]   CALL       call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2142]  COND TRUE  _value_s473 != 0 && __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0
[L2143]             revert := true;
[L733]   RET        call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L734]              assume revert || gas < 0;
[L3753]  RET        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);

Loop:
ERC20Token(3979019).approve~address~uint256.gas(3979001)({from : 3979017, _spender : 3979018, _value : 1});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume p1 != msgsender_MSG || p2 != _spender_s473;
[L3]                call_approve_ERC20Token0 := true;
[L3]                call_approve_ERC20Token0 := false;
[L3]                revert := revert_hold;
[L711]              havoc __exception;
[L712]              revert := false;
[L713]   COND TRUE  __exception
[L714]              __tmp__Balance := Balance;
[L715]              __tmp__DType := DType;
[L716]              __tmp__Alloc := Alloc;
[L717]              __tmp__balance_ADDR := balance_ADDR;
[L718]              __tmp__M_Ref_int := M_Ref_int;
[L719]              __tmp__sum_balances0 := sum_balances0;
[L720]              __tmp__alloc_allowed_ERC20Token_lvl0 := alloc_allowed_ERC20Token_lvl0;
[L721]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L722]              __tmp__sum_allowed1 := sum_allowed1;
[L723]              __tmp__Length := Length;
[L724]              __tmp__now := now;
[L725]              __tmp__totalSupply_ERC20 := totalSupply_ERC20;
[L726]              __tmp__owner_Owned := owner_Owned;
[L727]              __tmp__balances_ERC20Token := balances_ERC20Token;
[L728]              __tmp__allowed_ERC20Token := allowed_ERC20Token;
[L729]              __tmp__transferable_ERC20Token := transferable_ERC20Token;
[L730]              __tmp__name_Erc20Base := name_Erc20Base;
[L731]              __tmp__symbol_Erc20Base := symbol_Erc20Base;
[L732]              __tmp__decimals_Erc20Base := decimals_Erc20Base;
[L733]   CALL       call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L2142]  COND TRUE  _value_s473 != 0 && __tmp__allowed_ERC20Token[this][msgsender_MSG][_spender_s473] != 0
[L2143]             revert := true;
[L733]   RET        call success_s473 := approve~address~uint256_ERC20Token__fail(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);
[L734]              assume revert || gas < 0;
[L3753]  RET        call success_s473 := approve~address~uint256_ERC20Token(this, msgsender_MSG, msgvalue_MSG, _spender_s473, _value_s473);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
