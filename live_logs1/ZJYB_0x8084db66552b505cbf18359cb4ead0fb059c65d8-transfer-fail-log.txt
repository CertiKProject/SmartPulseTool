This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 10:55:08,769 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 10:55:08,770 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 10:55:08,777 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 10:55:08,777 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 10:55:08,778 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 10:55:08,778 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 10:55:08,780 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 10:55:08,781 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 10:55:08,781 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 10:55:08,782 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 10:55:08,782 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 10:55:08,782 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 10:55:08,783 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 10:55:08,783 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 10:55:08,784 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 10:55:08,784 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 10:55:08,785 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 10:55:08,787 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 10:55:08,788 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 10:55:08,788 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 10:55:08,789 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 10:55:08,791 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 10:55:08,791 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 10:55:08,791 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 10:55:08,792 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 10:55:08,792 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 10:55:08,793 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 10:55:08,793 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 10:55:08,793 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 10:55:08,793 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 10:55:08,794 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 10:55:08,794 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 10:55:08,795 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 10:55:08,796 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 10:55:08,796 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 10:55:08,796 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 10:55:08,796 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 10:55:08,796 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 10:55:08,797 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 10:55:08,797 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 10:55:08,797 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 10:55:08,803 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 10:55:08,803 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 10:55:08,804 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 10:55:08,804 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 10:55:08,804 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 10:55:08,804 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 10:55:08,804 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 10:55:08,804 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 10:55:08,804 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 10:55:08,804 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 10:55:08,804 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 10:55:08,804 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 10:55:08,804 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 10:55:08,804 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 10:55:08,805 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 10:55:08,805 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 10:55:08,822 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 10:55:08,832 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 10:55:08,835 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 10:55:08,837 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 10:55:08,837 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 10:55:08,838 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl
[2020-11-25 10:55:08,838 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl'
[2020-11-25 10:55:08,894 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 10:55:08,894 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 10:55:08,895 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 10:55:08,895 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 10:55:08,895 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 10:55:08,915 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/1) ...
[2020-11-25 10:55:08,917 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/1) ...
[2020-11-25 10:55:08,943 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/1) ...
[2020-11-25 10:55:08,944 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/1) ...
[2020-11-25 10:55:08,960 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/1) ...
[2020-11-25 10:55:08,968 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/1) ...
[2020-11-25 10:55:08,974 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/1) ...
[2020-11-25 10:55:08,981 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 10:55:08,982 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 10:55:08,982 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 10:55:08,984 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 10:55:08,987 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/1) ...
[2020-11-25 10:55:09,003 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ZJYB.transfer(to, value), msg.sender != to && (value > _balances_ZJYB[this][msg.sender] || _balances_ZJYB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][to] >= 0 && _balances_ZJYB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][msg.sender] >= 0 &&  _balances_ZJYB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZJYB.transfer)))
[2020-11-25 10:55:09,008 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ZJYB.transfer(to, value), msg.sender != to && (value > _balances_ZJYB[this][msg.sender] || _balances_ZJYB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][to] >= 0 && _balances_ZJYB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][msg.sender] >= 0 &&  _balances_ZJYB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZJYB.transfer)))
[2020-11-25 10:55:09,014 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ZJYB.transfer(to, value), msg.sender != to && (value > _balances_ZJYB[this][msg.sender] || _balances_ZJYB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][to] >= 0 && _balances_ZJYB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][msg.sender] >= 0 &&  _balances_ZJYB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZJYB.transfer)))
[2020-11-25 10:55:09,023 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=_to_s342 && ( _value_s342>_balances_ZJYB[this][msg.sender] || ( _balances_ZJYB[this][_to_s342] + _value_s342 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s342>=0 ) && _value_s342<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ZJYB[this][_to_s342]>=0 ) && _balances_ZJYB[this][_to_s342]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ZJYB[this][msg.sender]>=0 ) && _balances_ZJYB[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>],IdentifierExpression[_to_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],[IdentifierExpression[_to_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],IdentifierExpression[_value_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],[IdentifierExpression[_to_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],[IdentifierExpression[_to_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ZJYB,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ZJYB>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 10:55:09,032 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ZJYB.transfer(to, value), msg.sender != to && (value > _balances_ZJYB[this][msg.sender] || _balances_ZJYB[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][to] >= 0 && _balances_ZJYB[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ZJYB[this][msg.sender] >= 0 &&  _balances_ZJYB[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ZJYB.transfer)))
[2020-11-25 10:55:09,032 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ZJYB0) ==> ( <>AP(fail_transfer_ZJYB0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 10:55:09,041 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:55:09 PropertyContainer
[2020-11-25 10:55:09,041 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 10:55:09,042 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 10:55:09,042 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 10:55:09,042 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 10:55:09,043 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/2) ...
[2020-11-25 10:55:09,043 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 10:55:09,043 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 10:55:09,055 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:55:09" (2/2) ...
[2020-11-25 10:55:09,055 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 10:55:09,055 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 10:55:09,055 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 10:55:09,055 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 10:55:09,056 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/2) ...
[2020-11-25 10:55:09,107 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 10:55:09,107 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 10:55:09,107 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 10:55:09,107 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 10:55:09,107 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 10:55:09,107 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 10:55:09,108 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 10:55:09,108 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 10:55:09,108 INFO  L130     BoogieDeclarations]: Found specification of procedure _assert~bool_SafeMath__success
[2020-11-25 10:55:09,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 10:55:09,108 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 10:55:09,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 10:55:09,108 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 10:55:09,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 10:55:09,108 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 10:55:09,108 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 10:55:09,108 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 10:55:09,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 10:55:09,109 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 10:55:09,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 10:55:09,109 INFO  L130     BoogieDeclarations]: Found specification of procedure ZJYB_ZJYB_NoBaseCtor__success
[2020-11-25 10:55:09,109 INFO  L130     BoogieDeclarations]: Found specification of procedure ZJYB_ZJYB
[2020-11-25 10:55:09,109 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZJYB_ZJYB
[2020-11-25 10:55:09,110 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZJYB
[2020-11-25 10:55:09,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZJYB
[2020-11-25 10:55:09,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZJYB
[2020-11-25 10:55:09,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZJYB
[2020-11-25 10:55:09,110 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZJYB
[2020-11-25 10:55:09,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZJYB
[2020-11-25 10:55:09,110 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZJYB
[2020-11-25 10:55:09,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZJYB
[2020-11-25 10:55:09,110 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZJYB
[2020-11-25 10:55:09,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZJYB
[2020-11-25 10:55:09,110 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZJYB
[2020-11-25 10:55:09,110 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZJYB
[2020-11-25 10:55:09,110 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZJYB
[2020-11-25 10:55:09,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZJYB
[2020-11-25 10:55:09,111 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZJYB
[2020-11-25 10:55:09,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZJYB
[2020-11-25 10:55:09,111 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZJYB
[2020-11-25 10:55:09,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZJYB
[2020-11-25 10:55:09,111 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_ZJYB
[2020-11-25 10:55:09,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_ZJYB
[2020-11-25 10:55:09,111 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZJYB
[2020-11-25 10:55:09,111 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZJYB
[2020-11-25 10:55:09,111 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 10:55:09,111 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 10:55:09,111 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 10:55:09,111 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 10:55:09,111 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ZJYB
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 10:55:09,112 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure _assert~bool_SafeMath__fail
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 10:55:09,113 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure ZJYB_ZJYB_NoBaseCtor__fail
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure ZJYB_ZJYB__success
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure ZJYB_ZJYB__fail
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZJYB__success
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ZJYB__fail
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZJYB__success
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ZJYB__fail
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZJYB__success
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ZJYB__fail
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZJYB__success
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ZJYB__fail
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZJYB__success
[2020-11-25 10:55:09,114 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ZJYB__fail
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZJYB__success
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ZJYB__fail
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZJYB__success
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ZJYB__fail
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZJYB__success
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ZJYB__fail
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZJYB__success
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ZJYB__fail
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_ZJYB__success
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_ZJYB__fail
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZJYB__success
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ZJYB__fail
[2020-11-25 10:55:09,115 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 10:55:09,116 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 10:55:09,116 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 10:55:09,116 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 10:55:09,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 10:55:09,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 10:55:09,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 10:55:09,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 10:55:09,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 10:55:09,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 10:55:09,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 10:55:09,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 10:55:09,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 10:55:09,116 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure _assert~bool_SafeMath__fail
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure _assert~bool_SafeMath__success
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 10:55:09,117 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZJYB_ZJYB_NoBaseCtor__fail
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZJYB_ZJYB_NoBaseCtor__success
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZJYB_ZJYB__fail
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZJYB_ZJYB__success
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZJYB__fail
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ZJYB__success
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZJYB__fail
[2020-11-25 10:55:09,118 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ZJYB__success
[2020-11-25 10:55:09,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZJYB__fail
[2020-11-25 10:55:09,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ZJYB__success
[2020-11-25 10:55:09,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZJYB__fail
[2020-11-25 10:55:09,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ZJYB__success
[2020-11-25 10:55:09,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZJYB__fail
[2020-11-25 10:55:09,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ZJYB__success
[2020-11-25 10:55:09,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZJYB__fail
[2020-11-25 10:55:09,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ZJYB__success
[2020-11-25 10:55:09,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZJYB__fail
[2020-11-25 10:55:09,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ZJYB__success
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZJYB__fail
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ZJYB__success
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZJYB__fail
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ZJYB__success
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_ZJYB__fail
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_ZJYB__success
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZJYB__fail
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ZJYB__success
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 10:55:09,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 10:55:09,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 10:55:09,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 10:55:09,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 10:55:09,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 10:55:09,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 10:55:09,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ZJYB
[2020-11-25 10:55:09,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 10:55:09,121 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 10:55:09,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 10:55:09,593 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:55:09,593 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 10:55:09,678 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 10:55:09,678 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 10:55:09,680 INFO  L202        PluginConnector]: Adding new model ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:55:09 BoogieIcfgContainer
[2020-11-25 10:55:09,680 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:55:09" (2/2) ...
[2020-11-25 10:55:09,680 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 10:55:09,680 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@ba27ef0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:55:09, skipping insertion in model container
[2020-11-25 10:55:09,680 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 10:55:09,681 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 10:55:09,681 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 10:55:09,683 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 10:55:09,683 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/3) ...
[2020-11-25 10:55:09,683 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@6caf2d7 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:55:09, skipping insertion in model container
[2020-11-25 10:55:09,684 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:55:09" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 10:55:09,722 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:55:09 NWAContainer
[2020-11-25 10:55:09,722 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 10:55:09,722 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 10:55:09,722 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 10:55:09,723 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 10:55:09,724 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:55:09" (3/4) ...
[2020-11-25 10:55:09,725 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@1642faeb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:55:09, skipping insertion in model container
[2020-11-25 10:55:09,725 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:55:09" (4/4) ...
[2020-11-25 10:55:09,729 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 10:55:09,733 INFO  L110   BuchiProductObserver]: Initial RCFG 1238 locations, 1609 edges
[2020-11-25 10:55:09,733 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 10:55:09,749 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 10:55:10,775 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 10:55:10,780 INFO  L110   BuchiProductObserver]: BuchiProgram size 2982 locations, 5228 edges
[2020-11-25 10:55:10,780 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:55:10 BoogieIcfgContainer
[2020-11-25 10:55:10,780 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 10:55:10,781 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 10:55:10,781 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 10:55:10,782 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 10:55:10,783 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:55:10" (1/1) ...
[2020-11-25 10:55:10,854 INFO  L313           BlockEncoder]: Initial Icfg 2982 locations, 5228 edges
[2020-11-25 10:55:10,854 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 10:55:10,854 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 10:55:10,855 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 10:55:10,855 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 10:55:10,864 INFO  L70    emoveInfeasibleEdges]: Removed 105 edges and 10 locations because of local infeasibility
[2020-11-25 10:55:10,871 INFO  L70        RemoveSinkStates]: Removed 148 edges and 84 locations by removing sink states
[2020-11-25 10:55:10,880 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 10:55:10,885 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 10:55:10,888 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 10:55:10,888 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 10:55:10,892 INFO  L313           BlockEncoder]: Encoded RCFG 2870 locations, 4949 edges
[2020-11-25 10:55:10,892 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 10:55:10 BasicIcfg
[2020-11-25 10:55:10,892 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 10:55:10,893 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 10:55:10,893 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 10:55:10,895 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 10:55:10,895 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:55:10,895 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 10:55:08" (1/6) ...
[2020-11-25 10:55:10,896 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df9ca32 and model type ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:55:10, skipping insertion in model container
[2020-11-25 10:55:10,897 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:55:10,897 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 10:55:09" (2/6) ...
[2020-11-25 10:55:10,897 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df9ca32 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:55:10, skipping insertion in model container
[2020-11-25 10:55:10,897 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:55:10,897 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 10:55:09" (3/6) ...
[2020-11-25 10:55:10,897 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df9ca32 and model type ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 10:55:10, skipping insertion in model container
[2020-11-25 10:55:10,897 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:55:10,897 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 10:55:09" (4/6) ...
[2020-11-25 10:55:10,897 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df9ca32 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 10:55:10, skipping insertion in model container
[2020-11-25 10:55:10,897 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:55:10,898 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 10:55:10" (5/6) ...
[2020-11-25 10:55:10,898 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1df9ca32 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 10:55:10, skipping insertion in model container
[2020-11-25 10:55:10,898 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 10:55:10,898 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 10:55:10" (6/6) ...
[2020-11-25 10:55:10,899 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ZJYB_0x8084db66552b505cbf18359cb4ead0fb059c65d8_transfer-fail.bpl_BEv2
[2020-11-25 10:55:10,978 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 10:55:10,978 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 10:55:10,978 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 10:55:10,978 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 10:55:10,978 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 10:55:10,978 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 10:55:10,979 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 10:55:10,979 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 10:55:10,979 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 10:55:11,019 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2870 states.
[2020-11-25 10:55:11,072 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:11,073 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:11,073 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:11,082 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:11,082 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:11,082 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 10:55:11,082 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2870 states.
[2020-11-25 10:55:11,099 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:11,099 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:11,099 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:11,101 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:11,101 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND TRUE   revert
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:11,118 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:11,118 INFO  L82        PathProgramCache]: Analyzing trace with hash 1096773620, now seen corresponding path program 1 times
[2020-11-25 10:55:11,123 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:11,145 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:11,191 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:55:11,193 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:55:11,193 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 10:55:11,196 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:11,313 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 10:55:11,314 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 10:55:11,316 INFO  L87              Difference]: Start difference. First operand 2870 states. Second operand 4 states.
[2020-11-25 10:55:11,624 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:11,624 INFO  L93              Difference]: Finished difference Result 2024 states and 2253 transitions.
[2020-11-25 10:55:11,625 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 10:55:11,626 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2024 states and 2253 transitions.
[2020-11-25 10:55:11,640 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:11,660 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2024 states to 2024 states and 2253 transitions.
[2020-11-25 10:55:11,661 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 10:55:11,664 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 646
[2020-11-25 10:55:11,664 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2024 states and 2253 transitions.
[2020-11-25 10:55:11,671 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:11,671 INFO  L728         BuchiCegarLoop]: Abstraction has 2024 states and 2253 transitions.
[2020-11-25 10:55:11,689 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2024 states and 2253 transitions.
[2020-11-25 10:55:11,731 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2024 to 2024.
[2020-11-25 10:55:11,732 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2024 states.
[2020-11-25 10:55:11,735 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2024 states to 2024 states and 2253 transitions.
[2020-11-25 10:55:11,736 INFO  L751         BuchiCegarLoop]: Abstraction has 2024 states and 2253 transitions.
[2020-11-25 10:55:11,736 INFO  L631         BuchiCegarLoop]: Abstraction has 2024 states and 2253 transitions.
[2020-11-25 10:55:11,736 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 10:55:11,736 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2024 states and 2253 transitions.
[2020-11-25 10:55:11,741 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:11,741 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:11,741 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:11,743 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:11,743 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND TRUE   revert
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND TRUE   !(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0)
[L1972]              revert := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND TRUE   !(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0)
[L1972]              revert := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:11,746 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:11,747 INFO  L82        PathProgramCache]: Analyzing trace with hash 2024946859, now seen corresponding path program 1 times
[2020-11-25 10:55:11,747 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:11,757 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:11,774 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 10:55:11,774 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:55:11,774 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 10:55:11,775 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:11,776 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 10:55:11,776 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 10:55:11,776 INFO  L87              Difference]: Start difference. First operand 2024 states and 2253 transitions. cyclomatic complexity: 231 Second operand 4 states.
[2020-11-25 10:55:12,136 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:12,136 INFO  L93              Difference]: Finished difference Result 2632 states and 2948 transitions.
[2020-11-25 10:55:12,136 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 10:55:12,136 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2632 states and 2948 transitions.
[2020-11-25 10:55:12,147 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 10:55:12,157 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2632 states to 2492 states and 2778 transitions.
[2020-11-25 10:55:12,157 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 768
[2020-11-25 10:55:12,158 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 779
[2020-11-25 10:55:12,158 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2492 states and 2778 transitions.
[2020-11-25 10:55:12,161 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:12,161 INFO  L728         BuchiCegarLoop]: Abstraction has 2492 states and 2778 transitions.
[2020-11-25 10:55:12,163 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2492 states and 2778 transitions.
[2020-11-25 10:55:12,183 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2492 to 2200.
[2020-11-25 10:55:12,183 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2200 states.
[2020-11-25 10:55:12,186 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2200 states to 2200 states and 2412 transitions.
[2020-11-25 10:55:12,186 INFO  L751         BuchiCegarLoop]: Abstraction has 2200 states and 2412 transitions.
[2020-11-25 10:55:12,186 INFO  L631         BuchiCegarLoop]: Abstraction has 2200 states and 2412 transitions.
[2020-11-25 10:55:12,187 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 10:55:12,187 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2200 states and 2412 transitions.
[2020-11-25 10:55:12,191 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 10:55:12,191 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:12,191 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:12,193 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:12,193 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:12,198 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:12,198 INFO  L82        PathProgramCache]: Analyzing trace with hash -901236125, now seen corresponding path program 1 times
[2020-11-25 10:55:12,199 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:12,217 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:12,411 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 10:55:12,411 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:12,411 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [16] total 16
[2020-11-25 10:55:12,412 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:12,412 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 10:55:12,412 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=235, Unknown=0, NotChecked=0, Total=272
[2020-11-25 10:55:12,412 INFO  L87              Difference]: Start difference. First operand 2200 states and 2412 transitions. cyclomatic complexity: 214 Second operand 17 states.
[2020-11-25 10:55:14,372 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:14,372 INFO  L93              Difference]: Finished difference Result 2281 states and 2511 transitions.
[2020-11-25 10:55:14,372 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 16 states. 
[2020-11-25 10:55:14,372 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2281 states and 2511 transitions.
[2020-11-25 10:55:14,378 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 10:55:14,386 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2281 states to 2281 states and 2511 transitions.
[2020-11-25 10:55:14,386 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 727
[2020-11-25 10:55:14,387 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 727
[2020-11-25 10:55:14,387 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2281 states and 2511 transitions.
[2020-11-25 10:55:14,389 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:14,390 INFO  L728         BuchiCegarLoop]: Abstraction has 2281 states and 2511 transitions.
[2020-11-25 10:55:14,392 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2281 states and 2511 transitions.
[2020-11-25 10:55:14,409 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2281 to 2131.
[2020-11-25 10:55:14,410 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2131 states.
[2020-11-25 10:55:14,412 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2131 states to 2131 states and 2321 transitions.
[2020-11-25 10:55:14,412 INFO  L751         BuchiCegarLoop]: Abstraction has 2131 states and 2321 transitions.
[2020-11-25 10:55:14,412 INFO  L631         BuchiCegarLoop]: Abstraction has 2131 states and 2321 transitions.
[2020-11-25 10:55:14,412 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 10:55:14,412 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2131 states and 2321 transitions.
[2020-11-25 10:55:14,415 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:14,415 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:14,415 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:14,418 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:14,418 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:14,421 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:14,421 INFO  L82        PathProgramCache]: Analyzing trace with hash 1474672911, now seen corresponding path program 1 times
[2020-11-25 10:55:14,422 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:14,429 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:14,502 INFO  L134       CoverageAnalysis]: Checked inductivity of 11 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 10:55:14,502 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:14,502 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 10:55:14,503 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:14,503 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 10:55:14,503 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=339, Unknown=0, NotChecked=0, Total=380
[2020-11-25 10:55:14,503 INFO  L87              Difference]: Start difference. First operand 2131 states and 2321 transitions. cyclomatic complexity: 193 Second operand 20 states.
[2020-11-25 10:55:15,923 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:15,923 INFO  L93              Difference]: Finished difference Result 2190 states and 2392 transitions.
[2020-11-25 10:55:15,923 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 10:55:15,924 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2190 states and 2392 transitions.
[2020-11-25 10:55:15,937 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:15,944 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2190 states to 2190 states and 2392 transitions.
[2020-11-25 10:55:15,944 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 674
[2020-11-25 10:55:15,945 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 674
[2020-11-25 10:55:15,945 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2190 states and 2392 transitions.
[2020-11-25 10:55:15,947 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:15,947 INFO  L728         BuchiCegarLoop]: Abstraction has 2190 states and 2392 transitions.
[2020-11-25 10:55:15,950 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2190 states and 2392 transitions.
[2020-11-25 10:55:15,968 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2190 to 2122.
[2020-11-25 10:55:15,968 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2122 states.
[2020-11-25 10:55:15,970 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2122 states to 2122 states and 2307 transitions.
[2020-11-25 10:55:15,971 INFO  L751         BuchiCegarLoop]: Abstraction has 2122 states and 2307 transitions.
[2020-11-25 10:55:15,971 INFO  L631         BuchiCegarLoop]: Abstraction has 2122 states and 2307 transitions.
[2020-11-25 10:55:15,971 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 10:55:15,971 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2122 states and 2307 transitions.
[2020-11-25 10:55:15,975 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:15,975 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:15,975 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:15,977 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:15,977 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND TRUE   __exception
[L442]               __tmp__Balance := Balance;
[L443]               __tmp__DType := DType;
[L444]               __tmp__Alloc := Alloc;
[L445]               __tmp__balance_ADDR := balance_ADDR;
[L446]               __tmp__M_Ref_int := M_Ref_int;
[L447]               __tmp__sum__balances0 := sum__balances0;
[L448]               __tmp__alloc__allowed_ZJYB_lvl0 := alloc__allowed_ZJYB_lvl0;
[L449]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L450]               __tmp__sum__allowed1 := sum__allowed1;
[L451]               __tmp__Length := Length;
[L452]               __tmp__now := now;
[L453]               __tmp__owner_Owned := owner_Owned;
[L454]               __tmp__newOwner_Owned := newOwner_Owned;
[L455]               __tmp__name_ZJYB := name_ZJYB;
[L456]               __tmp__symbol_ZJYB := symbol_ZJYB;
[L457]               __tmp__decimals_ZJYB := decimals_ZJYB;
[L458]               __tmp___balances_ZJYB := _balances_ZJYB;
[L459]               __tmp___allowed_ZJYB := _allowed_ZJYB;
[L460]               __tmp__totalSupply_ZJYB := totalSupply_ZJYB;
[L461]   CALL        call ZJYB_ZJYB__fail(this, msgsender_MSG, msgvalue_MSG);
[L1863]  CALL        call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1492]  CALL        call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1477]              assume msgsender_MSG != null;
[L1478]              __tmp__Balance[this] := 0;
[L1492]  RET         call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1493]  COND FALSE  !(revert)
[L1863]  RET         call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1864]  COND FALSE  !(revert)
[L1867]  CALL        call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1736]  CALL        call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1715]              assume msgsender_MSG != null;
[L1716]              __tmp__Balance[this] := 0;
[L1717]              __tmp__owner_Owned[this] := null;
[L1718]              __tmp__newOwner_Owned[this] := null;
[L1720]              __tmp__owner_Owned[this] := msgsender_MSG;
[L1736]  RET         call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1737]  COND FALSE  !(revert)
[L1867]  RET         call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1868]  COND FALSE  !(revert)
[L1871]  CALL        call ZJYB_ZJYB_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1821]              assume msgsender_MSG != null;
[L1822]              __tmp__Balance[this] := 0;
[L1823]              __tmp__name_ZJYB[this] := 1113454875;
[L1824]              __tmp__symbol_ZJYB[this] := 773017640;
[L1825]              __tmp__decimals_ZJYB[this] := 18;
[L1826]              __tmp___balances_ZJYB[this] := zeroRefintArr();
[L1827]              __tmp__sum__balances0[this] := 0;
[L1828]              __tmp___allowed_ZJYB[this] := zeroRefRefintArr();
[L1829]              __tmp__sum__allowed1[this] := 0;
[L1830]              __var_2 := __tmp__decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1831]              __tmp__totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, __tmp__decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1833]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ZJYB[this][msgsender_MSG];
[L1834]              __tmp___balances_ZJYB[this][msgsender_MSG] := __tmp__totalSupply_ZJYB[this];
[L1835]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ZJYB[this][msgsender_MSG];
[L1871]  RET         call ZJYB_ZJYB_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1872]  COND FALSE  !(revert)
[L461]   RET         call ZJYB_ZJYB__fail(this, msgsender_MSG, msgvalue_MSG);
[L462]               assume revert || gas < 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND FALSE  !(DType[this] == ZJYB)
[L1684]  COND TRUE   DType[this] == SafeMath
[L1685]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1685]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1686]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND FALSE  !(DType[this] == ZJYB)
[L1684]  COND TRUE   DType[this] == SafeMath
[L1685]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1685]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1686]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:15,981 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:15,981 INFO  L82        PathProgramCache]: Analyzing trace with hash -1865175616, now seen corresponding path program 1 times
[2020-11-25 10:55:15,982 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:15,990 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:16,024 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3 trivial. 0 not checked.
[2020-11-25 10:55:16,024 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:55:16,024 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 10:55:16,024 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:16,025 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 10:55:16,025 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 10:55:16,025 INFO  L87              Difference]: Start difference. First operand 2122 states and 2307 transitions. cyclomatic complexity: 188 Second operand 4 states.
[2020-11-25 10:55:16,200 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:16,200 INFO  L93              Difference]: Finished difference Result 2686 states and 3031 transitions.
[2020-11-25 10:55:16,200 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 10:55:16,201 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2686 states and 3031 transitions.
[2020-11-25 10:55:16,208 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 10:55:16,215 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2686 states to 2606 states and 2951 transitions.
[2020-11-25 10:55:16,215 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 830
[2020-11-25 10:55:16,216 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 830
[2020-11-25 10:55:16,216 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2606 states and 2951 transitions.
[2020-11-25 10:55:16,218 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:16,218 INFO  L728         BuchiCegarLoop]: Abstraction has 2606 states and 2951 transitions.
[2020-11-25 10:55:16,220 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2606 states and 2951 transitions.
[2020-11-25 10:55:16,233 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2606 to 2042.
[2020-11-25 10:55:16,234 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2042 states.
[2020-11-25 10:55:16,235 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2042 states to 2042 states and 2226 transitions.
[2020-11-25 10:55:16,235 INFO  L751         BuchiCegarLoop]: Abstraction has 2042 states and 2226 transitions.
[2020-11-25 10:55:16,235 INFO  L631         BuchiCegarLoop]: Abstraction has 2042 states and 2226 transitions.
[2020-11-25 10:55:16,235 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 10:55:16,236 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2042 states and 2226 transitions.
[2020-11-25 10:55:16,238 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:16,238 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:16,238 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:16,239 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:16,239 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND FALSE  !(DType[this] == ZJYB)
[L1684]  COND TRUE   DType[this] == SafeMath
[L1685]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1685]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1686]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:16,242 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:16,242 INFO  L82        PathProgramCache]: Analyzing trace with hash 1850564926, now seen corresponding path program 1 times
[2020-11-25 10:55:16,243 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:16,254 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:16,298 INFO  L134       CoverageAnalysis]: Checked inductivity of 68 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 68 trivial. 0 not checked.
[2020-11-25 10:55:16,299 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:55:16,299 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 10:55:16,299 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:16,299 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 10:55:16,299 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 10:55:16,299 INFO  L87              Difference]: Start difference. First operand 2042 states and 2226 transitions. cyclomatic complexity: 187 Second operand 7 states.
[2020-11-25 10:55:16,348 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:16,348 INFO  L93              Difference]: Finished difference Result 2094 states and 2279 transitions.
[2020-11-25 10:55:16,348 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 10:55:16,348 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2094 states and 2279 transitions.
[2020-11-25 10:55:16,352 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:16,356 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2094 states to 2048 states and 2232 transitions.
[2020-11-25 10:55:16,356 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 660
[2020-11-25 10:55:16,357 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 660
[2020-11-25 10:55:16,357 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2048 states and 2232 transitions.
[2020-11-25 10:55:16,358 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:16,359 INFO  L728         BuchiCegarLoop]: Abstraction has 2048 states and 2232 transitions.
[2020-11-25 10:55:16,360 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2048 states and 2232 transitions.
[2020-11-25 10:55:16,369 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2048 to 2048.
[2020-11-25 10:55:16,369 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2048 states.
[2020-11-25 10:55:16,371 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2048 states to 2048 states and 2232 transitions.
[2020-11-25 10:55:16,371 INFO  L751         BuchiCegarLoop]: Abstraction has 2048 states and 2232 transitions.
[2020-11-25 10:55:16,371 INFO  L631         BuchiCegarLoop]: Abstraction has 2048 states and 2232 transitions.
[2020-11-25 10:55:16,371 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 10:55:16,371 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2048 states and 2232 transitions.
[2020-11-25 10:55:16,373 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:16,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:16,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:16,374 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:16,374 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:16,378 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:16,378 INFO  L82        PathProgramCache]: Analyzing trace with hash 1219290358, now seen corresponding path program 1 times
[2020-11-25 10:55:16,378 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:16,389 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:16,687 INFO  L134       CoverageAnalysis]: Checked inductivity of 68 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 10:55:16,687 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:16,687 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [20] total 20
[2020-11-25 10:55:16,688 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:16,688 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 21 interpolants.
[2020-11-25 10:55:16,688 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=50, Invalid=370, Unknown=0, NotChecked=0, Total=420
[2020-11-25 10:55:16,689 INFO  L87              Difference]: Start difference. First operand 2048 states and 2232 transitions. cyclomatic complexity: 187 Second operand 21 states.
[2020-11-25 10:55:18,509 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:18,510 INFO  L93              Difference]: Finished difference Result 2106 states and 2301 transitions.
[2020-11-25 10:55:18,510 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 10:55:18,510 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2106 states and 2301 transitions.
[2020-11-25 10:55:18,513 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:18,517 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2106 states to 2106 states and 2301 transitions.
[2020-11-25 10:55:18,517 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 10:55:18,517 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 10:55:18,517 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2106 states and 2301 transitions.
[2020-11-25 10:55:18,519 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:18,519 INFO  L728         BuchiCegarLoop]: Abstraction has 2106 states and 2301 transitions.
[2020-11-25 10:55:18,521 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2106 states and 2301 transitions.
[2020-11-25 10:55:18,530 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2106 to 2070.
[2020-11-25 10:55:18,530 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2070 states.
[2020-11-25 10:55:18,532 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2070 states to 2070 states and 2264 transitions.
[2020-11-25 10:55:18,532 INFO  L751         BuchiCegarLoop]: Abstraction has 2070 states and 2264 transitions.
[2020-11-25 10:55:18,532 INFO  L631         BuchiCegarLoop]: Abstraction has 2070 states and 2264 transitions.
[2020-11-25 10:55:18,532 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 10:55:18,532 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2070 states and 2264 transitions.
[2020-11-25 10:55:18,534 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:18,535 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:18,535 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:18,536 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:18,536 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:18,539 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:18,539 INFO  L82        PathProgramCache]: Analyzing trace with hash 1744626210, now seen corresponding path program 1 times
[2020-11-25 10:55:18,540 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:18,549 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:18,672 INFO  L134       CoverageAnalysis]: Checked inductivity of 76 backedges. 0 proven. 23 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-11-25 10:55:18,672 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:18,672 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 10:55:18,672 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:18,672 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 10:55:18,672 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=65, Invalid=535, Unknown=0, NotChecked=0, Total=600
[2020-11-25 10:55:18,673 INFO  L87              Difference]: Start difference. First operand 2070 states and 2264 transitions. cyclomatic complexity: 198 Second operand 25 states.
[2020-11-25 10:55:20,356 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:20,356 INFO  L93              Difference]: Finished difference Result 2122 states and 2326 transitions.
[2020-11-25 10:55:20,356 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 10:55:20,356 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2122 states and 2326 transitions.
[2020-11-25 10:55:20,360 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:20,365 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2122 states to 2122 states and 2326 transitions.
[2020-11-25 10:55:20,365 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 10:55:20,365 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 10:55:20,365 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2122 states and 2326 transitions.
[2020-11-25 10:55:20,367 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:20,367 INFO  L728         BuchiCegarLoop]: Abstraction has 2122 states and 2326 transitions.
[2020-11-25 10:55:20,368 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2122 states and 2326 transitions.
[2020-11-25 10:55:20,378 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2122 to 2072.
[2020-11-25 10:55:20,378 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2072 states.
[2020-11-25 10:55:20,380 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2072 states to 2072 states and 2269 transitions.
[2020-11-25 10:55:20,380 INFO  L751         BuchiCegarLoop]: Abstraction has 2072 states and 2269 transitions.
[2020-11-25 10:55:20,380 INFO  L631         BuchiCegarLoop]: Abstraction has 2072 states and 2269 transitions.
[2020-11-25 10:55:20,380 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 10:55:20,380 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2072 states and 2269 transitions.
[2020-11-25 10:55:20,383 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:20,383 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:20,383 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:20,383 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:20,384 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:20,387 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:20,387 INFO  L82        PathProgramCache]: Analyzing trace with hash -1193429334, now seen corresponding path program 1 times
[2020-11-25 10:55:20,387 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:20,409 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:20,478 INFO  L134       CoverageAnalysis]: Checked inductivity of 69 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 67 trivial. 0 not checked.
[2020-11-25 10:55:20,478 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:20,478 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 10:55:20,478 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:20,479 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 10:55:20,479 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=19, Invalid=53, Unknown=0, NotChecked=0, Total=72
[2020-11-25 10:55:20,479 INFO  L87              Difference]: Start difference. First operand 2072 states and 2269 transitions. cyclomatic complexity: 202 Second operand 9 states.
[2020-11-25 10:55:21,213 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:21,213 INFO  L93              Difference]: Finished difference Result 2092 states and 2286 transitions.
[2020-11-25 10:55:21,214 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 10:55:21,214 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2092 states and 2286 transitions.
[2020-11-25 10:55:21,217 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:21,221 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2092 states to 2092 states and 2286 transitions.
[2020-11-25 10:55:21,221 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 667
[2020-11-25 10:55:21,221 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 667
[2020-11-25 10:55:21,222 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2092 states and 2286 transitions.
[2020-11-25 10:55:21,223 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:21,223 INFO  L728         BuchiCegarLoop]: Abstraction has 2092 states and 2286 transitions.
[2020-11-25 10:55:21,225 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2092 states and 2286 transitions.
[2020-11-25 10:55:21,233 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2092 to 2056.
[2020-11-25 10:55:21,233 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2056 states.
[2020-11-25 10:55:21,235 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2056 states to 2056 states and 2244 transitions.
[2020-11-25 10:55:21,235 INFO  L751         BuchiCegarLoop]: Abstraction has 2056 states and 2244 transitions.
[2020-11-25 10:55:21,235 INFO  L631         BuchiCegarLoop]: Abstraction has 2056 states and 2244 transitions.
[2020-11-25 10:55:21,235 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 10:55:21,235 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2056 states and 2244 transitions.
[2020-11-25 10:55:21,237 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:21,237 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:21,237 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:21,238 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:21,238 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:21,241 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:21,241 INFO  L82        PathProgramCache]: Analyzing trace with hash -884622890, now seen corresponding path program 1 times
[2020-11-25 10:55:21,241 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:21,252 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:21,440 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 28 refuted. 0 times theorem prover too weak. 49 trivial. 0 not checked.
[2020-11-25 10:55:21,440 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:21,440 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 10:55:21,440 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:21,440 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 10:55:21,441 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=631, Unknown=0, NotChecked=0, Total=702
[2020-11-25 10:55:21,441 INFO  L87              Difference]: Start difference. First operand 2056 states and 2244 transitions. cyclomatic complexity: 192 Second operand 27 states.
[2020-11-25 10:55:23,536 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:23,536 INFO  L93              Difference]: Finished difference Result 2120 states and 2321 transitions.
[2020-11-25 10:55:23,536 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 10:55:23,536 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2120 states and 2321 transitions.
[2020-11-25 10:55:23,540 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:23,544 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2120 states to 2120 states and 2321 transitions.
[2020-11-25 10:55:23,544 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 674
[2020-11-25 10:55:23,544 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 674
[2020-11-25 10:55:23,544 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2120 states and 2321 transitions.
[2020-11-25 10:55:23,546 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:23,546 INFO  L728         BuchiCegarLoop]: Abstraction has 2120 states and 2321 transitions.
[2020-11-25 10:55:23,547 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2120 states and 2321 transitions.
[2020-11-25 10:55:23,556 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2120 to 2061.
[2020-11-25 10:55:23,556 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2061 states.
[2020-11-25 10:55:23,557 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2061 states to 2061 states and 2249 transitions.
[2020-11-25 10:55:23,557 INFO  L751         BuchiCegarLoop]: Abstraction has 2061 states and 2249 transitions.
[2020-11-25 10:55:23,558 INFO  L631         BuchiCegarLoop]: Abstraction has 2061 states and 2249 transitions.
[2020-11-25 10:55:23,558 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 10:55:23,558 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2061 states and 2249 transitions.
[2020-11-25 10:55:23,560 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:55:23,560 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:23,560 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:23,561 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:23,561 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:23,564 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:23,564 INFO  L82        PathProgramCache]: Analyzing trace with hash 1944790680, now seen corresponding path program 1 times
[2020-11-25 10:55:23,565 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:23,573 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:23,638 INFO  L134       CoverageAnalysis]: Checked inductivity of 82 backedges. 1 proven. 53 refuted. 0 times theorem prover too weak. 28 trivial. 0 not checked.
[2020-11-25 10:55:23,638 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:23,638 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 10:55:23,639 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:23,639 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 10:55:23,639 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-11-25 10:55:23,639 INFO  L87              Difference]: Start difference. First operand 2061 states and 2249 transitions. cyclomatic complexity: 192 Second operand 12 states.
[2020-11-25 10:55:24,211 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:24,211 INFO  L93              Difference]: Finished difference Result 2083 states and 2292 transitions.
[2020-11-25 10:55:24,211 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 10:55:24,212 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2083 states and 2292 transitions.
[2020-11-25 10:55:24,215 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:24,219 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2083 states to 2083 states and 2292 transitions.
[2020-11-25 10:55:24,220 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 671
[2020-11-25 10:55:24,220 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 671
[2020-11-25 10:55:24,220 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2083 states and 2292 transitions.
[2020-11-25 10:55:24,221 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:24,221 INFO  L728         BuchiCegarLoop]: Abstraction has 2083 states and 2292 transitions.
[2020-11-25 10:55:24,223 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2083 states and 2292 transitions.
[2020-11-25 10:55:24,233 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2083 to 2083.
[2020-11-25 10:55:24,233 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2083 states.
[2020-11-25 10:55:24,235 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2083 states to 2083 states and 2292 transitions.
[2020-11-25 10:55:24,235 INFO  L751         BuchiCegarLoop]: Abstraction has 2083 states and 2292 transitions.
[2020-11-25 10:55:24,235 INFO  L631         BuchiCegarLoop]: Abstraction has 2083 states and 2292 transitions.
[2020-11-25 10:55:24,235 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 10:55:24,235 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2083 states and 2292 transitions.
[2020-11-25 10:55:24,237 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:24,237 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:24,237 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:24,238 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:24,238 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:24,240 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:24,241 INFO  L82        PathProgramCache]: Analyzing trace with hash -156887406, now seen corresponding path program 1 times
[2020-11-25 10:55:24,241 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:24,251 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:24,393 INFO  L134       CoverageAnalysis]: Checked inductivity of 85 backedges. 0 proven. 28 refuted. 0 times theorem prover too weak. 57 trivial. 0 not checked.
[2020-11-25 10:55:24,394 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:24,394 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 10:55:24,394 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:24,394 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 10:55:24,394 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=579, Unknown=0, NotChecked=0, Total=650
[2020-11-25 10:55:24,394 INFO  L87              Difference]: Start difference. First operand 2083 states and 2292 transitions. cyclomatic complexity: 217 Second operand 26 states.
[2020-11-25 10:55:25,906 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:25,906 INFO  L93              Difference]: Finished difference Result 2142 states and 2369 transitions.
[2020-11-25 10:55:25,907 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 10:55:25,907 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2142 states and 2369 transitions.
[2020-11-25 10:55:25,911 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:25,915 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2142 states to 2142 states and 2369 transitions.
[2020-11-25 10:55:25,915 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:55:25,916 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:55:25,916 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2142 states and 2369 transitions.
[2020-11-25 10:55:25,917 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:25,917 INFO  L728         BuchiCegarLoop]: Abstraction has 2142 states and 2369 transitions.
[2020-11-25 10:55:25,919 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2142 states and 2369 transitions.
[2020-11-25 10:55:25,929 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2142 to 2076.
[2020-11-25 10:55:25,929 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2076 states.
[2020-11-25 10:55:25,931 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2076 states to 2076 states and 2280 transitions.
[2020-11-25 10:55:25,931 INFO  L751         BuchiCegarLoop]: Abstraction has 2076 states and 2280 transitions.
[2020-11-25 10:55:25,931 INFO  L631         BuchiCegarLoop]: Abstraction has 2076 states and 2280 transitions.
[2020-11-25 10:55:25,931 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 10:55:25,931 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2076 states and 2280 transitions.
[2020-11-25 10:55:25,933 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:25,933 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:25,933 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:25,934 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:25,934 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND FALSE  !(DType[this] == ZJYB)
[L1684]  COND TRUE   DType[this] == SafeMath
[L1685]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1685]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1686]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:25,938 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:25,938 INFO  L82        PathProgramCache]: Analyzing trace with hash 1055525413, now seen corresponding path program 1 times
[2020-11-25 10:55:25,938 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:25,951 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:26,346 INFO  L134       CoverageAnalysis]: Checked inductivity of 195 backedges. 0 proven. 136 refuted. 0 times theorem prover too weak. 59 trivial. 0 not checked.
[2020-11-25 10:55:26,347 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:26,347 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 10:55:26,348 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:26,349 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 10:55:26,349 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=119, Invalid=1213, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 10:55:26,350 INFO  L87              Difference]: Start difference. First operand 2076 states and 2280 transitions. cyclomatic complexity: 212 Second operand 37 states.
[2020-11-25 10:55:30,235 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:30,235 INFO  L93              Difference]: Finished difference Result 2128 states and 2348 transitions.
[2020-11-25 10:55:30,235 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 10:55:30,235 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2128 states and 2348 transitions.
[2020-11-25 10:55:30,240 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:30,245 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2128 states to 2128 states and 2348 transitions.
[2020-11-25 10:55:30,245 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 10:55:30,246 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 10:55:30,246 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2128 states and 2348 transitions.
[2020-11-25 10:55:30,247 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:30,247 INFO  L728         BuchiCegarLoop]: Abstraction has 2128 states and 2348 transitions.
[2020-11-25 10:55:30,249 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2128 states and 2348 transitions.
[2020-11-25 10:55:30,260 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2128 to 2078.
[2020-11-25 10:55:30,260 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2078 states.
[2020-11-25 10:55:30,263 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2078 states to 2078 states and 2286 transitions.
[2020-11-25 10:55:30,263 INFO  L751         BuchiCegarLoop]: Abstraction has 2078 states and 2286 transitions.
[2020-11-25 10:55:30,263 INFO  L631         BuchiCegarLoop]: Abstraction has 2078 states and 2286 transitions.
[2020-11-25 10:55:30,263 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 10:55:30,263 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2078 states and 2286 transitions.
[2020-11-25 10:55:30,266 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:30,266 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:30,266 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:30,267 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:30,267 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:30,271 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:30,271 INFO  L82        PathProgramCache]: Analyzing trace with hash -936992843, now seen corresponding path program 2 times
[2020-11-25 10:55:30,271 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:30,286 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:30,529 INFO  L134       CoverageAnalysis]: Checked inductivity of 279 backedges. 0 proven. 41 refuted. 0 times theorem prover too weak. 238 trivial. 0 not checked.
[2020-11-25 10:55:30,529 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:30,529 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 10:55:30,529 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:30,530 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 10:55:30,530 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 10:55:30,530 INFO  L87              Difference]: Start difference. First operand 2078 states and 2286 transitions. cyclomatic complexity: 217 Second operand 26 states.
[2020-11-25 10:55:32,525 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:32,525 INFO  L93              Difference]: Finished difference Result 2138 states and 2379 transitions.
[2020-11-25 10:55:32,525 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 10:55:32,525 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2138 states and 2379 transitions.
[2020-11-25 10:55:32,529 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:32,534 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2138 states to 2138 states and 2379 transitions.
[2020-11-25 10:55:32,534 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:55:32,534 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:55:32,534 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2138 states and 2379 transitions.
[2020-11-25 10:55:32,535 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:32,535 INFO  L728         BuchiCegarLoop]: Abstraction has 2138 states and 2379 transitions.
[2020-11-25 10:55:32,537 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2138 states and 2379 transitions.
[2020-11-25 10:55:32,547 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2138 to 2084.
[2020-11-25 10:55:32,547 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2084 states.
[2020-11-25 10:55:32,549 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2084 states to 2084 states and 2307 transitions.
[2020-11-25 10:55:32,549 INFO  L751         BuchiCegarLoop]: Abstraction has 2084 states and 2307 transitions.
[2020-11-25 10:55:32,549 INFO  L631         BuchiCegarLoop]: Abstraction has 2084 states and 2307 transitions.
[2020-11-25 10:55:32,549 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 10:55:32,549 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2084 states and 2307 transitions.
[2020-11-25 10:55:32,551 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:32,551 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:32,551 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:32,552 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:32,552 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:32,555 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:32,556 INFO  L82        PathProgramCache]: Analyzing trace with hash -1683082135, now seen corresponding path program 1 times
[2020-11-25 10:55:32,556 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:32,568 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:32,811 INFO  L134       CoverageAnalysis]: Checked inductivity of 227 backedges. 0 proven. 48 refuted. 0 times theorem prover too weak. 179 trivial. 0 not checked.
[2020-11-25 10:55:32,811 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:32,811 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 10:55:32,812 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:32,812 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 10:55:32,812 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=97, Invalid=833, Unknown=0, NotChecked=0, Total=930
[2020-11-25 10:55:32,812 INFO  L87              Difference]: Start difference. First operand 2084 states and 2307 transitions. cyclomatic complexity: 234 Second operand 31 states.
[2020-11-25 10:55:35,441 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:35,441 INFO  L93              Difference]: Finished difference Result 2156 states and 2419 transitions.
[2020-11-25 10:55:35,441 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 10:55:35,441 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2156 states and 2419 transitions.
[2020-11-25 10:55:35,445 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:35,450 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2156 states to 2156 states and 2419 transitions.
[2020-11-25 10:55:35,450 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 10:55:35,450 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 10:55:35,450 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2156 states and 2419 transitions.
[2020-11-25 10:55:35,452 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:35,452 INFO  L728         BuchiCegarLoop]: Abstraction has 2156 states and 2419 transitions.
[2020-11-25 10:55:35,453 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2156 states and 2419 transitions.
[2020-11-25 10:55:35,465 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2156 to 2091.
[2020-11-25 10:55:35,465 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2091 states.
[2020-11-25 10:55:35,468 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2091 states to 2091 states and 2322 transitions.
[2020-11-25 10:55:35,468 INFO  L751         BuchiCegarLoop]: Abstraction has 2091 states and 2322 transitions.
[2020-11-25 10:55:35,468 INFO  L631         BuchiCegarLoop]: Abstraction has 2091 states and 2322 transitions.
[2020-11-25 10:55:35,468 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 10:55:35,468 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2091 states and 2322 transitions.
[2020-11-25 10:55:35,472 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:35,472 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:35,472 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:35,473 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:35,473 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:35,478 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:35,478 INFO  L82        PathProgramCache]: Analyzing trace with hash 307826597, now seen corresponding path program 1 times
[2020-11-25 10:55:35,478 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:35,490 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:35,688 INFO  L134       CoverageAnalysis]: Checked inductivity of 271 backedges. 0 proven. 46 refuted. 0 times theorem prover too weak. 225 trivial. 0 not checked.
[2020-11-25 10:55:35,688 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:35,688 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 10:55:35,689 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:35,689 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 10:55:35,689 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=81, Invalid=675, Unknown=0, NotChecked=0, Total=756
[2020-11-25 10:55:35,689 INFO  L87              Difference]: Start difference. First operand 2091 states and 2322 transitions. cyclomatic complexity: 242 Second operand 28 states.
[2020-11-25 10:55:37,370 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:37,370 INFO  L93              Difference]: Finished difference Result 2158 states and 2431 transitions.
[2020-11-25 10:55:37,370 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 10:55:37,370 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2158 states and 2431 transitions.
[2020-11-25 10:55:37,374 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:37,379 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2158 states to 2158 states and 2431 transitions.
[2020-11-25 10:55:37,379 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:55:37,379 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:55:37,379 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2158 states and 2431 transitions.
[2020-11-25 10:55:37,381 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:37,381 INFO  L728         BuchiCegarLoop]: Abstraction has 2158 states and 2431 transitions.
[2020-11-25 10:55:37,382 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2158 states and 2431 transitions.
[2020-11-25 10:55:37,392 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2158 to 2095.
[2020-11-25 10:55:37,392 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2095 states.
[2020-11-25 10:55:37,394 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2095 states to 2095 states and 2337 transitions.
[2020-11-25 10:55:37,394 INFO  L751         BuchiCegarLoop]: Abstraction has 2095 states and 2337 transitions.
[2020-11-25 10:55:37,394 INFO  L631         BuchiCegarLoop]: Abstraction has 2095 states and 2337 transitions.
[2020-11-25 10:55:37,394 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 10:55:37,394 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2095 states and 2337 transitions.
[2020-11-25 10:55:37,396 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:37,396 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:37,396 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:37,397 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:37,397 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:37,401 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:37,401 INFO  L82        PathProgramCache]: Analyzing trace with hash -2034293399, now seen corresponding path program 2 times
[2020-11-25 10:55:37,401 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:37,413 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:37,658 INFO  L134       CoverageAnalysis]: Checked inductivity of 227 backedges. 2 proven. 46 refuted. 0 times theorem prover too weak. 179 trivial. 0 not checked.
[2020-11-25 10:55:37,659 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:37,659 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 10:55:37,659 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:37,659 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 10:55:37,659 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=97, Invalid=833, Unknown=0, NotChecked=0, Total=930
[2020-11-25 10:55:37,659 INFO  L87              Difference]: Start difference. First operand 2095 states and 2337 transitions. cyclomatic complexity: 255 Second operand 31 states.
[2020-11-25 10:55:40,299 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:40,299 INFO  L93              Difference]: Finished difference Result 2164 states and 2449 transitions.
[2020-11-25 10:55:40,299 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 10:55:40,299 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2164 states and 2449 transitions.
[2020-11-25 10:55:40,303 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:40,308 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2164 states to 2164 states and 2449 transitions.
[2020-11-25 10:55:40,308 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 10:55:40,308 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 10:55:40,308 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2164 states and 2449 transitions.
[2020-11-25 10:55:40,310 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:40,310 INFO  L728         BuchiCegarLoop]: Abstraction has 2164 states and 2449 transitions.
[2020-11-25 10:55:40,311 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2164 states and 2449 transitions.
[2020-11-25 10:55:40,321 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2164 to 2099.
[2020-11-25 10:55:40,321 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2099 states.
[2020-11-25 10:55:40,323 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2099 states to 2099 states and 2352 transitions.
[2020-11-25 10:55:40,323 INFO  L751         BuchiCegarLoop]: Abstraction has 2099 states and 2352 transitions.
[2020-11-25 10:55:40,323 INFO  L631         BuchiCegarLoop]: Abstraction has 2099 states and 2352 transitions.
[2020-11-25 10:55:40,323 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 10:55:40,323 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2099 states and 2352 transitions.
[2020-11-25 10:55:40,325 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:40,325 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:40,325 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:40,326 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:40,326 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:40,329 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:40,329 INFO  L82        PathProgramCache]: Analyzing trace with hash 269469213, now seen corresponding path program 2 times
[2020-11-25 10:55:40,330 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:40,341 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:40,642 INFO  L134       CoverageAnalysis]: Checked inductivity of 273 backedges. 0 proven. 51 refuted. 0 times theorem prover too weak. 222 trivial. 0 not checked.
[2020-11-25 10:55:40,642 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:40,642 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 10:55:40,642 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:40,643 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 10:55:40,643 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=75, Invalid=681, Unknown=0, NotChecked=0, Total=756
[2020-11-25 10:55:40,643 INFO  L87              Difference]: Start difference. First operand 2099 states and 2352 transitions. cyclomatic complexity: 268 Second operand 28 states.
[2020-11-25 10:55:43,881 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:43,881 INFO  L93              Difference]: Finished difference Result 2158 states and 2431 transitions.
[2020-11-25 10:55:43,881 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 10:55:43,882 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2158 states and 2431 transitions.
[2020-11-25 10:55:43,886 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:43,891 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2158 states to 2158 states and 2431 transitions.
[2020-11-25 10:55:43,891 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:55:43,891 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:55:43,891 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2158 states and 2431 transitions.
[2020-11-25 10:55:43,893 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:43,893 INFO  L728         BuchiCegarLoop]: Abstraction has 2158 states and 2431 transitions.
[2020-11-25 10:55:43,894 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2158 states and 2431 transitions.
[2020-11-25 10:55:43,904 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2158 to 2099.
[2020-11-25 10:55:43,904 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2099 states.
[2020-11-25 10:55:43,906 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2099 states to 2099 states and 2352 transitions.
[2020-11-25 10:55:43,906 INFO  L751         BuchiCegarLoop]: Abstraction has 2099 states and 2352 transitions.
[2020-11-25 10:55:43,906 INFO  L631         BuchiCegarLoop]: Abstraction has 2099 states and 2352 transitions.
[2020-11-25 10:55:43,906 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 10:55:43,906 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2099 states and 2352 transitions.
[2020-11-25 10:55:43,908 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:43,908 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:43,908 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:43,909 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:43,909 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:43,912 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:43,912 INFO  L82        PathProgramCache]: Analyzing trace with hash 1936893785, now seen corresponding path program 1 times
[2020-11-25 10:55:43,913 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:43,925 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:44,235 INFO  L134       CoverageAnalysis]: Checked inductivity of 260 backedges. 7 proven. 53 refuted. 0 times theorem prover too weak. 200 trivial. 0 not checked.
[2020-11-25 10:55:44,235 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:44,235 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 10:55:44,236 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:44,236 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 10:55:44,236 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=106, Invalid=886, Unknown=0, NotChecked=0, Total=992
[2020-11-25 10:55:44,236 INFO  L87              Difference]: Start difference. First operand 2099 states and 2352 transitions. cyclomatic complexity: 268 Second operand 32 states.
[2020-11-25 10:55:46,981 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:46,981 INFO  L93              Difference]: Finished difference Result 2164 states and 2449 transitions.
[2020-11-25 10:55:46,981 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 10:55:46,981 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2164 states and 2449 transitions.
[2020-11-25 10:55:46,985 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:46,990 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2164 states to 2164 states and 2449 transitions.
[2020-11-25 10:55:46,990 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 10:55:46,990 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 10:55:46,990 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2164 states and 2449 transitions.
[2020-11-25 10:55:46,991 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:46,991 INFO  L728         BuchiCegarLoop]: Abstraction has 2164 states and 2449 transitions.
[2020-11-25 10:55:46,993 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2164 states and 2449 transitions.
[2020-11-25 10:55:47,001 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2164 to 2095.
[2020-11-25 10:55:47,001 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2095 states.
[2020-11-25 10:55:47,003 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2095 states to 2095 states and 2337 transitions.
[2020-11-25 10:55:47,003 INFO  L751         BuchiCegarLoop]: Abstraction has 2095 states and 2337 transitions.
[2020-11-25 10:55:47,004 INFO  L631         BuchiCegarLoop]: Abstraction has 2095 states and 2337 transitions.
[2020-11-25 10:55:47,004 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 10:55:47,004 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2095 states and 2337 transitions.
[2020-11-25 10:55:47,006 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:47,006 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:47,006 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:47,007 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:47,007 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:47,009 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:47,009 INFO  L82        PathProgramCache]: Analyzing trace with hash 424419545, now seen corresponding path program 2 times
[2020-11-25 10:55:47,010 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:47,022 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:47,269 INFO  L134       CoverageAnalysis]: Checked inductivity of 260 backedges. 0 proven. 60 refuted. 0 times theorem prover too weak. 200 trivial. 0 not checked.
[2020-11-25 10:55:47,269 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:47,269 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 10:55:47,269 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:47,270 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 10:55:47,270 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=106, Invalid=886, Unknown=0, NotChecked=0, Total=992
[2020-11-25 10:55:47,270 INFO  L87              Difference]: Start difference. First operand 2095 states and 2337 transitions. cyclomatic complexity: 255 Second operand 32 states.
[2020-11-25 10:55:50,051 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:50,052 INFO  L93              Difference]: Finished difference Result 2164 states and 2449 transitions.
[2020-11-25 10:55:50,052 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 10:55:50,052 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2164 states and 2449 transitions.
[2020-11-25 10:55:50,056 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:50,061 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2164 states to 2164 states and 2449 transitions.
[2020-11-25 10:55:50,061 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 10:55:50,061 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 10:55:50,061 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2164 states and 2449 transitions.
[2020-11-25 10:55:50,063 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:50,063 INFO  L728         BuchiCegarLoop]: Abstraction has 2164 states and 2449 transitions.
[2020-11-25 10:55:50,064 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2164 states and 2449 transitions.
[2020-11-25 10:55:50,073 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2164 to 2082.
[2020-11-25 10:55:50,073 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2082 states.
[2020-11-25 10:55:50,075 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2082 states to 2082 states and 2297 transitions.
[2020-11-25 10:55:50,075 INFO  L751         BuchiCegarLoop]: Abstraction has 2082 states and 2297 transitions.
[2020-11-25 10:55:50,075 INFO  L631         BuchiCegarLoop]: Abstraction has 2082 states and 2297 transitions.
[2020-11-25 10:55:50,075 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 10:55:50,075 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2082 states and 2297 transitions.
[2020-11-25 10:55:50,077 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:50,077 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:50,077 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:50,078 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:50,078 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:50,081 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:50,081 INFO  L82        PathProgramCache]: Analyzing trace with hash -394821256, now seen corresponding path program 1 times
[2020-11-25 10:55:50,082 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:50,097 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:50,490 INFO  L134       CoverageAnalysis]: Checked inductivity of 426 backedges. 32 proven. 59 refuted. 0 times theorem prover too weak. 335 trivial. 0 not checked.
[2020-11-25 10:55:50,490 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:50,490 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 10:55:50,490 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:50,490 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 10:55:50,490 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=112, Invalid=1078, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 10:55:50,491 INFO  L87              Difference]: Start difference. First operand 2082 states and 2297 transitions. cyclomatic complexity: 226 Second operand 35 states.
[2020-11-25 10:55:53,851 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:53,851 INFO  L93              Difference]: Finished difference Result 2150 states and 2419 transitions.
[2020-11-25 10:55:53,851 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 10:55:53,851 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2150 states and 2419 transitions.
[2020-11-25 10:55:53,855 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:53,859 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2150 states to 2150 states and 2419 transitions.
[2020-11-25 10:55:53,860 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:55:53,860 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:55:53,860 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2150 states and 2419 transitions.
[2020-11-25 10:55:53,861 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:53,861 INFO  L728         BuchiCegarLoop]: Abstraction has 2150 states and 2419 transitions.
[2020-11-25 10:55:53,862 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2150 states and 2419 transitions.
[2020-11-25 10:55:53,871 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2150 to 2090.
[2020-11-25 10:55:53,871 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2090 states.
[2020-11-25 10:55:53,873 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2090 states to 2090 states and 2326 transitions.
[2020-11-25 10:55:53,873 INFO  L751         BuchiCegarLoop]: Abstraction has 2090 states and 2326 transitions.
[2020-11-25 10:55:53,874 INFO  L631         BuchiCegarLoop]: Abstraction has 2090 states and 2326 transitions.
[2020-11-25 10:55:53,874 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 10:55:53,874 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2090 states and 2326 transitions.
[2020-11-25 10:55:53,876 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:53,876 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:53,876 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:53,877 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:53,877 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:53,880 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:53,880 INFO  L82        PathProgramCache]: Analyzing trace with hash -1433521876, now seen corresponding path program 1 times
[2020-11-25 10:55:53,881 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:53,896 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:54,423 INFO  L134       CoverageAnalysis]: Checked inductivity of 418 backedges. 15 proven. 56 refuted. 0 times theorem prover too weak. 347 trivial. 0 not checked.
[2020-11-25 10:55:54,423 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:54,423 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 10:55:54,424 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:54,424 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 10:55:54,424 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=120, Invalid=1070, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 10:55:54,424 INFO  L87              Difference]: Start difference. First operand 2090 states and 2326 transitions. cyclomatic complexity: 250 Second operand 35 states.
[2020-11-25 10:55:58,687 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:55:58,687 INFO  L93              Difference]: Finished difference Result 2164 states and 2454 transitions.
[2020-11-25 10:55:58,687 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 10:55:58,687 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2164 states and 2454 transitions.
[2020-11-25 10:55:58,691 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:58,695 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2164 states to 2164 states and 2454 transitions.
[2020-11-25 10:55:58,695 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:55:58,696 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:55:58,696 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2164 states and 2454 transitions.
[2020-11-25 10:55:58,697 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:55:58,697 INFO  L728         BuchiCegarLoop]: Abstraction has 2164 states and 2454 transitions.
[2020-11-25 10:55:58,698 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2164 states and 2454 transitions.
[2020-11-25 10:55:58,707 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2164 to 2103.
[2020-11-25 10:55:58,707 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2103 states.
[2020-11-25 10:55:58,709 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2103 states to 2103 states and 2367 transitions.
[2020-11-25 10:55:58,710 INFO  L751         BuchiCegarLoop]: Abstraction has 2103 states and 2367 transitions.
[2020-11-25 10:55:58,710 INFO  L631         BuchiCegarLoop]: Abstraction has 2103 states and 2367 transitions.
[2020-11-25 10:55:58,710 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 10:55:58,710 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2103 states and 2367 transitions.
[2020-11-25 10:55:58,712 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:55:58,712 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:55:58,712 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:55:58,713 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:55:58,713 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:55:58,716 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:55:58,716 INFO  L82        PathProgramCache]: Analyzing trace with hash 750650984, now seen corresponding path program 1 times
[2020-11-25 10:55:58,716 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:55:58,730 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:55:59,137 INFO  L134       CoverageAnalysis]: Checked inductivity of 433 backedges. 31 proven. 63 refuted. 0 times theorem prover too weak. 339 trivial. 0 not checked.
[2020-11-25 10:55:59,137 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:55:59,137 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [35] total 35
[2020-11-25 10:55:59,137 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:55:59,137 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 36 interpolants.
[2020-11-25 10:55:59,138 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=121, Invalid=1139, Unknown=0, NotChecked=0, Total=1260
[2020-11-25 10:55:59,138 INFO  L87              Difference]: Start difference. First operand 2103 states and 2367 transitions. cyclomatic complexity: 281 Second operand 36 states.
[2020-11-25 10:56:02,757 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:02,757 INFO  L93              Difference]: Finished difference Result 2168 states and 2469 transitions.
[2020-11-25 10:56:02,757 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 10:56:02,757 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2168 states and 2469 transitions.
[2020-11-25 10:56:02,762 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:02,766 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2168 states to 2168 states and 2469 transitions.
[2020-11-25 10:56:02,766 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:56:02,766 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:56:02,767 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2168 states and 2469 transitions.
[2020-11-25 10:56:02,768 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:02,768 INFO  L728         BuchiCegarLoop]: Abstraction has 2168 states and 2469 transitions.
[2020-11-25 10:56:02,769 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2168 states and 2469 transitions.
[2020-11-25 10:56:02,778 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2168 to 2107.
[2020-11-25 10:56:02,778 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2107 states.
[2020-11-25 10:56:02,780 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2107 states to 2107 states and 2382 transitions.
[2020-11-25 10:56:02,780 INFO  L751         BuchiCegarLoop]: Abstraction has 2107 states and 2382 transitions.
[2020-11-25 10:56:02,780 INFO  L631         BuchiCegarLoop]: Abstraction has 2107 states and 2382 transitions.
[2020-11-25 10:56:02,780 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 10:56:02,780 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2107 states and 2382 transitions.
[2020-11-25 10:56:02,782 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:02,782 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:02,782 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:02,783 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:02,783 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:02,787 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:02,787 INFO  L82        PathProgramCache]: Analyzing trace with hash 656032824, now seen corresponding path program 2 times
[2020-11-25 10:56:02,787 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:02,801 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:03,128 INFO  L134       CoverageAnalysis]: Checked inductivity of 426 backedges. 34 proven. 34 refuted. 0 times theorem prover too weak. 358 trivial. 0 not checked.
[2020-11-25 10:56:03,128 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:03,128 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 10:56:03,128 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:03,129 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 10:56:03,129 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=106, Invalid=886, Unknown=0, NotChecked=0, Total=992
[2020-11-25 10:56:03,129 INFO  L87              Difference]: Start difference. First operand 2107 states and 2382 transitions. cyclomatic complexity: 294 Second operand 32 states.
[2020-11-25 10:56:06,169 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:06,169 INFO  L93              Difference]: Finished difference Result 2163 states and 2464 transitions.
[2020-11-25 10:56:06,169 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 10:56:06,169 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2163 states and 2464 transitions.
[2020-11-25 10:56:06,174 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:06,179 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2163 states to 2163 states and 2464 transitions.
[2020-11-25 10:56:06,179 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:56:06,179 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:56:06,179 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2163 states and 2464 transitions.
[2020-11-25 10:56:06,181 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:06,181 INFO  L728         BuchiCegarLoop]: Abstraction has 2163 states and 2464 transitions.
[2020-11-25 10:56:06,182 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2163 states and 2464 transitions.
[2020-11-25 10:56:06,201 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2163 to 2107.
[2020-11-25 10:56:06,201 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2107 states.
[2020-11-25 10:56:06,205 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2107 states to 2107 states and 2382 transitions.
[2020-11-25 10:56:06,205 INFO  L751         BuchiCegarLoop]: Abstraction has 2107 states and 2382 transitions.
[2020-11-25 10:56:06,205 INFO  L631         BuchiCegarLoop]: Abstraction has 2107 states and 2382 transitions.
[2020-11-25 10:56:06,205 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 10:56:06,205 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2107 states and 2382 transitions.
[2020-11-25 10:56:06,208 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:06,208 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:06,208 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:06,209 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:06,209 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:06,214 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:06,214 INFO  L82        PathProgramCache]: Analyzing trace with hash -1711077464, now seen corresponding path program 2 times
[2020-11-25 10:56:06,214 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:06,237 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:06,663 INFO  L134       CoverageAnalysis]: Checked inductivity of 433 backedges. 32 proven. 39 refuted. 0 times theorem prover too weak. 362 trivial. 0 not checked.
[2020-11-25 10:56:06,663 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:06,663 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-25 10:56:06,663 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:06,663 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 10:56:06,664 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=114, Invalid=942, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 10:56:06,664 INFO  L87              Difference]: Start difference. First operand 2107 states and 2382 transitions. cyclomatic complexity: 294 Second operand 33 states.
[2020-11-25 10:56:09,139 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:09,139 INFO  L93              Difference]: Finished difference Result 2168 states and 2469 transitions.
[2020-11-25 10:56:09,139 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 10:56:09,139 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2168 states and 2469 transitions.
[2020-11-25 10:56:09,144 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:09,148 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2168 states to 2168 states and 2469 transitions.
[2020-11-25 10:56:09,148 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:56:09,149 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:56:09,149 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2168 states and 2469 transitions.
[2020-11-25 10:56:09,150 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:09,150 INFO  L728         BuchiCegarLoop]: Abstraction has 2168 states and 2469 transitions.
[2020-11-25 10:56:09,151 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2168 states and 2469 transitions.
[2020-11-25 10:56:09,160 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2168 to 2105.
[2020-11-25 10:56:09,160 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2105 states.
[2020-11-25 10:56:09,162 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2105 states to 2105 states and 2374 transitions.
[2020-11-25 10:56:09,162 INFO  L751         BuchiCegarLoop]: Abstraction has 2105 states and 2374 transitions.
[2020-11-25 10:56:09,162 INFO  L631         BuchiCegarLoop]: Abstraction has 2105 states and 2374 transitions.
[2020-11-25 10:56:09,162 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 10:56:09,163 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2105 states and 2374 transitions.
[2020-11-25 10:56:09,165 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:09,165 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:09,165 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:09,166 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:09,166 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:09,169 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:09,169 INFO  L82        PathProgramCache]: Analyzing trace with hash 988836988, now seen corresponding path program 3 times
[2020-11-25 10:56:09,170 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:09,184 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:09,584 INFO  L134       CoverageAnalysis]: Checked inductivity of 515 backedges. 2 proven. 68 refuted. 0 times theorem prover too weak. 445 trivial. 0 not checked.
[2020-11-25 10:56:09,584 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:09,584 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 10:56:09,584 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:09,584 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 10:56:09,585 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=890, Unknown=0, NotChecked=0, Total=992
[2020-11-25 10:56:09,585 INFO  L87              Difference]: Start difference. First operand 2105 states and 2374 transitions. cyclomatic complexity: 287 Second operand 32 states.
[2020-11-25 10:56:13,208 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:13,208 INFO  L93              Difference]: Finished difference Result 2184 states and 2524 transitions.
[2020-11-25 10:56:13,208 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 10:56:13,208 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2184 states and 2524 transitions.
[2020-11-25 10:56:13,213 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:13,219 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2184 states to 2184 states and 2524 transitions.
[2020-11-25 10:56:13,219 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 10:56:13,219 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 10:56:13,219 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2184 states and 2524 transitions.
[2020-11-25 10:56:13,221 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:13,221 INFO  L728         BuchiCegarLoop]: Abstraction has 2184 states and 2524 transitions.
[2020-11-25 10:56:13,222 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2184 states and 2524 transitions.
[2020-11-25 10:56:13,231 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2184 to 2109.
[2020-11-25 10:56:13,231 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2109 states.
[2020-11-25 10:56:13,233 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2109 states to 2109 states and 2389 transitions.
[2020-11-25 10:56:13,233 INFO  L751         BuchiCegarLoop]: Abstraction has 2109 states and 2389 transitions.
[2020-11-25 10:56:13,233 INFO  L631         BuchiCegarLoop]: Abstraction has 2109 states and 2389 transitions.
[2020-11-25 10:56:13,233 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 10:56:13,234 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2109 states and 2389 transitions.
[2020-11-25 10:56:13,235 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:13,236 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:13,236 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:13,236 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:13,236 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:13,239 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:13,239 INFO  L82        PathProgramCache]: Analyzing trace with hash 580276784, now seen corresponding path program 4 times
[2020-11-25 10:56:13,240 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:13,254 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:14,023 INFO  L134       CoverageAnalysis]: Checked inductivity of 508 backedges. 0 proven. 75 refuted. 0 times theorem prover too weak. 433 trivial. 0 not checked.
[2020-11-25 10:56:14,023 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:14,024 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 10:56:14,024 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:14,024 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 10:56:14,024 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=890, Unknown=0, NotChecked=0, Total=992
[2020-11-25 10:56:14,024 INFO  L87              Difference]: Start difference. First operand 2109 states and 2389 transitions. cyclomatic complexity: 300 Second operand 32 states.
[2020-11-25 10:56:17,694 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:17,694 INFO  L93              Difference]: Finished difference Result 2184 states and 2524 transitions.
[2020-11-25 10:56:17,694 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 10:56:17,694 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2184 states and 2524 transitions.
[2020-11-25 10:56:17,699 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:17,704 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2184 states to 2184 states and 2524 transitions.
[2020-11-25 10:56:17,704 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 10:56:17,704 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 10:56:17,704 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2184 states and 2524 transitions.
[2020-11-25 10:56:17,705 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:17,705 INFO  L728         BuchiCegarLoop]: Abstraction has 2184 states and 2524 transitions.
[2020-11-25 10:56:17,707 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2184 states and 2524 transitions.
[2020-11-25 10:56:17,715 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2184 to 2113.
[2020-11-25 10:56:17,715 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2113 states.
[2020-11-25 10:56:17,717 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2113 states to 2113 states and 2404 transitions.
[2020-11-25 10:56:17,717 INFO  L751         BuchiCegarLoop]: Abstraction has 2113 states and 2404 transitions.
[2020-11-25 10:56:17,717 INFO  L631         BuchiCegarLoop]: Abstraction has 2113 states and 2404 transitions.
[2020-11-25 10:56:17,717 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 10:56:17,718 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2113 states and 2404 transitions.
[2020-11-25 10:56:17,719 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:17,719 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:17,720 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:17,720 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:17,721 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:17,723 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:17,724 INFO  L82        PathProgramCache]: Analyzing trace with hash 921536952, now seen corresponding path program 2 times
[2020-11-25 10:56:17,724 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:17,738 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:17,993 INFO  L134       CoverageAnalysis]: Checked inductivity of 595 backedges. 2 proven. 66 refuted. 0 times theorem prover too weak. 527 trivial. 0 not checked.
[2020-11-25 10:56:17,993 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:17,993 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-25 10:56:17,993 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:17,993 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-25 10:56:17,993 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=95, Invalid=775, Unknown=0, NotChecked=0, Total=870
[2020-11-25 10:56:17,993 INFO  L87              Difference]: Start difference. First operand 2113 states and 2404 transitions. cyclomatic complexity: 313 Second operand 30 states.
[2020-11-25 10:56:19,902 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:19,902 INFO  L93              Difference]: Finished difference Result 2178 states and 2501 transitions.
[2020-11-25 10:56:19,902 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 10:56:19,903 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2178 states and 2501 transitions.
[2020-11-25 10:56:19,909 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:19,914 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2178 states to 2178 states and 2501 transitions.
[2020-11-25 10:56:19,914 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 10:56:19,915 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 10:56:19,915 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2178 states and 2501 transitions.
[2020-11-25 10:56:19,916 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:19,916 INFO  L728         BuchiCegarLoop]: Abstraction has 2178 states and 2501 transitions.
[2020-11-25 10:56:19,918 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2178 states and 2501 transitions.
[2020-11-25 10:56:19,927 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2178 to 2117.
[2020-11-25 10:56:19,927 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2117 states.
[2020-11-25 10:56:19,930 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2117 states to 2117 states and 2419 transitions.
[2020-11-25 10:56:19,930 INFO  L751         BuchiCegarLoop]: Abstraction has 2117 states and 2419 transitions.
[2020-11-25 10:56:19,930 INFO  L631         BuchiCegarLoop]: Abstraction has 2117 states and 2419 transitions.
[2020-11-25 10:56:19,930 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 10:56:19,930 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2117 states and 2419 transitions.
[2020-11-25 10:56:19,933 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:19,933 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:19,933 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:19,934 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:19,934 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:19,937 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:19,937 INFO  L82        PathProgramCache]: Analyzing trace with hash -1998654996, now seen corresponding path program 1 times
[2020-11-25 10:56:19,937 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:19,955 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:20,413 INFO  L134       CoverageAnalysis]: Checked inductivity of 531 backedges. 7 proven. 75 refuted. 0 times theorem prover too weak. 449 trivial. 0 not checked.
[2020-11-25 10:56:20,413 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:20,413 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 10:56:20,414 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:20,414 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 10:56:20,414 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=118, Invalid=1004, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 10:56:20,414 INFO  L87              Difference]: Start difference. First operand 2117 states and 2419 transitions. cyclomatic complexity: 326 Second operand 34 states.
[2020-11-25 10:56:23,855 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:23,855 INFO  L93              Difference]: Finished difference Result 2206 states and 2611 transitions.
[2020-11-25 10:56:23,855 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 10:56:23,855 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2206 states and 2611 transitions.
[2020-11-25 10:56:23,860 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:23,865 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2206 states to 2206 states and 2611 transitions.
[2020-11-25 10:56:23,866 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:56:23,866 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:56:23,866 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2206 states and 2611 transitions.
[2020-11-25 10:56:23,867 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:23,867 INFO  L728         BuchiCegarLoop]: Abstraction has 2206 states and 2611 transitions.
[2020-11-25 10:56:23,869 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2206 states and 2611 transitions.
[2020-11-25 10:56:23,878 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2206 to 2129.
[2020-11-25 10:56:23,878 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2129 states.
[2020-11-25 10:56:23,880 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2129 states to 2129 states and 2464 transitions.
[2020-11-25 10:56:23,881 INFO  L751         BuchiCegarLoop]: Abstraction has 2129 states and 2464 transitions.
[2020-11-25 10:56:23,881 INFO  L631         BuchiCegarLoop]: Abstraction has 2129 states and 2464 transitions.
[2020-11-25 10:56:23,881 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 10:56:23,881 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2129 states and 2464 transitions.
[2020-11-25 10:56:23,882 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:23,883 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:23,883 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:23,884 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:23,884 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:23,887 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:23,887 INFO  L82        PathProgramCache]: Analyzing trace with hash 783838060, now seen corresponding path program 2 times
[2020-11-25 10:56:23,887 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:23,902 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:24,334 INFO  L134       CoverageAnalysis]: Checked inductivity of 531 backedges. 0 proven. 82 refuted. 0 times theorem prover too weak. 449 trivial. 0 not checked.
[2020-11-25 10:56:24,335 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:24,335 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 10:56:24,335 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:24,335 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 10:56:24,336 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=118, Invalid=1004, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 10:56:24,336 INFO  L87              Difference]: Start difference. First operand 2129 states and 2464 transitions. cyclomatic complexity: 365 Second operand 34 states.
[2020-11-25 10:56:27,515 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:27,515 INFO  L93              Difference]: Finished difference Result 2206 states and 2611 transitions.
[2020-11-25 10:56:27,515 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 10:56:27,515 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2206 states and 2611 transitions.
[2020-11-25 10:56:27,520 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:27,525 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2206 states to 2206 states and 2611 transitions.
[2020-11-25 10:56:27,525 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:56:27,526 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:56:27,526 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2206 states and 2611 transitions.
[2020-11-25 10:56:27,527 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:27,527 INFO  L728         BuchiCegarLoop]: Abstraction has 2206 states and 2611 transitions.
[2020-11-25 10:56:27,528 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2206 states and 2611 transitions.
[2020-11-25 10:56:27,538 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2206 to 2129.
[2020-11-25 10:56:27,538 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2129 states.
[2020-11-25 10:56:27,540 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2129 states to 2129 states and 2464 transitions.
[2020-11-25 10:56:27,540 INFO  L751         BuchiCegarLoop]: Abstraction has 2129 states and 2464 transitions.
[2020-11-25 10:56:27,540 INFO  L631         BuchiCegarLoop]: Abstraction has 2129 states and 2464 transitions.
[2020-11-25 10:56:27,540 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 10:56:27,540 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2129 states and 2464 transitions.
[2020-11-25 10:56:27,542 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:27,542 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:27,542 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:27,543 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:27,543 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:27,546 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:27,546 INFO  L82        PathProgramCache]: Analyzing trace with hash 856876412, now seen corresponding path program 5 times
[2020-11-25 10:56:27,546 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:27,560 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:27,974 INFO  L134       CoverageAnalysis]: Checked inductivity of 515 backedges. 4 proven. 66 refuted. 0 times theorem prover too weak. 445 trivial. 0 not checked.
[2020-11-25 10:56:27,974 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:27,974 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 10:56:27,975 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:27,975 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 10:56:27,975 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=890, Unknown=0, NotChecked=0, Total=992
[2020-11-25 10:56:27,975 INFO  L87              Difference]: Start difference. First operand 2129 states and 2464 transitions. cyclomatic complexity: 365 Second operand 32 states.
[2020-11-25 10:56:31,523 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:31,523 INFO  L93              Difference]: Finished difference Result 2204 states and 2599 transitions.
[2020-11-25 10:56:31,523 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 10:56:31,523 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2204 states and 2599 transitions.
[2020-11-25 10:56:31,528 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:31,533 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2204 states to 2204 states and 2599 transitions.
[2020-11-25 10:56:31,533 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 10:56:31,533 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 10:56:31,533 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2204 states and 2599 transitions.
[2020-11-25 10:56:31,535 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:31,535 INFO  L728         BuchiCegarLoop]: Abstraction has 2204 states and 2599 transitions.
[2020-11-25 10:56:31,536 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2204 states and 2599 transitions.
[2020-11-25 10:56:31,544 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2204 to 2135.
[2020-11-25 10:56:31,544 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2135 states.
[2020-11-25 10:56:31,547 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2135 states to 2135 states and 2487 transitions.
[2020-11-25 10:56:31,547 INFO  L751         BuchiCegarLoop]: Abstraction has 2135 states and 2487 transitions.
[2020-11-25 10:56:31,547 INFO  L631         BuchiCegarLoop]: Abstraction has 2135 states and 2487 transitions.
[2020-11-25 10:56:31,547 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 10:56:31,547 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2135 states and 2487 transitions.
[2020-11-25 10:56:31,549 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:31,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:31,549 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:31,550 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:31,550 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:31,553 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:31,554 INFO  L82        PathProgramCache]: Analyzing trace with hash -121064400, now seen corresponding path program 6 times
[2020-11-25 10:56:31,554 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:31,569 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:32,313 INFO  L134       CoverageAnalysis]: Checked inductivity of 508 backedges. 4 proven. 71 refuted. 0 times theorem prover too weak. 433 trivial. 0 not checked.
[2020-11-25 10:56:32,313 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:32,313 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 10:56:32,313 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:32,314 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 10:56:32,314 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=890, Unknown=0, NotChecked=0, Total=992
[2020-11-25 10:56:32,314 INFO  L87              Difference]: Start difference. First operand 2135 states and 2487 transitions. cyclomatic complexity: 385 Second operand 32 states.
[2020-11-25 10:56:37,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:37,041 INFO  L93              Difference]: Finished difference Result 2208 states and 2614 transitions.
[2020-11-25 10:56:37,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 10:56:37,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2208 states and 2614 transitions.
[2020-11-25 10:56:37,070 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:37,075 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2208 states to 2208 states and 2614 transitions.
[2020-11-25 10:56:37,075 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 10:56:37,075 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 10:56:37,075 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2208 states and 2614 transitions.
[2020-11-25 10:56:37,077 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:37,077 INFO  L728         BuchiCegarLoop]: Abstraction has 2208 states and 2614 transitions.
[2020-11-25 10:56:37,078 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2208 states and 2614 transitions.
[2020-11-25 10:56:37,086 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2208 to 2135.
[2020-11-25 10:56:37,086 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2135 states.
[2020-11-25 10:56:37,089 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2135 states to 2135 states and 2487 transitions.
[2020-11-25 10:56:37,089 INFO  L751         BuchiCegarLoop]: Abstraction has 2135 states and 2487 transitions.
[2020-11-25 10:56:37,089 INFO  L631         BuchiCegarLoop]: Abstraction has 2135 states and 2487 transitions.
[2020-11-25 10:56:37,089 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 10:56:37,089 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2135 states and 2487 transitions.
[2020-11-25 10:56:37,091 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:37,092 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:37,092 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:37,092 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:37,092 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:37,101 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:37,101 INFO  L82        PathProgramCache]: Analyzing trace with hash 230146864, now seen corresponding path program 7 times
[2020-11-25 10:56:37,102 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:37,116 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:37,775 INFO  L134       CoverageAnalysis]: Checked inductivity of 508 backedges. 2 proven. 73 refuted. 0 times theorem prover too weak. 433 trivial. 0 not checked.
[2020-11-25 10:56:37,776 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:37,776 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 10:56:37,776 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:37,776 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 10:56:37,776 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=890, Unknown=0, NotChecked=0, Total=992
[2020-11-25 10:56:37,776 INFO  L87              Difference]: Start difference. First operand 2135 states and 2487 transitions. cyclomatic complexity: 385 Second operand 32 states.
[2020-11-25 10:56:40,783 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:40,783 INFO  L93              Difference]: Finished difference Result 2208 states and 2614 transitions.
[2020-11-25 10:56:40,783 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 10:56:40,783 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2208 states and 2614 transitions.
[2020-11-25 10:56:40,789 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:40,794 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2208 states to 2208 states and 2614 transitions.
[2020-11-25 10:56:40,794 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 10:56:40,794 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 10:56:40,794 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2208 states and 2614 transitions.
[2020-11-25 10:56:40,796 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:40,796 INFO  L728         BuchiCegarLoop]: Abstraction has 2208 states and 2614 transitions.
[2020-11-25 10:56:40,797 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2208 states and 2614 transitions.
[2020-11-25 10:56:40,805 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2208 to 2139.
[2020-11-25 10:56:40,805 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2139 states.
[2020-11-25 10:56:40,808 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2139 states to 2139 states and 2502 transitions.
[2020-11-25 10:56:40,808 INFO  L751         BuchiCegarLoop]: Abstraction has 2139 states and 2502 transitions.
[2020-11-25 10:56:40,808 INFO  L631         BuchiCegarLoop]: Abstraction has 2139 states and 2502 transitions.
[2020-11-25 10:56:40,808 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 10:56:40,808 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2139 states and 2502 transitions.
[2020-11-25 10:56:40,810 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:40,810 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:40,810 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:40,811 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:40,811 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:40,814 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:40,814 INFO  L82        PathProgramCache]: Analyzing trace with hash -1612866076, now seen corresponding path program 3 times
[2020-11-25 10:56:40,814 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:40,829 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:43,738 INFO  L134       CoverageAnalysis]: Checked inductivity of 599 backedges. 0 proven. 76 refuted. 0 times theorem prover too weak. 523 trivial. 0 not checked.
[2020-11-25 10:56:43,738 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:43,738 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-11-25 10:56:43,739 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:43,739 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 10:56:43,739 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=80, Invalid=732, Unknown=0, NotChecked=0, Total=812
[2020-11-25 10:56:43,739 INFO  L87              Difference]: Start difference. First operand 2139 states and 2502 transitions. cyclomatic complexity: 398 Second operand 29 states.
[2020-11-25 10:56:47,569 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:47,569 INFO  L93              Difference]: Finished difference Result 2198 states and 2581 transitions.
[2020-11-25 10:56:47,569 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 29 states. 
[2020-11-25 10:56:47,569 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2198 states and 2581 transitions.
[2020-11-25 10:56:47,573 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:47,578 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2198 states to 2198 states and 2581 transitions.
[2020-11-25 10:56:47,578 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:56:47,578 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:56:47,579 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2198 states and 2581 transitions.
[2020-11-25 10:56:47,580 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:47,580 INFO  L728         BuchiCegarLoop]: Abstraction has 2198 states and 2581 transitions.
[2020-11-25 10:56:47,581 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2198 states and 2581 transitions.
[2020-11-25 10:56:47,589 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2198 to 2135.
[2020-11-25 10:56:47,589 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2135 states.
[2020-11-25 10:56:47,592 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2135 states to 2135 states and 2487 transitions.
[2020-11-25 10:56:47,592 INFO  L751         BuchiCegarLoop]: Abstraction has 2135 states and 2487 transitions.
[2020-11-25 10:56:47,592 INFO  L631         BuchiCegarLoop]: Abstraction has 2135 states and 2487 transitions.
[2020-11-25 10:56:47,592 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-11-25 10:56:47,592 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2135 states and 2487 transitions.
[2020-11-25 10:56:47,594 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 10:56:47,594 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:47,594 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:47,595 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:47,595 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:47,597 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:47,598 INFO  L82        PathProgramCache]: Analyzing trace with hash -898183316, now seen corresponding path program 3 times
[2020-11-25 10:56:47,598 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:47,612 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:47,921 INFO  L134       CoverageAnalysis]: Checked inductivity of 531 backedges. 4 proven. 83 refuted. 0 times theorem prover too weak. 444 trivial. 0 not checked.
[2020-11-25 10:56:47,922 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:47,922 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 10:56:47,922 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:47,922 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 10:56:47,922 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=121, Invalid=1069, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 10:56:47,922 INFO  L87              Difference]: Start difference. First operand 2135 states and 2487 transitions. cyclomatic complexity: 385 Second operand 35 states.
[2020-11-25 10:56:50,519 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:50,520 INFO  L93              Difference]: Finished difference Result 2191 states and 2557 transitions.
[2020-11-25 10:56:50,520 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 10:56:50,520 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2191 states and 2557 transitions.
[2020-11-25 10:56:50,525 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:56:50,530 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2191 states to 2191 states and 2557 transitions.
[2020-11-25 10:56:50,530 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 680
[2020-11-25 10:56:50,530 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 680
[2020-11-25 10:56:50,530 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2191 states and 2557 transitions.
[2020-11-25 10:56:50,532 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:50,532 INFO  L728         BuchiCegarLoop]: Abstraction has 2191 states and 2557 transitions.
[2020-11-25 10:56:50,533 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2191 states and 2557 transitions.
[2020-11-25 10:56:50,541 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2191 to 2090.
[2020-11-25 10:56:50,541 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2090 states.
[2020-11-25 10:56:50,543 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2090 states to 2090 states and 2339 transitions.
[2020-11-25 10:56:50,543 INFO  L751         BuchiCegarLoop]: Abstraction has 2090 states and 2339 transitions.
[2020-11-25 10:56:50,543 INFO  L631         BuchiCegarLoop]: Abstraction has 2090 states and 2339 transitions.
[2020-11-25 10:56:50,544 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-11-25 10:56:50,544 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2090 states and 2339 transitions.
[2020-11-25 10:56:50,546 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:56:50,546 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:50,546 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:50,547 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:50,547 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:50,550 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:50,550 INFO  L82        PathProgramCache]: Analyzing trace with hash 187779839, now seen corresponding path program 1 times
[2020-11-25 10:56:50,550 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:50,567 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:56:51,651 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 6 proven. 294 refuted. 0 times theorem prover too weak. 434 trivial. 0 not checked.
[2020-11-25 10:56:51,651 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:56:51,651 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 10:56:51,651 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:56:51,652 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 10:56:51,652 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=189, Invalid=1973, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 10:56:51,652 INFO  L87              Difference]: Start difference. First operand 2090 states and 2339 transitions. cyclomatic complexity: 263 Second operand 47 states.
[2020-11-25 10:56:59,919 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:56:59,919 INFO  L93              Difference]: Finished difference Result 2186 states and 2532 transitions.
[2020-11-25 10:56:59,920 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-25 10:56:59,920 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2186 states and 2532 transitions.
[2020-11-25 10:56:59,924 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:56:59,929 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2186 states to 2186 states and 2532 transitions.
[2020-11-25 10:56:59,930 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:56:59,930 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:56:59,930 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2186 states and 2532 transitions.
[2020-11-25 10:56:59,931 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:56:59,931 INFO  L728         BuchiCegarLoop]: Abstraction has 2186 states and 2532 transitions.
[2020-11-25 10:56:59,933 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2186 states and 2532 transitions.
[2020-11-25 10:56:59,940 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2186 to 2096.
[2020-11-25 10:56:59,940 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2096 states.
[2020-11-25 10:56:59,943 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2096 states to 2096 states and 2363 transitions.
[2020-11-25 10:56:59,943 INFO  L751         BuchiCegarLoop]: Abstraction has 2096 states and 2363 transitions.
[2020-11-25 10:56:59,943 INFO  L631         BuchiCegarLoop]: Abstraction has 2096 states and 2363 transitions.
[2020-11-25 10:56:59,943 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-11-25 10:56:59,943 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2096 states and 2363 transitions.
[2020-11-25 10:56:59,945 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:56:59,945 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:56:59,945 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:56:59,946 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:56:59,946 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:56:59,949 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:56:59,950 INFO  L82        PathProgramCache]: Analyzing trace with hash 221927995, now seen corresponding path program 1 times
[2020-11-25 10:56:59,950 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:56:59,967 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:57:00,616 INFO  L134       CoverageAnalysis]: Checked inductivity of 785 backedges. 31 proven. 117 refuted. 0 times theorem prover too weak. 637 trivial. 0 not checked.
[2020-11-25 10:57:00,616 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:57:00,616 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 10:57:00,617 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:57:00,617 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 10:57:00,617 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=152, Invalid=1254, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 10:57:00,617 INFO  L87              Difference]: Start difference. First operand 2096 states and 2363 transitions. cyclomatic complexity: 284 Second operand 38 states.
[2020-11-25 10:57:05,705 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:57:05,705 INFO  L93              Difference]: Finished difference Result 2185 states and 2543 transitions.
[2020-11-25 10:57:05,705 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 10:57:05,705 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2185 states and 2543 transitions.
[2020-11-25 10:57:05,709 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:05,714 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2185 states to 2185 states and 2543 transitions.
[2020-11-25 10:57:05,714 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:57:05,714 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:57:05,714 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2185 states and 2543 transitions.
[2020-11-25 10:57:05,716 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:57:05,716 INFO  L728         BuchiCegarLoop]: Abstraction has 2185 states and 2543 transitions.
[2020-11-25 10:57:05,717 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2185 states and 2543 transitions.
[2020-11-25 10:57:05,724 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2185 to 2106.
[2020-11-25 10:57:05,724 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2106 states.
[2020-11-25 10:57:05,727 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2106 states to 2106 states and 2401 transitions.
[2020-11-25 10:57:05,727 INFO  L751         BuchiCegarLoop]: Abstraction has 2106 states and 2401 transitions.
[2020-11-25 10:57:05,727 INFO  L631         BuchiCegarLoop]: Abstraction has 2106 states and 2401 transitions.
[2020-11-25 10:57:05,727 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-11-25 10:57:05,727 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2106 states and 2401 transitions.
[2020-11-25 10:57:05,729 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:05,729 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:57:05,729 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:57:05,730 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:57:05,730 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:57:05,734 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:57:05,734 INFO  L82        PathProgramCache]: Analyzing trace with hash -1692821777, now seen corresponding path program 1 times
[2020-11-25 10:57:05,735 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:57:05,751 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:57:06,842 INFO  L134       CoverageAnalysis]: Checked inductivity of 765 backedges. 30 proven. 111 refuted. 0 times theorem prover too weak. 624 trivial. 0 not checked.
[2020-11-25 10:57:06,842 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:57:06,842 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 10:57:06,843 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:57:06,843 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 10:57:06,843 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=160, Invalid=1400, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 10:57:06,843 INFO  L87              Difference]: Start difference. First operand 2106 states and 2401 transitions. cyclomatic complexity: 317 Second operand 40 states.
[2020-11-25 10:57:08,946 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification that was a NOOP. DAG size: 121
[2020-11-25 10:57:10,318 WARN  L188               SmtUtils]: Spent 130.00 ms on a formula simplification that was a NOOP. DAG size: 126
[2020-11-25 10:57:13,548 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:57:13,548 INFO  L93              Difference]: Finished difference Result 2181 states and 2528 transitions.
[2020-11-25 10:57:13,548 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 10:57:13,548 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2181 states and 2528 transitions.
[2020-11-25 10:57:13,553 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:13,558 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2181 states to 2181 states and 2528 transitions.
[2020-11-25 10:57:13,558 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:57:13,558 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:57:13,558 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2181 states and 2528 transitions.
[2020-11-25 10:57:13,560 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:57:13,560 INFO  L728         BuchiCegarLoop]: Abstraction has 2181 states and 2528 transitions.
[2020-11-25 10:57:13,561 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2181 states and 2528 transitions.
[2020-11-25 10:57:13,569 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2181 to 2104.
[2020-11-25 10:57:13,569 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2104 states.
[2020-11-25 10:57:13,571 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2104 states to 2104 states and 2393 transitions.
[2020-11-25 10:57:13,571 INFO  L751         BuchiCegarLoop]: Abstraction has 2104 states and 2393 transitions.
[2020-11-25 10:57:13,571 INFO  L631         BuchiCegarLoop]: Abstraction has 2104 states and 2393 transitions.
[2020-11-25 10:57:13,571 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-11-25 10:57:13,571 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2104 states and 2393 transitions.
[2020-11-25 10:57:13,574 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:13,574 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:57:13,574 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:57:13,575 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:57:13,575 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND FALSE  !(DType[this] == ZJYB)
[L1684]  COND TRUE   DType[this] == SafeMath
[L1685]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1685]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1686]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:57:13,578 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:57:13,579 INFO  L82        PathProgramCache]: Analyzing trace with hash -1779392076, now seen corresponding path program 1 times
[2020-11-25 10:57:13,579 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:57:13,595 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:57:13,767 INFO  L134       CoverageAnalysis]: Checked inductivity of 763 backedges. 19 proven. 0 refuted. 0 times theorem prover too weak. 744 trivial. 0 not checked.
[2020-11-25 10:57:13,768 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 10:57:13,768 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 10:57:13,768 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:57:13,769 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 10:57:13,769 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 10:57:13,769 INFO  L87              Difference]: Start difference. First operand 2104 states and 2393 transitions. cyclomatic complexity: 310 Second operand 7 states.
[2020-11-25 10:57:13,861 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:57:13,861 INFO  L93              Difference]: Finished difference Result 2116 states and 2403 transitions.
[2020-11-25 10:57:13,861 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 10:57:13,861 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2116 states and 2403 transitions.
[2020-11-25 10:57:13,865 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:13,869 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2116 states to 2088 states and 2373 transitions.
[2020-11-25 10:57:13,869 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 662
[2020-11-25 10:57:13,870 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 662
[2020-11-25 10:57:13,870 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2088 states and 2373 transitions.
[2020-11-25 10:57:13,871 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:57:13,871 INFO  L728         BuchiCegarLoop]: Abstraction has 2088 states and 2373 transitions.
[2020-11-25 10:57:13,872 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2088 states and 2373 transitions.
[2020-11-25 10:57:13,879 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2088 to 2088.
[2020-11-25 10:57:13,879 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2088 states.
[2020-11-25 10:57:13,881 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2088 states to 2088 states and 2373 transitions.
[2020-11-25 10:57:13,881 INFO  L751         BuchiCegarLoop]: Abstraction has 2088 states and 2373 transitions.
[2020-11-25 10:57:13,881 INFO  L631         BuchiCegarLoop]: Abstraction has 2088 states and 2373 transitions.
[2020-11-25 10:57:13,881 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-11-25 10:57:13,881 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2088 states and 2373 transitions.
[2020-11-25 10:57:13,883 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:13,883 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:57:13,883 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:57:13,884 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:57:13,884 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:57:13,887 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:57:13,887 INFO  L82        PathProgramCache]: Analyzing trace with hash -276462669, now seen corresponding path program 2 times
[2020-11-25 10:57:13,888 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:57:13,905 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:57:17,505 INFO  L134       CoverageAnalysis]: Checked inductivity of 771 backedges. 30 proven. 125 refuted. 0 times theorem prover too weak. 616 trivial. 0 not checked.
[2020-11-25 10:57:17,505 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:57:17,506 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 10:57:17,506 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:57:17,506 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 10:57:17,506 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=148, Invalid=1334, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 10:57:17,506 INFO  L87              Difference]: Start difference. First operand 2088 states and 2373 transitions. cyclomatic complexity: 306 Second operand 39 states.
[2020-11-25 10:57:19,876 WARN  L188               SmtUtils]: Spent 180.00 ms on a formula simplification that was a NOOP. DAG size: 138
[2020-11-25 10:57:20,560 WARN  L188               SmtUtils]: Spent 108.00 ms on a formula simplification that was a NOOP. DAG size: 132
[2020-11-25 10:57:21,049 WARN  L188               SmtUtils]: Spent 186.00 ms on a formula simplification that was a NOOP. DAG size: 140
[2020-11-25 10:57:21,986 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification that was a NOOP. DAG size: 142
[2020-11-25 10:57:26,803 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:57:26,804 INFO  L93              Difference]: Finished difference Result 2163 states and 2506 transitions.
[2020-11-25 10:57:26,804 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 10:57:26,804 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2163 states and 2506 transitions.
[2020-11-25 10:57:26,808 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:26,813 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2163 states to 2163 states and 2506 transitions.
[2020-11-25 10:57:26,814 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 10:57:26,814 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 10:57:26,814 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2163 states and 2506 transitions.
[2020-11-25 10:57:26,815 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:57:26,815 INFO  L728         BuchiCegarLoop]: Abstraction has 2163 states and 2506 transitions.
[2020-11-25 10:57:26,817 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2163 states and 2506 transitions.
[2020-11-25 10:57:26,824 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2163 to 2096.
[2020-11-25 10:57:26,824 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2096 states.
[2020-11-25 10:57:26,826 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2096 states to 2096 states and 2404 transitions.
[2020-11-25 10:57:26,826 INFO  L751         BuchiCegarLoop]: Abstraction has 2096 states and 2404 transitions.
[2020-11-25 10:57:26,826 INFO  L631         BuchiCegarLoop]: Abstraction has 2096 states and 2404 transitions.
[2020-11-25 10:57:26,826 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-11-25 10:57:26,826 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2096 states and 2404 transitions.
[2020-11-25 10:57:26,828 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:26,828 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:57:26,828 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:57:26,829 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:57:26,829 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:57:26,832 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:57:26,832 INFO  L82        PathProgramCache]: Analyzing trace with hash -1456816785, now seen corresponding path program 2 times
[2020-11-25 10:57:26,833 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:57:26,850 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:57:27,275 INFO  L134       CoverageAnalysis]: Checked inductivity of 765 backedges. 32 proven. 112 refuted. 0 times theorem prover too weak. 621 trivial. 0 not checked.
[2020-11-25 10:57:27,275 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:57:27,275 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 10:57:27,275 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:57:27,275 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 10:57:27,275 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=156, Invalid=1326, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 10:57:27,276 INFO  L87              Difference]: Start difference. First operand 2096 states and 2404 transitions. cyclomatic complexity: 333 Second operand 39 states.
[2020-11-25 10:57:31,177 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:57:31,177 INFO  L93              Difference]: Finished difference Result 2168 states and 2528 transitions.
[2020-11-25 10:57:31,177 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 10:57:31,177 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2168 states and 2528 transitions.
[2020-11-25 10:57:31,182 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:31,188 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2168 states to 2168 states and 2528 transitions.
[2020-11-25 10:57:31,188 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 675
[2020-11-25 10:57:31,188 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 675
[2020-11-25 10:57:31,188 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2168 states and 2528 transitions.
[2020-11-25 10:57:31,190 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:57:31,190 INFO  L728         BuchiCegarLoop]: Abstraction has 2168 states and 2528 transitions.
[2020-11-25 10:57:31,191 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2168 states and 2528 transitions.
[2020-11-25 10:57:31,199 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2168 to 2094.
[2020-11-25 10:57:31,199 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2094 states.
[2020-11-25 10:57:31,201 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2094 states to 2094 states and 2396 transitions.
[2020-11-25 10:57:31,201 INFO  L751         BuchiCegarLoop]: Abstraction has 2094 states and 2396 transitions.
[2020-11-25 10:57:31,201 INFO  L631         BuchiCegarLoop]: Abstraction has 2094 states and 2396 transitions.
[2020-11-25 10:57:31,201 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-11-25 10:57:31,201 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2094 states and 2396 transitions.
[2020-11-25 10:57:31,203 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:31,203 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:57:31,203 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:57:31,204 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:57:31,204 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:57:31,207 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:57:31,207 INFO  L82        PathProgramCache]: Analyzing trace with hash 287971839, now seen corresponding path program 2 times
[2020-11-25 10:57:31,207 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:57:31,225 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:57:32,265 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 31 proven. 100 refuted. 0 times theorem prover too weak. 603 trivial. 0 not checked.
[2020-11-25 10:57:32,266 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:57:32,266 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 10:57:32,266 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:57:32,266 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 10:57:32,266 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=149, Invalid=1333, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 10:57:32,267 INFO  L87              Difference]: Start difference. First operand 2094 states and 2396 transitions. cyclomatic complexity: 326 Second operand 39 states.
[2020-11-25 10:57:34,206 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification that was a NOOP. DAG size: 121
[2020-11-25 10:57:38,637 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:57:38,637 INFO  L93              Difference]: Finished difference Result 2179 states and 2562 transitions.
[2020-11-25 10:57:38,637 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 10:57:38,637 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2179 states and 2562 transitions.
[2020-11-25 10:57:38,642 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:38,647 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2179 states to 2179 states and 2562 transitions.
[2020-11-25 10:57:38,647 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:57:38,648 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:57:38,648 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2179 states and 2562 transitions.
[2020-11-25 10:57:38,649 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:57:38,649 INFO  L728         BuchiCegarLoop]: Abstraction has 2179 states and 2562 transitions.
[2020-11-25 10:57:38,650 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2179 states and 2562 transitions.
[2020-11-25 10:57:38,658 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2179 to 2096.
[2020-11-25 10:57:38,658 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2096 states.
[2020-11-25 10:57:38,660 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2096 states to 2096 states and 2404 transitions.
[2020-11-25 10:57:38,660 INFO  L751         BuchiCegarLoop]: Abstraction has 2096 states and 2404 transitions.
[2020-11-25 10:57:38,660 INFO  L631         BuchiCegarLoop]: Abstraction has 2096 states and 2404 transitions.
[2020-11-25 10:57:38,660 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-11-25 10:57:38,660 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2096 states and 2404 transitions.
[2020-11-25 10:57:38,662 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:38,662 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:57:38,662 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:57:38,663 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:57:38,663 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:57:38,666 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:57:38,666 INFO  L82        PathProgramCache]: Analyzing trace with hash 1238633919, now seen corresponding path program 3 times
[2020-11-25 10:57:38,667 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:57:38,684 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:57:39,598 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 51 proven. 80 refuted. 0 times theorem prover too weak. 603 trivial. 0 not checked.
[2020-11-25 10:57:39,598 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:57:39,598 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 10:57:39,598 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:57:39,598 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 10:57:39,599 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=157, Invalid=1325, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 10:57:39,599 INFO  L87              Difference]: Start difference. First operand 2096 states and 2404 transitions. cyclomatic complexity: 333 Second operand 39 states.
[2020-11-25 10:57:47,499 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:57:47,499 INFO  L93              Difference]: Finished difference Result 2195 states and 2623 transitions.
[2020-11-25 10:57:47,499 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 10:57:47,499 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2195 states and 2623 transitions.
[2020-11-25 10:57:47,505 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:47,511 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2195 states to 2195 states and 2623 transitions.
[2020-11-25 10:57:47,511 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:57:47,512 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:57:47,512 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2195 states and 2623 transitions.
[2020-11-25 10:57:47,513 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:57:47,513 INFO  L728         BuchiCegarLoop]: Abstraction has 2195 states and 2623 transitions.
[2020-11-25 10:57:47,515 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2195 states and 2623 transitions.
[2020-11-25 10:57:47,523 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2195 to 2104.
[2020-11-25 10:57:47,523 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2104 states.
[2020-11-25 10:57:47,525 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2104 states to 2104 states and 2435 transitions.
[2020-11-25 10:57:47,525 INFO  L751         BuchiCegarLoop]: Abstraction has 2104 states and 2435 transitions.
[2020-11-25 10:57:47,525 INFO  L631         BuchiCegarLoop]: Abstraction has 2104 states and 2435 transitions.
[2020-11-25 10:57:47,525 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-11-25 10:57:47,525 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2104 states and 2435 transitions.
[2020-11-25 10:57:47,528 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:47,528 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:57:47,528 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:57:47,529 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:57:47,529 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:57:47,532 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:57:47,532 INFO  L82        PathProgramCache]: Analyzing trace with hash 1112931899, now seen corresponding path program 2 times
[2020-11-25 10:57:47,533 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:57:47,549 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:57:48,107 INFO  L134       CoverageAnalysis]: Checked inductivity of 785 backedges. 66 proven. 63 refuted. 0 times theorem prover too weak. 656 trivial. 0 not checked.
[2020-11-25 10:57:48,108 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:57:48,108 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 10:57:48,108 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:57:48,108 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 10:57:48,108 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=127, Invalid=1063, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 10:57:48,108 INFO  L87              Difference]: Start difference. First operand 2104 states and 2435 transitions. cyclomatic complexity: 360 Second operand 35 states.
[2020-11-25 10:57:53,253 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:57:53,253 INFO  L93              Difference]: Finished difference Result 2209 states and 2681 transitions.
[2020-11-25 10:57:53,254 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 10:57:53,254 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2209 states and 2681 transitions.
[2020-11-25 10:57:53,260 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:53,266 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2209 states to 2209 states and 2681 transitions.
[2020-11-25 10:57:53,267 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 10:57:53,267 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 10:57:53,267 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2209 states and 2681 transitions.
[2020-11-25 10:57:53,269 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:57:53,269 INFO  L728         BuchiCegarLoop]: Abstraction has 2209 states and 2681 transitions.
[2020-11-25 10:57:53,270 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2209 states and 2681 transitions.
[2020-11-25 10:57:53,278 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2209 to 2104.
[2020-11-25 10:57:53,278 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2104 states.
[2020-11-25 10:57:53,281 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2104 states to 2104 states and 2435 transitions.
[2020-11-25 10:57:53,281 INFO  L751         BuchiCegarLoop]: Abstraction has 2104 states and 2435 transitions.
[2020-11-25 10:57:53,281 INFO  L631         BuchiCegarLoop]: Abstraction has 2104 states and 2435 transitions.
[2020-11-25 10:57:53,281 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-11-25 10:57:53,281 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2104 states and 2435 transitions.
[2020-11-25 10:57:53,283 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:53,283 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:57:53,283 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:57:53,284 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:57:53,284 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:57:53,287 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:57:53,287 INFO  L82        PathProgramCache]: Analyzing trace with hash 201871099, now seen corresponding path program 3 times
[2020-11-25 10:57:53,288 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:57:53,304 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:57:53,932 INFO  L134       CoverageAnalysis]: Checked inductivity of 785 backedges. 48 proven. 100 refuted. 0 times theorem prover too weak. 637 trivial. 0 not checked.
[2020-11-25 10:57:53,933 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:57:53,933 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 10:57:53,933 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:57:53,933 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 10:57:53,933 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=152, Invalid=1254, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 10:57:53,933 INFO  L87              Difference]: Start difference. First operand 2104 states and 2435 transitions. cyclomatic complexity: 360 Second operand 38 states.
[2020-11-25 10:57:59,635 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:57:59,636 INFO  L93              Difference]: Finished difference Result 2217 states and 2707 transitions.
[2020-11-25 10:57:59,636 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 10:57:59,636 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2217 states and 2707 transitions.
[2020-11-25 10:57:59,642 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:59,649 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2217 states to 2217 states and 2707 transitions.
[2020-11-25 10:57:59,650 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:57:59,650 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:57:59,650 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2217 states and 2707 transitions.
[2020-11-25 10:57:59,652 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:57:59,652 INFO  L728         BuchiCegarLoop]: Abstraction has 2217 states and 2707 transitions.
[2020-11-25 10:57:59,653 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2217 states and 2707 transitions.
[2020-11-25 10:57:59,662 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2217 to 2104.
[2020-11-25 10:57:59,662 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2104 states.
[2020-11-25 10:57:59,665 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2104 states to 2104 states and 2435 transitions.
[2020-11-25 10:57:59,665 INFO  L751         BuchiCegarLoop]: Abstraction has 2104 states and 2435 transitions.
[2020-11-25 10:57:59,665 INFO  L631         BuchiCegarLoop]: Abstraction has 2104 states and 2435 transitions.
[2020-11-25 10:57:59,665 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-11-25 10:57:59,665 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2104 states and 2435 transitions.
[2020-11-25 10:57:59,667 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:57:59,667 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:57:59,667 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:57:59,668 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:57:59,668 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:57:59,671 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:57:59,671 INFO  L82        PathProgramCache]: Analyzing trace with hash 493138303, now seen corresponding path program 4 times
[2020-11-25 10:57:59,672 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:57:59,688 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:58:00,570 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 66 proven. 65 refuted. 0 times theorem prover too weak. 603 trivial. 0 not checked.
[2020-11-25 10:58:00,571 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:58:00,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 10:58:00,571 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:58:00,571 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 10:58:00,571 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=146, Invalid=1260, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 10:58:00,572 INFO  L87              Difference]: Start difference. First operand 2104 states and 2435 transitions. cyclomatic complexity: 360 Second operand 38 states.
[2020-11-25 10:58:07,697 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:58:07,697 INFO  L93              Difference]: Finished difference Result 2199 states and 2638 transitions.
[2020-11-25 10:58:07,698 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 10:58:07,698 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2199 states and 2638 transitions.
[2020-11-25 10:58:07,703 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:58:07,708 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2199 states to 2199 states and 2638 transitions.
[2020-11-25 10:58:07,708 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:58:07,709 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:58:07,709 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2199 states and 2638 transitions.
[2020-11-25 10:58:07,710 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:58:07,710 INFO  L728         BuchiCegarLoop]: Abstraction has 2199 states and 2638 transitions.
[2020-11-25 10:58:07,712 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2199 states and 2638 transitions.
[2020-11-25 10:58:07,719 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2199 to 2106.
[2020-11-25 10:58:07,719 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2106 states.
[2020-11-25 10:58:07,722 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2106 states to 2106 states and 2443 transitions.
[2020-11-25 10:58:07,722 INFO  L751         BuchiCegarLoop]: Abstraction has 2106 states and 2443 transitions.
[2020-11-25 10:58:07,722 INFO  L631         BuchiCegarLoop]: Abstraction has 2106 states and 2443 transitions.
[2020-11-25 10:58:07,722 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-11-25 10:58:07,722 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2106 states and 2443 transitions.
[2020-11-25 10:58:07,724 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:58:07,724 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:58:07,724 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:58:07,725 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:58:07,725 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:58:07,728 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:58:07,728 INFO  L82        PathProgramCache]: Analyzing trace with hash -464198143, now seen corresponding path program 3 times
[2020-11-25 10:58:07,728 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:58:07,745 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:58:09,032 INFO  L134       CoverageAnalysis]: Checked inductivity of 840 backedges. 16 proven. 329 refuted. 0 times theorem prover too weak. 495 trivial. 0 not checked.
[2020-11-25 10:58:09,032 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:58:09,032 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [47] total 47
[2020-11-25 10:58:09,032 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:58:09,032 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 48 interpolants.
[2020-11-25 10:58:09,033 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=212, Invalid=2044, Unknown=0, NotChecked=0, Total=2256
[2020-11-25 10:58:09,033 INFO  L87              Difference]: Start difference. First operand 2106 states and 2443 transitions. cyclomatic complexity: 367 Second operand 48 states.
[2020-11-25 10:58:18,368 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:58:18,369 INFO  L93              Difference]: Finished difference Result 2181 states and 2578 transitions.
[2020-11-25 10:58:18,369 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 10:58:18,369 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2181 states and 2578 transitions.
[2020-11-25 10:58:18,374 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:58:18,379 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2181 states to 2181 states and 2578 transitions.
[2020-11-25 10:58:18,379 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 10:58:18,379 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 10:58:18,379 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2181 states and 2578 transitions.
[2020-11-25 10:58:18,381 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:58:18,381 INFO  L728         BuchiCegarLoop]: Abstraction has 2181 states and 2578 transitions.
[2020-11-25 10:58:18,382 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2181 states and 2578 transitions.
[2020-11-25 10:58:18,389 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2181 to 2110.
[2020-11-25 10:58:18,390 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2110 states.
[2020-11-25 10:58:18,392 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2110 states to 2110 states and 2459 transitions.
[2020-11-25 10:58:18,392 INFO  L751         BuchiCegarLoop]: Abstraction has 2110 states and 2459 transitions.
[2020-11-25 10:58:18,392 INFO  L631         BuchiCegarLoop]: Abstraction has 2110 states and 2459 transitions.
[2020-11-25 10:58:18,392 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-11-25 10:58:18,392 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2110 states and 2459 transitions.
[2020-11-25 10:58:18,394 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:58:18,394 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:58:18,394 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:58:18,395 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:58:18,395 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:58:18,399 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:58:18,399 INFO  L82        PathProgramCache]: Analyzing trace with hash -1042784373, now seen corresponding path program 5 times
[2020-11-25 10:58:18,399 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:58:18,415 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:58:19,555 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 2 proven. 298 refuted. 0 times theorem prover too weak. 434 trivial. 0 not checked.
[2020-11-25 10:58:19,556 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:58:19,556 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 10:58:19,556 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:58:19,556 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 10:58:19,557 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=191, Invalid=1971, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 10:58:19,557 INFO  L87              Difference]: Start difference. First operand 2110 states and 2459 transitions. cyclomatic complexity: 381 Second operand 47 states.
[2020-11-25 10:58:29,787 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:58:29,787 INFO  L93              Difference]: Finished difference Result 2220 states and 2703 transitions.
[2020-11-25 10:58:29,787 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-25 10:58:29,787 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2220 states and 2703 transitions.
[2020-11-25 10:58:29,793 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:58:29,799 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2220 states to 2220 states and 2703 transitions.
[2020-11-25 10:58:29,799 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:58:29,799 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:58:29,799 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2220 states and 2703 transitions.
[2020-11-25 10:58:29,801 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:58:29,801 INFO  L728         BuchiCegarLoop]: Abstraction has 2220 states and 2703 transitions.
[2020-11-25 10:58:29,802 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2220 states and 2703 transitions.
[2020-11-25 10:58:29,810 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2220 to 2112.
[2020-11-25 10:58:29,810 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2112 states.
[2020-11-25 10:58:29,813 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2112 states to 2112 states and 2466 transitions.
[2020-11-25 10:58:29,813 INFO  L751         BuchiCegarLoop]: Abstraction has 2112 states and 2466 transitions.
[2020-11-25 10:58:29,813 INFO  L631         BuchiCegarLoop]: Abstraction has 2112 states and 2466 transitions.
[2020-11-25 10:58:29,813 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-11-25 10:58:29,813 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2112 states and 2466 transitions.
[2020-11-25 10:58:29,815 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:58:29,815 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:58:29,815 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:58:29,816 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:58:29,816 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:58:29,819 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:58:29,819 INFO  L82        PathProgramCache]: Analyzing trace with hash 180955345, now seen corresponding path program 6 times
[2020-11-25 10:58:29,819 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:58:29,836 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:58:30,930 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 4 proven. 296 refuted. 0 times theorem prover too weak. 434 trivial. 0 not checked.
[2020-11-25 10:58:30,930 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:58:30,931 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [46] total 46
[2020-11-25 10:58:30,931 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:58:30,931 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 47 interpolants.
[2020-11-25 10:58:30,931 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=190, Invalid=1972, Unknown=0, NotChecked=0, Total=2162
[2020-11-25 10:58:30,931 INFO  L87              Difference]: Start difference. First operand 2112 states and 2466 transitions. cyclomatic complexity: 387 Second operand 47 states.
[2020-11-25 10:58:39,611 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:58:39,611 INFO  L93              Difference]: Finished difference Result 2224 states and 2719 transitions.
[2020-11-25 10:58:39,611 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-25 10:58:39,611 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2224 states and 2719 transitions.
[2020-11-25 10:58:39,616 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:58:39,623 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2224 states to 2224 states and 2719 transitions.
[2020-11-25 10:58:39,623 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 10:58:39,623 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 10:58:39,623 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2224 states and 2719 transitions.
[2020-11-25 10:58:39,625 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:58:39,625 INFO  L728         BuchiCegarLoop]: Abstraction has 2224 states and 2719 transitions.
[2020-11-25 10:58:39,626 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2224 states and 2719 transitions.
[2020-11-25 10:58:39,634 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2224 to 2112.
[2020-11-25 10:58:39,634 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2112 states.
[2020-11-25 10:58:39,637 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2112 states to 2112 states and 2466 transitions.
[2020-11-25 10:58:39,637 INFO  L751         BuchiCegarLoop]: Abstraction has 2112 states and 2466 transitions.
[2020-11-25 10:58:39,637 INFO  L631         BuchiCegarLoop]: Abstraction has 2112 states and 2466 transitions.
[2020-11-25 10:58:39,637 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-11-25 10:58:39,637 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2112 states and 2466 transitions.
[2020-11-25 10:58:39,639 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:58:39,639 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:58:39,639 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:58:39,640 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:58:39,640 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:58:39,643 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:58:39,644 INFO  L82        PathProgramCache]: Analyzing trace with hash -1555706558, now seen corresponding path program 1 times
[2020-11-25 10:58:39,644 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:58:39,663 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:58:43,585 INFO  L134       CoverageAnalysis]: Checked inductivity of 1202 backedges. 48 proven. 174 refuted. 0 times theorem prover too weak. 980 trivial. 0 not checked.
[2020-11-25 10:58:43,586 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:58:43,586 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 10:58:43,586 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:58:43,586 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 10:58:43,586 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=200, Invalid=1692, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 10:58:43,587 INFO  L87              Difference]: Start difference. First operand 2112 states and 2466 transitions. cyclomatic complexity: 387 Second operand 44 states.
[2020-11-25 10:58:46,238 WARN  L188               SmtUtils]: Spent 181.00 ms on a formula simplification that was a NOOP. DAG size: 137
[2020-11-25 10:58:48,629 WARN  L188               SmtUtils]: Spent 291.00 ms on a formula simplification that was a NOOP. DAG size: 142
[2020-11-25 10:58:53,392 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:58:53,392 INFO  L93              Difference]: Finished difference Result 2255 states and 2853 transitions.
[2020-11-25 10:58:53,392 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 10:58:53,393 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2255 states and 2853 transitions.
[2020-11-25 10:58:53,398 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:58:53,405 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2255 states to 2255 states and 2853 transitions.
[2020-11-25 10:58:53,405 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:58:53,406 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:58:53,406 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2255 states and 2853 transitions.
[2020-11-25 10:58:53,408 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:58:53,408 INFO  L728         BuchiCegarLoop]: Abstraction has 2255 states and 2853 transitions.
[2020-11-25 10:58:53,409 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2255 states and 2853 transitions.
[2020-11-25 10:58:53,418 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2255 to 2118.
[2020-11-25 10:58:53,418 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2118 states.
[2020-11-25 10:58:53,421 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2118 states to 2118 states and 2487 transitions.
[2020-11-25 10:58:53,421 INFO  L751         BuchiCegarLoop]: Abstraction has 2118 states and 2487 transitions.
[2020-11-25 10:58:53,421 INFO  L631         BuchiCegarLoop]: Abstraction has 2118 states and 2487 transitions.
[2020-11-25 10:58:53,421 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-11-25 10:58:53,421 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2118 states and 2487 transitions.
[2020-11-25 10:58:53,423 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:58:53,423 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:58:53,423 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:58:53,424 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:58:53,424 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:58:53,427 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:58:53,428 INFO  L82        PathProgramCache]: Analyzing trace with hash -1815379962, now seen corresponding path program 7 times
[2020-11-25 10:58:53,428 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:58:53,448 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:59:19,270 INFO  L134       CoverageAnalysis]: Checked inductivity of 1172 backedges. 50 proven. 169 refuted. 0 times theorem prover too weak. 953 trivial. 0 not checked.
[2020-11-25 10:59:19,270 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:59:19,270 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-25 10:59:19,271 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:59:19,271 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-11-25 10:59:19,271 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=186, Invalid=1620, Unknown=0, NotChecked=0, Total=1806
[2020-11-25 10:59:19,271 INFO  L87              Difference]: Start difference. First operand 2118 states and 2487 transitions. cyclomatic complexity: 405 Second operand 43 states.
[2020-11-25 10:59:22,903 WARN  L188               SmtUtils]: Spent 293.00 ms on a formula simplification that was a NOOP. DAG size: 154
[2020-11-25 10:59:24,009 WARN  L188               SmtUtils]: Spent 199.00 ms on a formula simplification that was a NOOP. DAG size: 133
[2020-11-25 10:59:24,750 WARN  L188               SmtUtils]: Spent 340.00 ms on a formula simplification that was a NOOP. DAG size: 156
[2020-11-25 10:59:25,893 WARN  L188               SmtUtils]: Spent 325.00 ms on a formula simplification that was a NOOP. DAG size: 158
[2020-11-25 10:59:41,441 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:59:41,441 INFO  L93              Difference]: Finished difference Result 2239 states and 2790 transitions.
[2020-11-25 10:59:41,441 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 10:59:41,441 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2239 states and 2790 transitions.
[2020-11-25 10:59:41,446 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:59:41,453 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2239 states to 2239 states and 2790 transitions.
[2020-11-25 10:59:41,453 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 10:59:41,453 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 10:59:41,453 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2239 states and 2790 transitions.
[2020-11-25 10:59:41,455 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:59:41,456 INFO  L728         BuchiCegarLoop]: Abstraction has 2239 states and 2790 transitions.
[2020-11-25 10:59:41,457 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2239 states and 2790 transitions.
[2020-11-25 10:59:41,465 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2239 to 2128.
[2020-11-25 10:59:41,465 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2128 states.
[2020-11-25 10:59:41,468 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2128 states to 2128 states and 2526 transitions.
[2020-11-25 10:59:41,469 INFO  L751         BuchiCegarLoop]: Abstraction has 2128 states and 2526 transitions.
[2020-11-25 10:59:41,469 INFO  L631         BuchiCegarLoop]: Abstraction has 2128 states and 2526 transitions.
[2020-11-25 10:59:41,469 INFO  L445         BuchiCegarLoop]: ======== Iteration 52============
[2020-11-25 10:59:41,469 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2128 states and 2526 transitions.
[2020-11-25 10:59:41,471 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:59:41,471 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:59:41,471 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:59:41,472 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:59:41,472 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:59:41,475 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:59:41,475 INFO  L82        PathProgramCache]: Analyzing trace with hash -1542147134, now seen corresponding path program 2 times
[2020-11-25 10:59:41,476 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:59:41,495 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 10:59:45,265 INFO  L134       CoverageAnalysis]: Checked inductivity of 1202 backedges. 51 proven. 152 refuted. 0 times theorem prover too weak. 999 trivial. 0 not checked.
[2020-11-25 10:59:45,266 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 10:59:45,266 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 10:59:45,266 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 10:59:45,266 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 10:59:45,266 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=157, Invalid=1483, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 10:59:45,266 INFO  L87              Difference]: Start difference. First operand 2128 states and 2526 transitions. cyclomatic complexity: 439 Second operand 41 states.
[2020-11-25 10:59:53,431 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 10:59:53,431 INFO  L93              Difference]: Finished difference Result 2305 states and 3047 transitions.
[2020-11-25 10:59:53,431 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 10:59:53,431 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2305 states and 3047 transitions.
[2020-11-25 10:59:53,438 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:59:53,446 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2305 states to 2305 states and 3047 transitions.
[2020-11-25 10:59:53,446 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 10:59:53,446 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 10:59:53,446 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2305 states and 3047 transitions.
[2020-11-25 10:59:53,449 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 10:59:53,449 INFO  L728         BuchiCegarLoop]: Abstraction has 2305 states and 3047 transitions.
[2020-11-25 10:59:53,450 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2305 states and 3047 transitions.
[2020-11-25 10:59:53,460 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2305 to 2122.
[2020-11-25 10:59:53,460 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2122 states.
[2020-11-25 10:59:53,463 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2122 states to 2122 states and 2503 transitions.
[2020-11-25 10:59:53,463 INFO  L751         BuchiCegarLoop]: Abstraction has 2122 states and 2503 transitions.
[2020-11-25 10:59:53,463 INFO  L631         BuchiCegarLoop]: Abstraction has 2122 states and 2503 transitions.
[2020-11-25 10:59:53,463 INFO  L445         BuchiCegarLoop]: ======== Iteration 53============
[2020-11-25 10:59:53,463 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2122 states and 2503 transitions.
[2020-11-25 10:59:53,465 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 10:59:53,465 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 10:59:53,465 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 10:59:53,466 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 10:59:53,466 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 10:59:53,469 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 10:59:53,470 INFO  L82        PathProgramCache]: Analyzing trace with hash -764525882, now seen corresponding path program 8 times
[2020-11-25 10:59:53,470 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 10:59:53,490 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:00:16,414 INFO  L134       CoverageAnalysis]: Checked inductivity of 1172 backedges. 68 proven. 151 refuted. 0 times theorem prover too weak. 953 trivial. 0 not checked.
[2020-11-25 11:00:16,414 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:00:16,414 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-25 11:00:16,414 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:00:16,415 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-11-25 11:00:16,415 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=186, Invalid=1620, Unknown=0, NotChecked=0, Total=1806
[2020-11-25 11:00:16,415 INFO  L87              Difference]: Start difference. First operand 2122 states and 2503 transitions. cyclomatic complexity: 419 Second operand 43 states.
[2020-11-25 11:00:19,039 WARN  L188               SmtUtils]: Spent 170.00 ms on a formula simplification that was a NOOP. DAG size: 138
[2020-11-25 11:00:20,130 WARN  L188               SmtUtils]: Spent 188.00 ms on a formula simplification that was a NOOP. DAG size: 140
[2020-11-25 11:00:20,824 WARN  L188               SmtUtils]: Spent 185.00 ms on a formula simplification that was a NOOP. DAG size: 142
[2020-11-25 11:00:47,280 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:00:47,281 INFO  L93              Difference]: Finished difference Result 2229 states and 2752 transitions.
[2020-11-25 11:00:47,281 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 11:00:47,281 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2229 states and 2752 transitions.
[2020-11-25 11:00:47,286 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:00:47,292 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2229 states to 2229 states and 2752 transitions.
[2020-11-25 11:00:47,292 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 11:00:47,293 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 11:00:47,293 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2229 states and 2752 transitions.
[2020-11-25 11:00:47,295 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:00:47,295 INFO  L728         BuchiCegarLoop]: Abstraction has 2229 states and 2752 transitions.
[2020-11-25 11:00:47,296 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2229 states and 2752 transitions.
[2020-11-25 11:00:47,305 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2229 to 2134.
[2020-11-25 11:00:47,305 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2134 states.
[2020-11-25 11:00:47,308 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2134 states to 2134 states and 2549 transitions.
[2020-11-25 11:00:47,308 INFO  L751         BuchiCegarLoop]: Abstraction has 2134 states and 2549 transitions.
[2020-11-25 11:00:47,308 INFO  L631         BuchiCegarLoop]: Abstraction has 2134 states and 2549 transitions.
[2020-11-25 11:00:47,308 INFO  L445         BuchiCegarLoop]: ======== Iteration 54============
[2020-11-25 11:00:47,308 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2134 states and 2549 transitions.
[2020-11-25 11:00:47,310 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:00:47,310 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:00:47,310 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:00:47,311 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:00:47,311 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:00:47,314 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:00:47,314 INFO  L82        PathProgramCache]: Analyzing trace with hash -1715187962, now seen corresponding path program 9 times
[2020-11-25 11:00:47,314 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:00:47,333 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:01:12,218 INFO  L134       CoverageAnalysis]: Checked inductivity of 1172 backedges. 48 proven. 171 refuted. 0 times theorem prover too weak. 953 trivial. 0 not checked.
[2020-11-25 11:01:12,218 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:01:12,218 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-25 11:01:12,219 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:01:12,219 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-11-25 11:01:12,219 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=186, Invalid=1620, Unknown=0, NotChecked=0, Total=1806
[2020-11-25 11:01:12,219 INFO  L87              Difference]: Start difference. First operand 2134 states and 2549 transitions. cyclomatic complexity: 459 Second operand 43 states.
[2020-11-25 11:01:14,820 WARN  L188               SmtUtils]: Spent 262.00 ms on a formula simplification that was a NOOP. DAG size: 154
[2020-11-25 11:01:15,537 WARN  L188               SmtUtils]: Spent 116.00 ms on a formula simplification that was a NOOP. DAG size: 133
[2020-11-25 11:01:16,159 WARN  L188               SmtUtils]: Spent 306.00 ms on a formula simplification that was a NOOP. DAG size: 156
[2020-11-25 11:01:17,031 WARN  L188               SmtUtils]: Spent 314.00 ms on a formula simplification that was a NOOP. DAG size: 158
[2020-11-25 11:01:21,691 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:01:21,691 INFO  L93              Difference]: Finished difference Result 2243 states and 2806 transitions.
[2020-11-25 11:01:21,692 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 11:01:21,692 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2243 states and 2806 transitions.
[2020-11-25 11:01:21,697 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:01:21,703 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2243 states to 2243 states and 2806 transitions.
[2020-11-25 11:01:21,703 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 11:01:21,703 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 11:01:21,704 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2243 states and 2806 transitions.
[2020-11-25 11:01:21,706 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:01:21,706 INFO  L728         BuchiCegarLoop]: Abstraction has 2243 states and 2806 transitions.
[2020-11-25 11:01:21,707 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2243 states and 2806 transitions.
[2020-11-25 11:01:21,715 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2243 to 2140.
[2020-11-25 11:01:21,715 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2140 states.
[2020-11-25 11:01:21,718 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2140 states to 2140 states and 2572 transitions.
[2020-11-25 11:01:21,718 INFO  L751         BuchiCegarLoop]: Abstraction has 2140 states and 2572 transitions.
[2020-11-25 11:01:21,718 INFO  L631         BuchiCegarLoop]: Abstraction has 2140 states and 2572 transitions.
[2020-11-25 11:01:21,718 INFO  L445         BuchiCegarLoop]: ======== Iteration 55============
[2020-11-25 11:01:21,718 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2140 states and 2572 transitions.
[2020-11-25 11:01:21,720 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:01:21,720 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:01:21,720 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:01:21,721 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:01:21,721 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ZJYB0 := false;
[L2]                 call_transfer_ZJYB0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == ZJYB;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_ZJYB[this] := 1113454875;
[L1845]              symbol_ZJYB[this] := 773017640;
[L1846]              decimals_ZJYB[this] := 18;
[L1847]              _balances_ZJYB[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_ZJYB[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_ZJYB[this] := 1000000000000 * (nonlinearPow(10, decimals_ZJYB[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1855]              _balances_ZJYB[this][msgsender_MSG] := totalSupply_ZJYB[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L1888]  RET         call ZJYB_ZJYB_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call ZJYB_ZJYB__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call ZJYB_ZJYB(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_ZJYB[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_ZJYB[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_ZJYB" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_ZJYB[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == ZJYB
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L1988]              _balances_ZJYB[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == ZJYB
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s342];
[L1999]              _balances_ZJYB[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_ZJYB[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_ZJYB[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_ZJYB[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_ZJYB[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == ZJYB
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == ZJYB
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_to_s499];
[L2172]              _balances_ZJYB[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_to_s499];
[L2174]  COND TRUE   DType[this] == ZJYB
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][_from_s499];
[L2183]              _balances_ZJYB[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][_from_s499];
[L2185]  COND TRUE   DType[this] == ZJYB
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_ZJYB[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_ZJYB[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_ZJYB[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_ZJYB" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_ZJYB(this);
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_ZJYB[this][msgsender_MSG] || _balances_ZJYB[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][_to_s342] >= 0) && _balances_ZJYB[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ZJYB[this][msgsender_MSG] >= 0) && _balances_ZJYB[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ZJYB0 := true;
[L2]                 call_transfer_ZJYB0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_ZJYB[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_ZJYB[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == ZJYB
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_ZJYB[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_ZJYB[this][msgsender_MSG];
[L2064]              _balances_ZJYB[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_ZJYB[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == ZJYB
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L1637]  COND TRUE   DType[this] == ZJYB
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_ZJYB[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_ZJYB[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_ZJYB" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_ZJYB__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_ZJYB(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_ZJYB(this);

Loop:
[L3225]  CALL        call CorralChoice_ZJYB(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != ZJYB;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_ZJYB(this);

[2020-11-25 11:01:21,724 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:01:21,724 INFO  L82        PathProgramCache]: Analyzing trace with hash -491293054, now seen corresponding path program 3 times
[2020-11-25 11:01:21,724 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:01:21,743 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:01:22,308 INFO  L134       CoverageAnalysis]: Checked inductivity of 1202 backedges. 70 proven. 134 refuted. 0 times theorem prover too weak. 998 trivial. 0 not checked.
[2020-11-25 11:01:22,308 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:01:22,308 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 11:01:22,308 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:01:22,308 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 11:01:22,309 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=179, Invalid=1461, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 11:01:22,309 INFO  L87              Difference]: Start difference. First operand 2140 states and 2572 transitions. cyclomatic complexity: 479 Second operand 41 states.
[2020-11-25 11:01:23,736 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:01:23,737 INFO  L93              Difference]: Finished difference Result 1400 states and 1785 transitions.
[2020-11-25 11:01:23,737 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 11:01:23,737 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1400 states and 1785 transitions.
[2020-11-25 11:01:23,740 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:01:23,741 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1400 states to 0 states and 0 transitions.
[2020-11-25 11:01:23,741 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 11:01:23,741 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 11:01:23,741 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 11:01:23,741 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:01:23,741 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:01:23,741 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:01:23,741 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:01:23,741 INFO  L445         BuchiCegarLoop]: ======== Iteration 56============
[2020-11-25 11:01:23,741 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 11:01:23,741 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:01:23,741 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 11:01:23,744 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:01:23 BasicIcfg
[2020-11-25 11:01:23,744 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:01:23,744 INFO  L168              Benchmark]: Toolchain (without parser) took 374850.27 ms. Allocated memory was 1.0 GB in the beginning and 6.2 GB in the end (delta: 5.2 GB). Free memory was 940.6 MB in the beginning and 3.9 GB in the end (delta: -3.0 GB). Peak memory consumption was 2.2 GB. Max. memory is 15.3 GB.
[2020-11-25 11:01:23,745 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.21 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:01:23,745 INFO  L168              Benchmark]: Boogie Preprocessor took 86.77 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:01:23,746 INFO  L168              Benchmark]: UtopiaSpecLang took 59.82 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:01:23,746 INFO  L168              Benchmark]: Boogie Printer took 13.19 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:01:23,746 INFO  L168              Benchmark]: RCFGBuilder took 625.22 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 838.6 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:01:23,746 INFO  L168              Benchmark]: UtopiaLTL2Aut took 41.00 ms. Allocated memory is still 1.0 GB. Free memory was 838.6 MB in the beginning and 829.6 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:01:23,746 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1058.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 68.7 MB). Free memory was 829.6 MB in the beginning and 741.6 MB in the end (delta: 88.1 MB). Peak memory consumption was 156.7 MB. Max. memory is 15.3 GB.
[2020-11-25 11:01:23,747 INFO  L168              Benchmark]: BlockEncodingV2 took 111.84 ms. Allocated memory is still 1.1 GB. Free memory was 741.6 MB in the beginning and 697.6 MB in the end (delta: 43.9 MB). Peak memory consumption was 43.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:01:23,747 INFO  L168              Benchmark]: BuchiAutomizer took 372851.12 ms. Allocated memory was 1.1 GB in the beginning and 6.2 GB in the end (delta: 5.1 GB). Free memory was 697.6 MB in the beginning and 3.9 GB in the end (delta: -3.2 GB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
[2020-11-25 11:01:23,749 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2982 locations, 5228 edges
  - StatisticsResult: Encoded RCFG
    2870 locations, 4949 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.21 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 86.77 ms. Allocated memory is still 1.0 GB. Free memory was 940.6 MB in the beginning and 929.8 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 59.82 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 13.19 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 625.22 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 838.6 MB in the end (delta: 85.9 MB). Peak memory consumption was 85.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 41.00 ms. Allocated memory is still 1.0 GB. Free memory was 838.6 MB in the beginning and 829.6 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1058.24 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 68.7 MB). Free memory was 829.6 MB in the beginning and 741.6 MB in the end (delta: 88.1 MB). Peak memory consumption was 156.7 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 111.84 ms. Allocated memory is still 1.1 GB. Free memory was 741.6 MB in the beginning and 697.6 MB in the end (delta: 43.9 MB). Peak memory consumption was 43.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 372851.12 ms. Allocated memory was 1.1 GB in the beginning and 6.2 GB in the end (delta: 5.1 GB). Free memory was 697.6 MB in the beginning and 3.9 GB in the end (delta: -3.2 GB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1238 locations, 1609 edges
  - StatisticsResult: BuchiProgram size
    2982 locations, 5228 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 55 terminating modules (55 trivial, 0 deterministic, 0 nondeterministic). 55 modules have a trivial ranking function, the largest among these consists of 48 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 372.7s and 56 iterations.  TraceHistogramMax:9. Analysis of lassos took 110.4s. Construction of modules took 221.1s. BÃ¼chi inclusion checks took 39.2s. Highest rank in rank-based complementation 0. Minimization of det autom 55. Minimization of nondet autom 0. Automata minimization 0.7s AutomataMinimizationTime, 54 MinimizatonAttempts, 4657 StatesRemovedByMinimization, 50 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 2200 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 105555 SDtfs, 180487 SDslu, 699812 SDs, 0 SdLazy, 1742034 SolverSat, 25379 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 221.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU55 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ZJY(fail_transfer_ZJYB0)0) ==> ( <>(fail_transfer_ZJYB0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
