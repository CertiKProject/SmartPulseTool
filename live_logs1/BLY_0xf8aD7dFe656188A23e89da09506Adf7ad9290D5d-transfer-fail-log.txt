This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 00:58:20,140 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 00:58:20,141 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 00:58:20,153 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 00:58:20,154 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 00:58:20,154 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 00:58:20,155 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 00:58:20,157 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 00:58:20,158 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 00:58:20,159 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 00:58:20,160 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 00:58:20,160 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 00:58:20,161 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 00:58:20,162 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 00:58:20,163 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 00:58:20,163 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 00:58:20,164 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 00:58:20,165 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 00:58:20,167 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 00:58:20,168 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 00:58:20,169 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 00:58:20,170 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 00:58:20,171 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 00:58:20,172 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 00:58:20,172 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 00:58:20,172 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 00:58:20,173 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 00:58:20,173 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 00:58:20,174 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 00:58:20,174 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 00:58:20,174 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 00:58:20,175 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 00:58:20,175 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 00:58:20,176 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 00:58:20,177 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 00:58:20,177 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 00:58:20,177 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 00:58:20,177 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 00:58:20,177 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 00:58:20,178 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 00:58:20,179 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 00:58:20,179 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 00:58:20,187 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 00:58:20,187 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 00:58:20,188 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 00:58:20,188 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 00:58:20,188 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 00:58:20,188 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 00:58:20,188 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 00:58:20,189 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 00:58:20,189 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 00:58:20,189 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 00:58:20,189 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 00:58:20,189 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 00:58:20,189 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 00:58:20,189 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 00:58:20,189 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 00:58:20,190 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 00:58:20,190 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 00:58:20,190 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 00:58:20,190 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 00:58:20,190 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 00:58:20,190 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 00:58:20,190 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 00:58:20,190 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 00:58:20,191 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 00:58:20,191 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 00:58:20,191 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 00:58:20,213 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 00:58:20,227 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 00:58:20,230 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 00:58:20,231 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 00:58:20,231 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 00:58:20,232 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl
[2020-11-25 00:58:20,232 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl'
[2020-11-25 00:58:20,378 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 00:58:20,379 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 00:58:20,380 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 00:58:20,380 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 00:58:20,380 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 00:58:20,397 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/1) ...
[2020-11-25 00:58:20,399 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/1) ...
[2020-11-25 00:58:20,446 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/1) ...
[2020-11-25 00:58:20,447 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/1) ...
[2020-11-25 00:58:20,484 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/1) ...
[2020-11-25 00:58:20,507 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/1) ...
[2020-11-25 00:58:20,525 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/1) ...
[2020-11-25 00:58:20,547 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 00:58:20,548 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 00:58:20,549 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 00:58:20,554 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 00:58:20,561 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/1) ...
[2020-11-25 00:58:20,589 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BLY.transfer(to, value), msg.sender != to && (value > _balances_HxERC20[this][msg.sender] || _balances_HxERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transfer)))
[2020-11-25 00:58:20,595 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BLY.transfer(to, value), msg.sender != to && (value > _balances_HxERC20[this][msg.sender] || _balances_HxERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transfer)))
[2020-11-25 00:58:20,603 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BLY.transfer(to, value), msg.sender != to && (value > _balances_HxERC20[this][msg.sender] || _balances_HxERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transfer)))
[2020-11-25 00:58:20,613 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=to_s1288 && ( value_s1288>_balances_HxERC20[this][msg.sender] || ( _balances_HxERC20[this][to_s1288] + value_s1288 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && value_s1288>=0 ) && value_s1288<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][to_s1288]>=0 ) && _balances_HxERC20[this][to_s1288]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_HxERC20[this][msg.sender]>=0 ) && _balances_HxERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[to_s1288,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_HxERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_BLY>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 00:58:20,620 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BLY.transfer(to, value), msg.sender != to && (value > _balances_HxERC20[this][msg.sender] || _balances_HxERC20[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][to] >= 0 && _balances_HxERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_HxERC20[this][msg.sender] >= 0 &&  _balances_HxERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(BLY.transfer)))
[2020-11-25 00:58:20,620 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_BLY0) ==> ( <>AP(fail_transfer_BLY0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 00:58:20,643 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:58:20 PropertyContainer
[2020-11-25 00:58:20,643 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 00:58:20,644 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 00:58:20,644 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 00:58:20,644 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 00:58:20,645 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/2) ...
[2020-11-25 00:58:20,645 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 00:58:20,645 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 00:58:20,674 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:58:20" (2/2) ...
[2020-11-25 00:58:20,674 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 00:58:20,674 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 00:58:20,675 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 00:58:20,675 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 00:58:20,675 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/2) ...
[2020-11-25 00:58:20,731 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 00:58:20,732 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 00:58:20,732 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__success
[2020-11-25 00:58:20,732 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 00:58:20,732 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath
[2020-11-25 00:58:20,732 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath
[2020-11-25 00:58:20,732 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 00:58:20,732 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 00:58:20,732 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 00:58:20,733 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 00:58:20,733 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 00:58:20,733 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 00:58:20,733 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 00:58:20,733 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 00:58:20,733 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 00:58:20,733 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 00:58:20,733 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 00:58:20,733 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 00:58:20,734 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable
[2020-11-25 00:58:20,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable
[2020-11-25 00:58:20,734 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable
[2020-11-25 00:58:20,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable
[2020-11-25 00:58:20,734 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable
[2020-11-25 00:58:20,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable
[2020-11-25 00:58:20,734 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable
[2020-11-25 00:58:20,734 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable
[2020-11-25 00:58:20,735 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable
[2020-11-25 00:58:20,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable
[2020-11-25 00:58:20,735 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable
[2020-11-25 00:58:20,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable
[2020-11-25 00:58:20,735 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 00:58:20,735 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 00:58:20,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 00:58:20,735 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 00:58:20,735 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 00:58:20,735 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 00:58:20,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 00:58:20,736 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole
[2020-11-25 00:58:20,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole
[2020-11-25 00:58:20,736 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 00:58:20,736 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 00:58:20,736 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 00:58:20,736 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 00:58:20,736 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 00:58:20,736 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 00:58:20,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 00:58:20,737 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 00:58:20,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 00:58:20,737 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 00:58:20,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 00:58:20,737 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 00:58:20,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 00:58:20,737 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 00:58:20,737 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 00:58:20,737 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 00:58:20,737 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 00:58:20,738 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 00:58:20,738 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 00:58:20,738 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 00:58:20,738 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 00:58:20,738 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 00:58:20,738 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 00:58:20,738 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20
[2020-11-25 00:58:20,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20
[2020-11-25 00:58:20,738 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20
[2020-11-25 00:58:20,738 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20
[2020-11-25 00:58:20,738 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20
[2020-11-25 00:58:20,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20
[2020-11-25 00:58:20,739 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20
[2020-11-25 00:58:20,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20
[2020-11-25 00:58:20,739 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20
[2020-11-25 00:58:20,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20
[2020-11-25 00:58:20,739 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20
[2020-11-25 00:58:20,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20
[2020-11-25 00:58:20,739 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 00:58:20,739 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20
[2020-11-25 00:58:20,739 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 00:58:20,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20
[2020-11-25 00:58:20,740 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 00:58:20,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20
[2020-11-25 00:58:20,740 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 00:58:20,740 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 00:58:20,740 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 00:58:20,740 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 00:58:20,740 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 00:58:20,740 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 00:58:20,740 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 00:58:20,741 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 00:58:20,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 00:58:20,741 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 00:58:20,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 00:58:20,741 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 00:58:20,741 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 00:58:20,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 00:58:20,741 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 00:58:20,741 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 00:58:20,741 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 00:58:20,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 00:58:20,742 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 00:58:20,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 00:58:20,742 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 00:58:20,742 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY
[2020-11-25 00:58:20,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY
[2020-11-25 00:58:20,742 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY
[2020-11-25 00:58:20,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY
[2020-11-25 00:58:20,742 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY
[2020-11-25 00:58:20,742 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY
[2020-11-25 00:58:20,742 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 00:58:20,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY
[2020-11-25 00:58:20,743 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY
[2020-11-25 00:58:20,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY
[2020-11-25 00:58:20,743 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY
[2020-11-25 00:58:20,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY
[2020-11-25 00:58:20,743 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY
[2020-11-25 00:58:20,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY
[2020-11-25 00:58:20,743 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 00:58:20,743 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY
[2020-11-25 00:58:20,743 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY
[2020-11-25 00:58:20,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY
[2020-11-25 00:58:20,744 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY
[2020-11-25 00:58:20,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY
[2020-11-25 00:58:20,744 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 00:58:20,744 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__success
[2020-11-25 00:58:20,744 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__success
[2020-11-25 00:58:20,744 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__success
[2020-11-25 00:58:20,744 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__success
[2020-11-25 00:58:20,744 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY
[2020-11-25 00:58:20,744 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY
[2020-11-25 00:58:20,745 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY
[2020-11-25 00:58:20,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY
[2020-11-25 00:58:20,745 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY
[2020-11-25 00:58:20,745 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY
[2020-11-25 00:58:20,745 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 00:58:20,745 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 00:58:20,745 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 00:58:20,745 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 00:58:20,745 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__success
[2020-11-25 00:58:20,745 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 00:58:20,746 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 00:58:20,746 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 00:58:20,746 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__success
[2020-11-25 00:58:20,746 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxSafeMath
[2020-11-25 00:58:20,746 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxSafeMath
[2020-11-25 00:58:20,746 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 00:58:20,746 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 00:58:20,746 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxOwnable
[2020-11-25 00:58:20,746 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxOwnable
[2020-11-25 00:58:20,747 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 00:58:20,747 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 00:58:20,747 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 00:58:20,747 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 00:58:20,747 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 00:58:20,747 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 00:58:20,747 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_HxERC20
[2020-11-25 00:58:20,747 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_HxERC20
[2020-11-25 00:58:20,747 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 00:58:20,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 00:58:20,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 00:58:20,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 00:58:20,748 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BLY
[2020-11-25 00:58:20,748 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 00:58:20,748 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 00:58:20,748 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 00:58:20,748 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY.LockInfo_ctor__fail
[2020-11-25 00:58:20,748 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 00:58:20,748 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 00:58:20,749 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__success
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure HxOwnable_HxOwnable__fail
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__success
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner~address_HxOwnable__fail
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__success
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__success
[2020-11-25 00:58:20,750 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_HxOwnable__fail
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__success
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_HxOwnable__fail
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__success
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure removePauser~address_PauserRole__fail
[2020-11-25 00:58:20,751 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 00:58:20,752 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__success
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure HxERC20_HxERC20__fail
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__success
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_HxERC20__fail
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__success
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_HxERC20__fail
[2020-11-25 00:58:20,753 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__success
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_HxERC20__fail
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__success
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:58:20,754 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 00:58:20,755 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__success
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure BLY_BLY__fail
[2020-11-25 00:58:20,756 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__success
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BLY__fail
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__success
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BLY__fail
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__success
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeAccount~address_BLY__fail
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__success
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:58:20,757 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 00:58:20,758 INFO  L130     BoogieDeclarations]: Found specification of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 00:58:20,758 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__success
[2020-11-25 00:58:20,758 INFO  L130     BoogieDeclarations]: Found specification of procedure unlock~address~uint256_BLY__fail
[2020-11-25 00:58:20,758 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__success
[2020-11-25 00:58:20,758 INFO  L130     BoogieDeclarations]: Found specification of procedure upgradeTo~address_BLY__fail
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure _autoUnlock~address_BLY__fail
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure _setImplementation~address_BLY__fail
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_BLY__fail
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__success
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure implementation_BLY__fail
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__success
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__success
[2020-11-25 00:58:20,759 INFO  L130     BoogieDeclarations]: Found specification of procedure frozenAccount~address_BLY__fail
[2020-11-25 00:58:20,760 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 00:58:20,760 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 00:58:20,760 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 00:58:20,760 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 00:58:20,760 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyNewOwner_pre__fail
[2020-11-25 00:58:20,760 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 00:58:20,760 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 00:58:20,760 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 00:58:20,760 INFO  L130     BoogieDeclarations]: Found specification of procedure notFrozen_pre__fail
[2020-11-25 00:58:20,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 00:58:20,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 00:58:20,760 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__fail
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY.LockInfo_ctor__success
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__fail
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath_NoBaseCtor__success
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__fail
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxSafeMath_HxSafeMath__success
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_HxSafeMath__success
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_HxSafeMath__success
[2020-11-25 00:58:20,761 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_HxSafeMath__success
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_HxSafeMath__success
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__fail
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_HxSafeMath__success
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 00:58:20,762 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__fail
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable_NoBaseCtor__success
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__fail
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxOwnable_HxOwnable__success
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__fail
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner~address_HxOwnable__success
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__fail
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_HxOwnable__success
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__fail
[2020-11-25 00:58:20,763 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_HxOwnable__success
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__fail
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_HxOwnable__success
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__fail
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_HxOwnable__success
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 00:58:20,764 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__fail
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure removePauser~address_PauserRole__success
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 00:58:20,765 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__fail
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20_NoBaseCtor__success
[2020-11-25 00:58:20,766 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__fail
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure HxERC20_HxERC20__success
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__fail
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_HxERC20__success
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__fail
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_HxERC20__success
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__fail
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_HxERC20__success
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_HxERC20__success
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_HxERC20__success
[2020-11-25 00:58:20,767 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_HxERC20__success
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_HxERC20__success
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_HxERC20__success
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_HxERC20__success
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_HxERC20__success
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__fail
[2020-11-25 00:58:20,768 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_HxERC20__success
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 00:58:20,769 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__fail
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY_NoBaseCtor__success
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__fail
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure BLY_BLY__success
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__fail
[2020-11-25 00:58:20,770 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BLY__success
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__fail
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BLY__success
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__fail
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_BLY__success
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__fail
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeAccount~address_BLY__success
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__fail
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure unfreezeAccount~address_BLY__success
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure lock~address~uint256~uint256_BLY__success
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__fail
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferWithLock~address~uint256~uint256_BLY__success
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__fail
[2020-11-25 00:58:20,771 INFO  L138     BoogieDeclarations]: Found implementation of procedure unlock~address~uint256_BLY__success
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__fail
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure upgradeTo~address_BLY__success
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__fail
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _lock~address~uint256~uint256_BLY__success
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__fail
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlock~address~uint256_BLY__success
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__fail
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _autoUnlock~address_BLY__success
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__fail
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setImplementation~address_BLY__success
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__fail
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_BLY__success
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__fail
[2020-11-25 00:58:20,772 INFO  L138     BoogieDeclarations]: Found implementation of procedure implementation_BLY__success
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__fail
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure timelockList~address~uint256_BLY__success
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__fail
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure frozenAccount~address_BLY__success
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__fail
[2020-11-25 00:58:20,773 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyNewOwner_pre__success
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__fail
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure notFrozen_pre__success
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxSafeMath
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxSafeMath
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 00:58:20,774 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxOwnable
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxOwnable
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_HxERC20
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_HxERC20
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 00:58:20,775 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BLY
[2020-11-25 00:58:20,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 00:58:20,776 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 00:58:20,776 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 00:58:21,274 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:58:21,275 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 00:58:22,087 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 00:58:22,087 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 00:58:22,090 INFO  L202        PluginConnector]: Adding new model BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:58:22 BoogieIcfgContainer
[2020-11-25 00:58:22,090 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:58:20" (2/2) ...
[2020-11-25 00:58:22,090 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 00:58:22,090 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@dc39fad and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:58:22, skipping insertion in model container
[2020-11-25 00:58:22,090 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 00:58:22,091 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 00:58:22,091 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 00:58:22,092 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 00:58:22,092 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/3) ...
[2020-11-25 00:58:22,092 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@1e5400d4 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:58:22, skipping insertion in model container
[2020-11-25 00:58:22,092 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:58:20" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 00:58:22,126 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:58:22 NWAContainer
[2020-11-25 00:58:22,126 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 00:58:22,126 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 00:58:22,126 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 00:58:22,127 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 00:58:22,128 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:58:22" (3/4) ...
[2020-11-25 00:58:22,128 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@75a70264 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:58:22, skipping insertion in model container
[2020-11-25 00:58:22,128 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:58:22" (4/4) ...
[2020-11-25 00:58:22,131 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 00:58:22,136 INFO  L110   BuchiProductObserver]: Initial RCFG 4614 locations, 6376 edges
[2020-11-25 00:58:22,137 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 00:58:22,149 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 00:58:25,387 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 00:58:25,402 INFO  L110   BuchiProductObserver]: BuchiProgram size 11452 locations, 20742 edges
[2020-11-25 00:58:25,402 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:58:25 BoogieIcfgContainer
[2020-11-25 00:58:25,402 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 00:58:25,402 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 00:58:25,402 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 00:58:25,404 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 00:58:25,404 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:58:25" (1/1) ...
[2020-11-25 00:58:25,593 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 00:58:25,597 WARN  L196         IcfgDuplicator]: Creating raw copy for unreachable call because return is reachable in graph view: call __var_29 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][account_s1030][msgsender_MSG], value_s1030);
[2020-11-25 00:58:25,615 INFO  L313           BlockEncoder]: Initial Icfg 11452 locations, 20742 edges
[2020-11-25 00:58:25,615 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 00:58:25,616 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 00:58:25,616 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 00:58:25,616 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 00:58:25,642 INFO  L70    emoveInfeasibleEdges]: Removed 219 edges and 25 locations because of local infeasibility
[2020-11-25 00:58:25,663 INFO  L70        RemoveSinkStates]: Removed 306 edges and 169 locations by removing sink states
[2020-11-25 00:58:25,688 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 00:58:25,700 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 00:58:25,706 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 00:58:25,706 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 00:58:25,712 INFO  L313           BlockEncoder]: Encoded RCFG 11204 locations, 20137 edges
[2020-11-25 00:58:25,713 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:58:25 BasicIcfg
[2020-11-25 00:58:25,713 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 00:58:25,713 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 00:58:25,713 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 00:58:25,715 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 00:58:25,715 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:58:25,715 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 12:58:20" (1/6) ...
[2020-11-25 00:58:25,716 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59d2e62 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:58:25, skipping insertion in model container
[2020-11-25 00:58:25,716 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:58:25,716 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 12:58:20" (2/6) ...
[2020-11-25 00:58:25,716 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59d2e62 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:58:25, skipping insertion in model container
[2020-11-25 00:58:25,717 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:58:25,717 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 12:58:22" (3/6) ...
[2020-11-25 00:58:25,717 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59d2e62 and model type BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 12:58:25, skipping insertion in model container
[2020-11-25 00:58:25,717 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:58:25,717 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 12:58:22" (4/6) ...
[2020-11-25 00:58:25,717 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59d2e62 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 12:58:25, skipping insertion in model container
[2020-11-25 00:58:25,717 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:58:25,717 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 12:58:25" (5/6) ...
[2020-11-25 00:58:25,718 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@59d2e62 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 12:58:25, skipping insertion in model container
[2020-11-25 00:58:25,718 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 00:58:25,718 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 12:58:25" (6/6) ...
[2020-11-25 00:58:25,719 INFO  L404   chiAutomizerObserver]: Analyzing ICFG BLY_0xf8aD7dFe656188A23e89da09506Adf7ad9290D5d_transfer-fail.bpl_BEv2
[2020-11-25 00:58:25,765 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 00:58:25,766 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 00:58:25,766 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 00:58:25,766 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 00:58:25,766 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 00:58:25,766 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 00:58:25,766 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 00:58:25,766 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 00:58:25,767 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 00:58:25,898 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11204 states.
[2020-11-25 00:58:25,977 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:25,977 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:25,977 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:25,984 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:25,985 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:25,985 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 00:58:25,985 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 11204 states.
[2020-11-25 00:58:26,023 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:26,023 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:26,023 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:26,024 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:26,025 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:26,038 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:26,039 INFO  L82        PathProgramCache]: Analyzing trace with hash 2024860801, now seen corresponding path program 1 times
[2020-11-25 00:58:26,043 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:26,064 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:26,101 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:58:26,102 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:26,103 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:58:26,500 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:26,508 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:58:26,508 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:58:26,509 INFO  L87              Difference]: Start difference. First operand 11204 states. Second operand 4 states.
[2020-11-25 00:58:27,566 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:27,567 INFO  L93              Difference]: Finished difference Result 6858 states and 8009 transitions.
[2020-11-25 00:58:27,567 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:58:27,568 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6858 states and 8009 transitions.
[2020-11-25 00:58:27,602 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:27,641 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6858 states to 6858 states and 8009 transitions.
[2020-11-25 00:58:27,642 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 00:58:27,644 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1288
[2020-11-25 00:58:27,645 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6858 states and 8009 transitions.
[2020-11-25 00:58:27,658 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:27,658 INFO  L728         BuchiCegarLoop]: Abstraction has 6858 states and 8009 transitions.
[2020-11-25 00:58:27,677 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6858 states and 8009 transitions.
[2020-11-25 00:58:27,768 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6858 to 6858.
[2020-11-25 00:58:27,768 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6858 states.
[2020-11-25 00:58:27,779 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6858 states to 6858 states and 8009 transitions.
[2020-11-25 00:58:27,780 INFO  L751         BuchiCegarLoop]: Abstraction has 6858 states and 8009 transitions.
[2020-11-25 00:58:27,780 INFO  L631         BuchiCegarLoop]: Abstraction has 6858 states and 8009 transitions.
[2020-11-25 00:58:27,780 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 00:58:27,780 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6858 states and 8009 transitions.
[2020-11-25 00:58:27,790 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:27,790 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:27,790 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:27,792 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:27,792 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:27,797 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:27,797 INFO  L82        PathProgramCache]: Analyzing trace with hash -1340608485, now seen corresponding path program 1 times
[2020-11-25 00:58:27,798 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:27,811 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:27,841 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 00:58:27,842 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:27,842 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:58:27,843 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:27,843 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:58:27,843 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:58:27,843 INFO  L87              Difference]: Start difference. First operand 6858 states and 8009 transitions. cyclomatic complexity: 1160 Second operand 3 states.
[2020-11-25 00:58:28,028 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:28,028 INFO  L93              Difference]: Finished difference Result 8739 states and 10190 transitions.
[2020-11-25 00:58:28,028 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:58:28,028 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8739 states and 10190 transitions.
[2020-11-25 00:58:28,054 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:28,096 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8739 states to 8739 states and 10190 transitions.
[2020-11-25 00:58:28,096 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1762
[2020-11-25 00:58:28,098 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1762
[2020-11-25 00:58:28,098 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8739 states and 10190 transitions.
[2020-11-25 00:58:28,108 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:28,108 INFO  L728         BuchiCegarLoop]: Abstraction has 8739 states and 10190 transitions.
[2020-11-25 00:58:28,116 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8739 states and 10190 transitions.
[2020-11-25 00:58:28,201 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8739 to 7907.
[2020-11-25 00:58:28,201 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7907 states.
[2020-11-25 00:58:28,211 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7907 states to 7907 states and 9189 transitions.
[2020-11-25 00:58:28,211 INFO  L751         BuchiCegarLoop]: Abstraction has 7907 states and 9189 transitions.
[2020-11-25 00:58:28,211 INFO  L631         BuchiCegarLoop]: Abstraction has 7907 states and 9189 transitions.
[2020-11-25 00:58:28,211 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 00:58:28,211 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7907 states and 9189 transitions.
[2020-11-25 00:58:28,222 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:28,222 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:28,222 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:28,225 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:28,225 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND TRUE   !(account_s164 != null)
[L5739]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:28,229 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:28,229 INFO  L82        PathProgramCache]: Analyzing trace with hash 80359568, now seen corresponding path program 1 times
[2020-11-25 00:58:28,230 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:28,242 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:28,310 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 00:58:28,311 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:28,311 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 00:58:28,311 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:28,311 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:58:28,311 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:58:28,312 INFO  L87              Difference]: Start difference. First operand 7907 states and 9189 transitions. cyclomatic complexity: 1291 Second operand 9 states.
[2020-11-25 00:58:28,494 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:28,494 INFO  L93              Difference]: Finished difference Result 7953 states and 9264 transitions.
[2020-11-25 00:58:28,494 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:58:28,494 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7953 states and 9264 transitions.
[2020-11-25 00:58:28,519 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:28,550 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7953 states to 7953 states and 9264 transitions.
[2020-11-25 00:58:28,551 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1626
[2020-11-25 00:58:28,552 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1626
[2020-11-25 00:58:28,552 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7953 states and 9264 transitions.
[2020-11-25 00:58:28,561 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:28,561 INFO  L728         BuchiCegarLoop]: Abstraction has 7953 states and 9264 transitions.
[2020-11-25 00:58:28,569 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7953 states and 9264 transitions.
[2020-11-25 00:58:28,644 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7953 to 7944.
[2020-11-25 00:58:28,644 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7944 states.
[2020-11-25 00:58:28,655 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7944 states to 7944 states and 9248 transitions.
[2020-11-25 00:58:28,655 INFO  L751         BuchiCegarLoop]: Abstraction has 7944 states and 9248 transitions.
[2020-11-25 00:58:28,655 INFO  L631         BuchiCegarLoop]: Abstraction has 7944 states and 9248 transitions.
[2020-11-25 00:58:28,655 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 00:58:28,655 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7944 states and 9248 transitions.
[2020-11-25 00:58:28,668 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:28,668 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:28,668 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:28,671 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:28,671 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND TRUE   !(account_s218 != null)
[L5810]               revert := true;
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND TRUE   revert
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:28,676 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:28,676 INFO  L82        PathProgramCache]: Analyzing trace with hash -1373610899, now seen corresponding path program 1 times
[2020-11-25 00:58:28,677 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:28,688 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:28,795 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 14 refuted. 0 times theorem prover too weak. 37 trivial. 0 not checked.
[2020-11-25 00:58:28,795 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:28,795 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [10] total 10
[2020-11-25 00:58:28,796 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:28,796 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 10 interpolants.
[2020-11-25 00:58:28,796 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=73, Unknown=0, NotChecked=0, Total=90
[2020-11-25 00:58:28,797 INFO  L87              Difference]: Start difference. First operand 7944 states and 9248 transitions. cyclomatic complexity: 1313 Second operand 10 states.
[2020-11-25 00:58:28,907 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:28,907 INFO  L93              Difference]: Finished difference Result 8004 states and 9339 transitions.
[2020-11-25 00:58:28,907 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 00:58:28,908 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8004 states and 9339 transitions.
[2020-11-25 00:58:28,923 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:28,941 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8004 states to 8004 states and 9339 transitions.
[2020-11-25 00:58:28,941 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1633
[2020-11-25 00:58:28,942 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1633
[2020-11-25 00:58:28,942 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8004 states and 9339 transitions.
[2020-11-25 00:58:28,948 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:28,948 INFO  L728         BuchiCegarLoop]: Abstraction has 8004 states and 9339 transitions.
[2020-11-25 00:58:28,954 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8004 states and 9339 transitions.
[2020-11-25 00:58:29,000 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8004 to 7951.
[2020-11-25 00:58:29,000 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7951 states.
[2020-11-25 00:58:29,008 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7951 states to 7951 states and 9256 transitions.
[2020-11-25 00:58:29,008 INFO  L751         BuchiCegarLoop]: Abstraction has 7951 states and 9256 transitions.
[2020-11-25 00:58:29,008 INFO  L631         BuchiCegarLoop]: Abstraction has 7951 states and 9256 transitions.
[2020-11-25 00:58:29,008 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 00:58:29,008 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7951 states and 9256 transitions.
[2020-11-25 00:58:29,016 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:29,017 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:29,017 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:29,019 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:29,019 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND TRUE   !!__var_2
[L5747]               revert := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND TRUE   revert
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND TRUE   revert
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND TRUE   revert
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND TRUE   revert
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND TRUE   !!frozenAccount_BLY[this][_holder_s1185]
[L10783]              revert := true;
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND TRUE   revert
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:29,022 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:29,022 INFO  L82        PathProgramCache]: Analyzing trace with hash 208155055, now seen corresponding path program 1 times
[2020-11-25 00:58:29,023 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:29,032 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:29,067 INFO  L134       CoverageAnalysis]: Checked inductivity of 51 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 51 trivial. 0 not checked.
[2020-11-25 00:58:29,067 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:29,067 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:58:29,067 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:29,068 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:58:29,068 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:58:29,068 INFO  L87              Difference]: Start difference. First operand 7951 states and 9256 transitions. cyclomatic complexity: 1314 Second operand 3 states.
[2020-11-25 00:58:29,175 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:29,175 INFO  L93              Difference]: Finished difference Result 8768 states and 9916 transitions.
[2020-11-25 00:58:29,175 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:58:29,176 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8768 states and 9916 transitions.
[2020-11-25 00:58:29,194 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:29,213 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8768 states to 8090 states and 9112 transitions.
[2020-11-25 00:58:29,213 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1564
[2020-11-25 00:58:29,214 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1605
[2020-11-25 00:58:29,214 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8090 states and 9112 transitions.
[2020-11-25 00:58:29,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:29,219 INFO  L728         BuchiCegarLoop]: Abstraction has 8090 states and 9112 transitions.
[2020-11-25 00:58:29,225 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8090 states and 9112 transitions.
[2020-11-25 00:58:29,262 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8090 to 7427.
[2020-11-25 00:58:29,263 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7427 states.
[2020-11-25 00:58:29,270 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7427 states to 7427 states and 8280 transitions.
[2020-11-25 00:58:29,270 INFO  L751         BuchiCegarLoop]: Abstraction has 7427 states and 8280 transitions.
[2020-11-25 00:58:29,270 INFO  L631         BuchiCegarLoop]: Abstraction has 7427 states and 8280 transitions.
[2020-11-25 00:58:29,270 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 00:58:29,270 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7427 states and 8280 transitions.
[2020-11-25 00:58:29,277 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:29,278 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:29,278 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:29,281 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:29,281 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:29,288 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:29,289 INFO  L82        PathProgramCache]: Analyzing trace with hash 1721832239, now seen corresponding path program 1 times
[2020-11-25 00:58:29,290 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:29,307 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:29,509 INFO  L134       CoverageAnalysis]: Checked inductivity of 942 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 915 trivial. 0 not checked.
[2020-11-25 00:58:29,509 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:29,509 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 00:58:29,510 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:29,510 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:58:29,510 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:58:29,510 INFO  L87              Difference]: Start difference. First operand 7427 states and 8280 transitions. cyclomatic complexity: 862 Second operand 7 states.
[2020-11-25 00:58:29,681 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:29,681 INFO  L93              Difference]: Finished difference Result 7450 states and 8307 transitions.
[2020-11-25 00:58:29,681 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:58:29,681 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7450 states and 8307 transitions.
[2020-11-25 00:58:29,698 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:29,713 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7450 states to 7433 states and 8287 transitions.
[2020-11-25 00:58:29,713 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1538
[2020-11-25 00:58:29,713 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1538
[2020-11-25 00:58:29,713 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7433 states and 8287 transitions.
[2020-11-25 00:58:29,717 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:29,718 INFO  L728         BuchiCegarLoop]: Abstraction has 7433 states and 8287 transitions.
[2020-11-25 00:58:29,723 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7433 states and 8287 transitions.
[2020-11-25 00:58:29,757 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7433 to 7433.
[2020-11-25 00:58:29,757 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7433 states.
[2020-11-25 00:58:29,764 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7433 states to 7433 states and 8287 transitions.
[2020-11-25 00:58:29,764 INFO  L751         BuchiCegarLoop]: Abstraction has 7433 states and 8287 transitions.
[2020-11-25 00:58:29,764 INFO  L631         BuchiCegarLoop]: Abstraction has 7433 states and 8287 transitions.
[2020-11-25 00:58:29,764 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 00:58:29,764 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7433 states and 8287 transitions.
[2020-11-25 00:58:29,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:29,772 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:29,772 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:29,775 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:29,775 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND FALSE  !(DType[this] == BLY)
[L7084]   COND TRUE   DType[this] == ERC20Pausable
[L7085]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7085]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7086]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:29,781 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:29,781 INFO  L82        PathProgramCache]: Analyzing trace with hash -339185358, now seen corresponding path program 1 times
[2020-11-25 00:58:29,782 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:29,806 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:30,005 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:58:30,005 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:30,005 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 00:58:30,005 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:30,006 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:58:30,006 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:58:30,006 INFO  L87              Difference]: Start difference. First operand 7433 states and 8287 transitions. cyclomatic complexity: 863 Second operand 7 states.
[2020-11-25 00:58:30,128 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:30,128 INFO  L93              Difference]: Finished difference Result 7463 states and 8316 transitions.
[2020-11-25 00:58:30,128 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:58:30,128 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7463 states and 8316 transitions.
[2020-11-25 00:58:30,146 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:30,165 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7463 states to 7423 states and 8273 transitions.
[2020-11-25 00:58:30,166 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1536
[2020-11-25 00:58:30,166 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1536
[2020-11-25 00:58:30,166 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7423 states and 8273 transitions.
[2020-11-25 00:58:30,171 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:30,171 INFO  L728         BuchiCegarLoop]: Abstraction has 7423 states and 8273 transitions.
[2020-11-25 00:58:30,177 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7423 states and 8273 transitions.
[2020-11-25 00:58:30,233 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7423 to 7423.
[2020-11-25 00:58:30,233 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7423 states.
[2020-11-25 00:58:30,239 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7423 states to 7423 states and 8273 transitions.
[2020-11-25 00:58:30,240 INFO  L751         BuchiCegarLoop]: Abstraction has 7423 states and 8273 transitions.
[2020-11-25 00:58:30,240 INFO  L631         BuchiCegarLoop]: Abstraction has 7423 states and 8273 transitions.
[2020-11-25 00:58:30,240 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 00:58:30,240 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7423 states and 8273 transitions.
[2020-11-25 00:58:30,247 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:30,247 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:30,247 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:30,249 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:30,249 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:30,255 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:30,255 INFO  L82        PathProgramCache]: Analyzing trace with hash -933935799, now seen corresponding path program 1 times
[2020-11-25 00:58:30,256 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:30,268 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:30,432 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 0 proven. 18 refuted. 0 times theorem prover too weak. 909 trivial. 0 not checked.
[2020-11-25 00:58:30,432 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:30,432 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 00:58:30,432 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:30,433 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:58:30,433 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:58:30,433 INFO  L87              Difference]: Start difference. First operand 7423 states and 8273 transitions. cyclomatic complexity: 859 Second operand 7 states.
[2020-11-25 00:58:30,539 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:30,539 INFO  L93              Difference]: Finished difference Result 7446 states and 8300 transitions.
[2020-11-25 00:58:30,539 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:58:30,539 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7446 states and 8300 transitions.
[2020-11-25 00:58:30,551 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:30,563 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7446 states to 7429 states and 8280 transitions.
[2020-11-25 00:58:30,563 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1536
[2020-11-25 00:58:30,564 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1536
[2020-11-25 00:58:30,564 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7429 states and 8280 transitions.
[2020-11-25 00:58:30,567 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:30,568 INFO  L728         BuchiCegarLoop]: Abstraction has 7429 states and 8280 transitions.
[2020-11-25 00:58:30,573 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7429 states and 8280 transitions.
[2020-11-25 00:58:30,606 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7429 to 7423.
[2020-11-25 00:58:30,606 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7423 states.
[2020-11-25 00:58:30,613 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7423 states to 7423 states and 8273 transitions.
[2020-11-25 00:58:30,613 INFO  L751         BuchiCegarLoop]: Abstraction has 7423 states and 8273 transitions.
[2020-11-25 00:58:30,613 INFO  L631         BuchiCegarLoop]: Abstraction has 7423 states and 8273 transitions.
[2020-11-25 00:58:30,613 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 00:58:30,613 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7423 states and 8273 transitions.
[2020-11-25 00:58:30,621 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:30,621 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:30,621 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:30,623 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:30,623 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND TRUE   DType[this] == ERC20Pausable
[L6568]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6568]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6569]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:30,628 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:30,629 INFO  L82        PathProgramCache]: Analyzing trace with hash 487488782, now seen corresponding path program 1 times
[2020-11-25 00:58:30,629 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:30,649 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:30,839 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:58:30,839 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:30,839 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:58:30,840 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:30,840 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:58:30,840 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:58:30,840 INFO  L87              Difference]: Start difference. First operand 7423 states and 8273 transitions. cyclomatic complexity: 859 Second operand 8 states.
[2020-11-25 00:58:30,965 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:30,965 INFO  L93              Difference]: Finished difference Result 7463 states and 8312 transitions.
[2020-11-25 00:58:30,965 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:58:30,965 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7463 states and 8312 transitions.
[2020-11-25 00:58:30,977 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:30,988 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7463 states to 7415 states and 8261 transitions.
[2020-11-25 00:58:30,988 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1534
[2020-11-25 00:58:30,989 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1534
[2020-11-25 00:58:30,989 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7415 states and 8261 transitions.
[2020-11-25 00:58:30,992 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:30,992 INFO  L728         BuchiCegarLoop]: Abstraction has 7415 states and 8261 transitions.
[2020-11-25 00:58:30,998 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7415 states and 8261 transitions.
[2020-11-25 00:58:31,027 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7415 to 7415.
[2020-11-25 00:58:31,028 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7415 states.
[2020-11-25 00:58:31,034 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7415 states to 7415 states and 8261 transitions.
[2020-11-25 00:58:31,034 INFO  L751         BuchiCegarLoop]: Abstraction has 7415 states and 8261 transitions.
[2020-11-25 00:58:31,034 INFO  L631         BuchiCegarLoop]: Abstraction has 7415 states and 8261 transitions.
[2020-11-25 00:58:31,034 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 00:58:31,034 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7415 states and 8261 transitions.
[2020-11-25 00:58:31,041 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:31,041 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:31,041 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:31,043 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:31,043 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:31,048 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:31,049 INFO  L82        PathProgramCache]: Analyzing trace with hash -774141864, now seen corresponding path program 1 times
[2020-11-25 00:58:31,049 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:31,064 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:31,235 INFO  L134       CoverageAnalysis]: Checked inductivity of 921 backedges. 6 proven. 25 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 00:58:31,236 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:31,236 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:58:31,236 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:31,236 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:58:31,236 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:58:31,236 INFO  L87              Difference]: Start difference. First operand 7415 states and 8261 transitions. cyclomatic complexity: 855 Second operand 8 states.
[2020-11-25 00:58:31,368 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:31,368 INFO  L93              Difference]: Finished difference Result 7442 states and 8292 transitions.
[2020-11-25 00:58:31,368 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:58:31,368 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7442 states and 8292 transitions.
[2020-11-25 00:58:31,382 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:31,395 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7442 states to 7428 states and 8276 transitions.
[2020-11-25 00:58:31,395 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1534
[2020-11-25 00:58:31,395 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1534
[2020-11-25 00:58:31,395 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7428 states and 8276 transitions.
[2020-11-25 00:58:31,399 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:31,399 INFO  L728         BuchiCegarLoop]: Abstraction has 7428 states and 8276 transitions.
[2020-11-25 00:58:31,405 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7428 states and 8276 transitions.
[2020-11-25 00:58:31,444 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7428 to 7428.
[2020-11-25 00:58:31,444 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7428 states.
[2020-11-25 00:58:31,452 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7428 states to 7428 states and 8276 transitions.
[2020-11-25 00:58:31,452 INFO  L751         BuchiCegarLoop]: Abstraction has 7428 states and 8276 transitions.
[2020-11-25 00:58:31,452 INFO  L631         BuchiCegarLoop]: Abstraction has 7428 states and 8276 transitions.
[2020-11-25 00:58:31,452 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 00:58:31,452 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7428 states and 8276 transitions.
[2020-11-25 00:58:31,471 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:31,471 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:31,471 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:31,475 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:31,475 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:31,485 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:31,485 INFO  L82        PathProgramCache]: Analyzing trace with hash 161585681, now seen corresponding path program 1 times
[2020-11-25 00:58:31,486 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:31,497 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:31,652 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 31 refuted. 0 times theorem prover too weak. 899 trivial. 0 not checked.
[2020-11-25 00:58:31,652 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:31,652 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 00:58:31,653 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:31,653 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:58:31,653 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:58:31,653 INFO  L87              Difference]: Start difference. First operand 7428 states and 8276 transitions. cyclomatic complexity: 857 Second operand 7 states.
[2020-11-25 00:58:31,760 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:31,760 INFO  L93              Difference]: Finished difference Result 7451 states and 8303 transitions.
[2020-11-25 00:58:31,760 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:58:31,760 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7451 states and 8303 transitions.
[2020-11-25 00:58:31,773 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:31,785 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7451 states to 7434 states and 8283 transitions.
[2020-11-25 00:58:31,785 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1534
[2020-11-25 00:58:31,785 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1534
[2020-11-25 00:58:31,785 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7434 states and 8283 transitions.
[2020-11-25 00:58:31,789 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:31,790 INFO  L728         BuchiCegarLoop]: Abstraction has 7434 states and 8283 transitions.
[2020-11-25 00:58:31,795 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7434 states and 8283 transitions.
[2020-11-25 00:58:31,827 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7434 to 7428.
[2020-11-25 00:58:31,827 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7428 states.
[2020-11-25 00:58:31,833 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7428 states to 7428 states and 8276 transitions.
[2020-11-25 00:58:31,834 INFO  L751         BuchiCegarLoop]: Abstraction has 7428 states and 8276 transitions.
[2020-11-25 00:58:31,834 INFO  L631         BuchiCegarLoop]: Abstraction has 7428 states and 8276 transitions.
[2020-11-25 00:58:31,834 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 00:58:31,834 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7428 states and 8276 transitions.
[2020-11-25 00:58:31,841 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:31,841 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:31,841 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:31,843 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:31,843 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND TRUE   __exception
[L3017]               __tmp__Balance := Balance;
[L3018]               __tmp__DType := DType;
[L3019]               __tmp__Alloc := Alloc;
[L3020]               __tmp__balance_ADDR := balance_ADDR;
[L3021]               __tmp__M_Ref_bool := M_Ref_bool;
[L3022]               __tmp__sum := sum;
[L3023]               __tmp__M_Ref_int := M_Ref_int;
[L3024]               __tmp__sum__balances0 := sum__balances0;
[L3025]               __tmp__alloc__allowed_HxERC20_lvl0 := alloc__allowed_HxERC20_lvl0;
[L3026]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3027]               __tmp__sum__allowed1 := sum__allowed1;
[L3028]               __tmp__M_int_Ref := M_int_Ref;
[L3029]               __tmp__alloc_timelockList_BLY_lvl0 := alloc_timelockList_BLY_lvl0;
[L3030]               __tmp__sum_frozenAccount2 := sum_frozenAccount2;
[L3031]               __tmp__Length := Length;
[L3032]               __tmp__now := now;
[L3033]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3034]               __tmp__owner_HxOwnable := owner_HxOwnable;
[L3035]               __tmp__newOwner_HxOwnable := newOwner_HxOwnable;
[L3036]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3037]               __tmp___paused_Pausable := _paused_Pausable;
[L3038]               __tmp___balances_HxERC20 := _balances_HxERC20;
[L3039]               __tmp___allowed_HxERC20 := _allowed_HxERC20;
[L3040]               __tmp___totalSupply_HxERC20 := _totalSupply_HxERC20;
[L3041]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3042]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3043]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3044]               __tmp___releaseTime_BLY.LockInfo := _releaseTime_BLY.LockInfo;
[L3045]               __tmp___amount_BLY.LockInfo := _amount_BLY.LockInfo;
[L3046]               __tmp__implementation_BLY := implementation_BLY;
[L3047]               __tmp__timelockList_BLY := timelockList_BLY;
[L3048]               __tmp__frozenAccount_BLY := frozenAccount_BLY;
[L3049]   CALL        call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L7306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7307]   COND FALSE  !(revert)
[L7310]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7176]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L7176]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7149]               assume msgsender_MSG != null;
[L7150]               __tmp__Balance[this] := 0;
[L7151]               __tmp___name_ERC20Detailed[this] := -1412326813;
[L7152]               __tmp___symbol_ERC20Detailed[this] := -1412326813;
[L7153]               __tmp___decimals_ERC20Detailed[this] := 0;
[L7155]               __tmp___name_ERC20Detailed[this] := name_s1105;
[L7156]               __tmp___symbol_ERC20Detailed[this] := symbol_s1105;
[L7157]               __tmp___decimals_ERC20Detailed[this] := decimals_s1105;
[L7180]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7181]   COND FALSE  !(revert)
[L7310]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7311]   COND FALSE  !(revert)
[L7314]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L7314]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7315]   COND FALSE  !(revert)
[L7318]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7318]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7319]   COND FALSE  !(revert)
[L7322]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7322]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7323]   COND FALSE  !(revert)
[L7326]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7326]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7327]   COND FALSE  !(revert)
[L7330]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6992]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6992]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6993]   COND FALSE  !(revert)
[L6996]   CALL        call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6478]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6436]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6421]               assume msgsender_MSG != null;
[L6422]               __tmp__Balance[this] := 0;
[L6436]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6437]   COND FALSE  !(revert)
[L6478]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6479]   COND FALSE  !(revert)
[L6482]   CALL        call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6453]               assume msgsender_MSG != null;
[L6454]               __tmp__Balance[this] := 0;
[L6455]               __tmp___balances_HxERC20[this] := zeroRefintArr();
[L6456]               __tmp__sum__balances0[this] := 0;
[L6457]               __tmp___allowed_HxERC20[this] := zeroRefRefintArr();
[L6458]               __tmp__sum__allowed1[this] := 0;
[L6459]               __tmp___totalSupply_HxERC20[this] := 0;
[L6482]   RET         call HxERC20_HxERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6483]   COND FALSE  !(revert)
[L6996]   RET         call HxERC20_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6997]   COND FALSE  !(revert)
[L7000]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L7000]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7001]   COND FALSE  !(revert)
[L7004]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L7004]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7005]   COND FALSE  !(revert)
[L7008]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6322]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6322]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L6326]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6043]   CALL        call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L5848]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5821]               assume msgsender_MSG != null;
[L5822]               __tmp__Balance[this] := 0;
[L5823]               __tmp__owner_HxOwnable[this] := null;
[L5824]               __tmp__newOwner_HxOwnable[this] := null;
[L5826]               __tmp__owner_HxOwnable[this] := msgsender_MSG;
[L5827]               __var_6 := null;
[L5828]               __tmp__newOwner_HxOwnable[this] := __var_6;
[L5848]   RET         call HxOwnable_HxOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5849]   COND FALSE  !(revert)
[L6043]   RET         call HxOwnable_HxOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6044]   COND FALSE  !(revert)
[L6047]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5968]               assume msgsender_MSG != null;
[L5969]               __tmp__Balance[this] := 0;
[L5971]   CALL        call __var_10 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L5971]   RET         call __var_10 := FreshRefGenerator__fail();
[L5972]   COND FALSE  !(revert)
[L5975]               __tmp___pausers_PauserRole[this] := __var_10;
[L5977]   COND TRUE   __tmp__DType[this] == BLY
[L5978]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6268]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L5717]               __var_1 := null;
[L5718]   COND FALSE  !(!(account_s164 != null))
[L5722]   CALL        call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5796]               __var_5 := null;
[L5797]   COND FALSE  !(!(account_s218 != null))
[L5801]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s218]][account_s218];
[L5722]   RET         call __var_2 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5723]   COND FALSE  !(revert)
[L5726]   COND FALSE  !(!!__var_2)
[L5730]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s164]][account_s164] := true;
[L6268]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s439);
[L6269]   COND FALSE  !(revert)
[L5978]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5979]   COND FALSE  !(revert)
[L6047]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6048]   COND FALSE  !(revert)
[L6326]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6327]   COND FALSE  !(revert)
[L6330]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6303]               assume msgsender_MSG != null;
[L6304]               __tmp__Balance[this] := 0;
[L6305]               __tmp___paused_Pausable[this] := false;
[L6307]               __tmp___paused_Pausable[this] := false;
[L6330]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L7008]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7009]   COND FALSE  !(revert)
[L7012]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6977]               assume msgsender_MSG != null;
[L6978]               __tmp__Balance[this] := 0;
[L7012]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7013]   COND FALSE  !(revert)
[L7330]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7331]   COND FALSE  !(revert)
[L7334]   CALL        call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7239]               assume msgsender_MSG != null;
[L7240]               __tmp__Balance[this] := 0;
[L7241]               __tmp__implementation_BLY[this] := null;
[L7243]   CALL        call __var_36 := FreshRefGenerator__fail();
[L5489]               havoc newRef;
[L5490]               assume __tmp__Alloc[newRef] == false;
[L5491]               __tmp__Alloc[newRef] := true;
[L5492]               assume newRef != null;
[L7243]   RET         call __var_36 := FreshRefGenerator__fail();
[L7244]   COND FALSE  !(revert)
[L7247]               __tmp__timelockList_BLY[this] := __var_36;
[L7249]               __tmp__alloc_timelockList_BLY_lvl0[__tmp__timelockList_BLY[this]] := zeroRefboolArr();
[L7250]               __tmp__frozenAccount_BLY[this] := zeroRefboolArr();
[L7253]               assume __tmp__Balance[msgsender_MSG] >= msgvalue_MSG;
[L7254]               __tmp__Balance[msgsender_MSG] := __tmp__Balance[msgsender_MSG] - msgvalue_MSG;
[L7255]               __tmp__Balance[this] := __tmp__Balance[this] + msgvalue_MSG;
[L7257]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7258]   COND TRUE   __tmp__DType[this] == BLY
[L7259]   CALL        call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6820]               __var_23 := null;
[L6821]   COND FALSE  !(!(account_s946 != null))
[L6825]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6825]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___totalSupply_HxERC20[this], value_s946);
[L6826]   COND FALSE  !(revert)
[L6829]               __tmp___totalSupply_HxERC20[this] := __var_24;
[L6830]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L5640]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5641]   COND FALSE  !(!(c_s106 >= a_s106))
[L5645]               __ret_0_ := c_s106;
[L6830]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__fail(this, this, 0, __tmp___balances_HxERC20[this][account_s946], value_s946);
[L6831]   COND FALSE  !(revert)
[L6834]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_HxERC20[this][account_s946];
[L6835]               __tmp___balances_HxERC20[this][account_s946] := __var_25;
[L6836]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_HxERC20[this][account_s946];
[L7259]   RET         call _mint~address~uint256_HxERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7260]   COND FALSE  !(revert)
[L7334]   RET         call BLY_BLY_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7335]   COND FALSE  !(revert)
[L3049]   RET         call BLY_BLY__fail(this, msgsender_MSG, msgvalue_MSG);
[L3050]               assume revert || gas < 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:31,848 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:31,848 INFO  L82        PathProgramCache]: Analyzing trace with hash 1403720824, now seen corresponding path program 1 times
[2020-11-25 00:58:31,849 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:31,870 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:32,043 INFO  L134       CoverageAnalysis]: Checked inductivity of 894 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 00:58:32,043 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:32,044 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:58:32,044 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:32,044 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:58:32,044 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:58:32,045 INFO  L87              Difference]: Start difference. First operand 7428 states and 8276 transitions. cyclomatic complexity: 857 Second operand 4 states.
[2020-11-25 00:58:32,361 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:32,361 INFO  L93              Difference]: Finished difference Result 9035 states and 10181 transitions.
[2020-11-25 00:58:32,361 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 00:58:32,361 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9035 states and 10181 transitions.
[2020-11-25 00:58:32,380 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 00:58:32,396 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9035 states to 8509 states and 9612 transitions.
[2020-11-25 00:58:32,396 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1700
[2020-11-25 00:58:32,397 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1700
[2020-11-25 00:58:32,397 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8509 states and 9612 transitions.
[2020-11-25 00:58:32,402 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:32,402 INFO  L728         BuchiCegarLoop]: Abstraction has 8509 states and 9612 transitions.
[2020-11-25 00:58:32,407 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8509 states and 9612 transitions.
[2020-11-25 00:58:32,442 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8509 to 7429.
[2020-11-25 00:58:32,442 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7429 states.
[2020-11-25 00:58:32,449 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7429 states to 7429 states and 8281 transitions.
[2020-11-25 00:58:32,449 INFO  L751         BuchiCegarLoop]: Abstraction has 7429 states and 8281 transitions.
[2020-11-25 00:58:32,449 INFO  L631         BuchiCegarLoop]: Abstraction has 7429 states and 8281 transitions.
[2020-11-25 00:58:32,449 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 00:58:32,449 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7429 states and 8281 transitions.
[2020-11-25 00:58:32,457 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:32,457 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:32,457 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:32,458 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:32,458 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:32,463 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:32,463 INFO  L82        PathProgramCache]: Analyzing trace with hash -305255422, now seen corresponding path program 1 times
[2020-11-25 00:58:32,464 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:32,478 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:32,641 INFO  L134       CoverageAnalysis]: Checked inductivity of 914 backedges. 6 proven. 22 refuted. 0 times theorem prover too weak. 886 trivial. 0 not checked.
[2020-11-25 00:58:32,641 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:32,642 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:58:32,642 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:32,642 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:58:32,642 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:58:32,642 INFO  L87              Difference]: Start difference. First operand 7429 states and 8281 transitions. cyclomatic complexity: 861 Second operand 8 states.
[2020-11-25 00:58:32,771 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:32,771 INFO  L93              Difference]: Finished difference Result 7456 states and 8312 transitions.
[2020-11-25 00:58:32,772 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:58:32,772 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7456 states and 8312 transitions.
[2020-11-25 00:58:32,784 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:32,795 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7456 states to 7442 states and 8296 transitions.
[2020-11-25 00:58:32,795 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1625
[2020-11-25 00:58:32,796 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1625
[2020-11-25 00:58:32,796 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7442 states and 8296 transitions.
[2020-11-25 00:58:32,800 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:32,800 INFO  L728         BuchiCegarLoop]: Abstraction has 7442 states and 8296 transitions.
[2020-11-25 00:58:32,805 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7442 states and 8296 transitions.
[2020-11-25 00:58:32,834 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7442 to 7429.
[2020-11-25 00:58:32,834 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7429 states.
[2020-11-25 00:58:32,840 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7429 states to 7429 states and 8281 transitions.
[2020-11-25 00:58:32,840 INFO  L751         BuchiCegarLoop]: Abstraction has 7429 states and 8281 transitions.
[2020-11-25 00:58:32,840 INFO  L631         BuchiCegarLoop]: Abstraction has 7429 states and 8281 transitions.
[2020-11-25 00:58:32,841 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 00:58:32,841 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7429 states and 8281 transitions.
[2020-11-25 00:58:32,848 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:32,848 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:32,848 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:32,849 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:32,849 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:32,853 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:32,854 INFO  L82        PathProgramCache]: Analyzing trace with hash -1918700254, now seen corresponding path program 1 times
[2020-11-25 00:58:32,854 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:32,868 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:33,109 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 900 trivial. 0 not checked.
[2020-11-25 00:58:33,110 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:33,110 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:58:33,110 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:33,110 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:58:33,110 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:58:33,110 INFO  L87              Difference]: Start difference. First operand 7429 states and 8281 transitions. cyclomatic complexity: 861 Second operand 8 states.
[2020-11-25 00:58:33,225 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:33,225 INFO  L93              Difference]: Finished difference Result 7456 states and 8312 transitions.
[2020-11-25 00:58:33,225 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:58:33,225 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7456 states and 8312 transitions.
[2020-11-25 00:58:33,237 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:33,247 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7456 states to 7435 states and 8287 transitions.
[2020-11-25 00:58:33,248 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1625
[2020-11-25 00:58:33,248 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1625
[2020-11-25 00:58:33,248 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7435 states and 8287 transitions.
[2020-11-25 00:58:33,252 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:33,252 INFO  L728         BuchiCegarLoop]: Abstraction has 7435 states and 8287 transitions.
[2020-11-25 00:58:33,257 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7435 states and 8287 transitions.
[2020-11-25 00:58:33,283 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7435 to 7435.
[2020-11-25 00:58:33,283 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7435 states.
[2020-11-25 00:58:33,290 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7435 states to 7435 states and 8287 transitions.
[2020-11-25 00:58:33,290 INFO  L751         BuchiCegarLoop]: Abstraction has 7435 states and 8287 transitions.
[2020-11-25 00:58:33,290 INFO  L631         BuchiCegarLoop]: Abstraction has 7435 states and 8287 transitions.
[2020-11-25 00:58:33,290 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 00:58:33,290 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7435 states and 8287 transitions.
[2020-11-25 00:58:33,297 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:33,297 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:33,297 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:33,298 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:33,299 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:33,303 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:33,303 INFO  L82        PathProgramCache]: Analyzing trace with hash -1123446677, now seen corresponding path program 1 times
[2020-11-25 00:58:33,304 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:33,317 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:33,474 INFO  L134       CoverageAnalysis]: Checked inductivity of 915 backedges. 12 proven. 9 refuted. 0 times theorem prover too weak. 894 trivial. 0 not checked.
[2020-11-25 00:58:33,475 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:33,475 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:58:33,475 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:33,475 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:58:33,475 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:58:33,475 INFO  L87              Difference]: Start difference. First operand 7435 states and 8287 transitions. cyclomatic complexity: 861 Second operand 8 states.
[2020-11-25 00:58:33,611 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:33,611 INFO  L93              Difference]: Finished difference Result 7456 states and 8311 transitions.
[2020-11-25 00:58:33,611 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:58:33,612 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7456 states and 8311 transitions.
[2020-11-25 00:58:33,629 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:33,644 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7456 states to 7435 states and 8286 transitions.
[2020-11-25 00:58:33,644 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1625
[2020-11-25 00:58:33,645 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1625
[2020-11-25 00:58:33,645 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7435 states and 8286 transitions.
[2020-11-25 00:58:33,650 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:33,650 INFO  L728         BuchiCegarLoop]: Abstraction has 7435 states and 8286 transitions.
[2020-11-25 00:58:33,656 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7435 states and 8286 transitions.
[2020-11-25 00:58:33,692 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7435 to 7429.
[2020-11-25 00:58:33,693 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7429 states.
[2020-11-25 00:58:33,702 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7429 states to 7429 states and 8280 transitions.
[2020-11-25 00:58:33,702 INFO  L751         BuchiCegarLoop]: Abstraction has 7429 states and 8280 transitions.
[2020-11-25 00:58:33,702 INFO  L631         BuchiCegarLoop]: Abstraction has 7429 states and 8280 transitions.
[2020-11-25 00:58:33,702 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 00:58:33,702 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7429 states and 8280 transitions.
[2020-11-25 00:58:33,712 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:33,713 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:33,713 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:33,715 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:33,715 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND FALSE  !(DType[this] == BLY)
[L6567]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6572]   COND TRUE   DType[this] == HxERC20
[L6573]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6573]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6574]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:33,721 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:33,721 INFO  L82        PathProgramCache]: Analyzing trace with hash 1224005659, now seen corresponding path program 1 times
[2020-11-25 00:58:33,722 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:33,743 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:33,920 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:58:33,920 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:33,920 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:58:33,921 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:33,921 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:58:33,921 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:58:33,921 INFO  L87              Difference]: Start difference. First operand 7429 states and 8280 transitions. cyclomatic complexity: 860 Second operand 8 states.
[2020-11-25 00:58:34,044 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:34,045 INFO  L93              Difference]: Finished difference Result 7469 states and 8319 transitions.
[2020-11-25 00:58:34,045 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:58:34,045 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7469 states and 8319 transitions.
[2020-11-25 00:58:34,057 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:34,068 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7469 states to 7417 states and 8264 transitions.
[2020-11-25 00:58:34,068 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1623
[2020-11-25 00:58:34,068 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1623
[2020-11-25 00:58:34,068 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7417 states and 8264 transitions.
[2020-11-25 00:58:34,072 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:34,072 INFO  L728         BuchiCegarLoop]: Abstraction has 7417 states and 8264 transitions.
[2020-11-25 00:58:34,077 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7417 states and 8264 transitions.
[2020-11-25 00:58:34,103 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7417 to 7417.
[2020-11-25 00:58:34,103 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7417 states.
[2020-11-25 00:58:34,109 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7417 states to 7417 states and 8264 transitions.
[2020-11-25 00:58:34,109 INFO  L751         BuchiCegarLoop]: Abstraction has 7417 states and 8264 transitions.
[2020-11-25 00:58:34,109 INFO  L631         BuchiCegarLoop]: Abstraction has 7417 states and 8264 transitions.
[2020-11-25 00:58:34,109 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 00:58:34,110 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7417 states and 8264 transitions.
[2020-11-25 00:58:34,116 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:34,117 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:34,117 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:34,118 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:34,118 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:34,123 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:34,123 INFO  L82        PathProgramCache]: Analyzing trace with hash -1130358945, now seen corresponding path program 1 times
[2020-11-25 00:58:34,123 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:34,142 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:34,395 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 930 trivial. 0 not checked.
[2020-11-25 00:58:34,395 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:34,395 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 00:58:34,395 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:34,396 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 00:58:34,396 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=27, Invalid=155, Unknown=0, NotChecked=0, Total=182
[2020-11-25 00:58:34,396 INFO  L87              Difference]: Start difference. First operand 7417 states and 8264 transitions. cyclomatic complexity: 856 Second operand 14 states.
[2020-11-25 00:58:39,880 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:39,880 INFO  L93              Difference]: Finished difference Result 7836 states and 8779 transitions.
[2020-11-25 00:58:39,880 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 00:58:39,880 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7836 states and 8779 transitions.
[2020-11-25 00:58:39,893 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 00:58:39,905 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7836 states to 7836 states and 8779 transitions.
[2020-11-25 00:58:39,905 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1721
[2020-11-25 00:58:39,906 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1721
[2020-11-25 00:58:39,906 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7836 states and 8779 transitions.
[2020-11-25 00:58:39,910 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:39,910 INFO  L728         BuchiCegarLoop]: Abstraction has 7836 states and 8779 transitions.
[2020-11-25 00:58:39,915 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7836 states and 8779 transitions.
[2020-11-25 00:58:39,945 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7836 to 7329.
[2020-11-25 00:58:39,945 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7329 states.
[2020-11-25 00:58:39,951 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7329 states to 7329 states and 8180 transitions.
[2020-11-25 00:58:39,952 INFO  L751         BuchiCegarLoop]: Abstraction has 7329 states and 8180 transitions.
[2020-11-25 00:58:39,952 INFO  L631         BuchiCegarLoop]: Abstraction has 7329 states and 8180 transitions.
[2020-11-25 00:58:39,952 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 00:58:39,952 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7329 states and 8180 transitions.
[2020-11-25 00:58:39,958 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:39,958 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:39,958 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:39,960 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:39,960 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:39,964 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:39,965 INFO  L82        PathProgramCache]: Analyzing trace with hash 1583294648, now seen corresponding path program 1 times
[2020-11-25 00:58:39,965 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:39,979 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:40,147 INFO  L134       CoverageAnalysis]: Checked inductivity of 927 backedges. 6 proven. 31 refuted. 0 times theorem prover too weak. 890 trivial. 0 not checked.
[2020-11-25 00:58:40,147 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:40,147 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:58:40,148 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:40,148 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:58:40,148 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:58:40,148 INFO  L87              Difference]: Start difference. First operand 7329 states and 8180 transitions. cyclomatic complexity: 865 Second operand 8 states.
[2020-11-25 00:58:40,269 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:40,269 INFO  L93              Difference]: Finished difference Result 7350 states and 8204 transitions.
[2020-11-25 00:58:40,269 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:58:40,269 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7350 states and 8204 transitions.
[2020-11-25 00:58:40,281 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:40,292 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7350 states to 7336 states and 8188 transitions.
[2020-11-25 00:58:40,292 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1469
[2020-11-25 00:58:40,293 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1469
[2020-11-25 00:58:40,293 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7336 states and 8188 transitions.
[2020-11-25 00:58:40,296 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:40,296 INFO  L728         BuchiCegarLoop]: Abstraction has 7336 states and 8188 transitions.
[2020-11-25 00:58:40,301 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7336 states and 8188 transitions.
[2020-11-25 00:58:40,329 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7336 to 7329.
[2020-11-25 00:58:40,330 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7329 states.
[2020-11-25 00:58:40,336 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7329 states to 7329 states and 8180 transitions.
[2020-11-25 00:58:40,336 INFO  L751         BuchiCegarLoop]: Abstraction has 7329 states and 8180 transitions.
[2020-11-25 00:58:40,336 INFO  L631         BuchiCegarLoop]: Abstraction has 7329 states and 8180 transitions.
[2020-11-25 00:58:40,336 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 00:58:40,336 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7329 states and 8180 transitions.
[2020-11-25 00:58:40,343 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:40,343 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:40,343 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:40,345 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:40,345 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND TRUE   DType[this] == Pausable
[L6026]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6026]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6027]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:40,349 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:40,349 INFO  L82        PathProgramCache]: Analyzing trace with hash 1243636302, now seen corresponding path program 1 times
[2020-11-25 00:58:40,349 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:40,368 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:40,540 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 893 trivial. 0 not checked.
[2020-11-25 00:58:40,540 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:40,540 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 00:58:40,540 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:40,540 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:58:40,540 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:58:40,541 INFO  L87              Difference]: Start difference. First operand 7329 states and 8180 transitions. cyclomatic complexity: 865 Second operand 9 states.
[2020-11-25 00:58:40,672 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:40,672 INFO  L93              Difference]: Finished difference Result 7360 states and 8213 transitions.
[2020-11-25 00:58:40,672 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:58:40,672 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7360 states and 8213 transitions.
[2020-11-25 00:58:40,684 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:40,696 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7360 states to 7325 states and 8174 transitions.
[2020-11-25 00:58:40,696 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1469
[2020-11-25 00:58:40,696 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1469
[2020-11-25 00:58:40,696 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7325 states and 8174 transitions.
[2020-11-25 00:58:40,700 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:40,700 INFO  L728         BuchiCegarLoop]: Abstraction has 7325 states and 8174 transitions.
[2020-11-25 00:58:40,705 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7325 states and 8174 transitions.
[2020-11-25 00:58:40,734 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7325 to 7325.
[2020-11-25 00:58:40,734 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7325 states.
[2020-11-25 00:58:40,740 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7325 states to 7325 states and 8174 transitions.
[2020-11-25 00:58:40,741 INFO  L751         BuchiCegarLoop]: Abstraction has 7325 states and 8174 transitions.
[2020-11-25 00:58:40,741 INFO  L631         BuchiCegarLoop]: Abstraction has 7325 states and 8174 transitions.
[2020-11-25 00:58:40,741 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 00:58:40,741 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7325 states and 8174 transitions.
[2020-11-25 00:58:40,748 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:40,748 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:40,748 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:40,749 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:40,749 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:40,753 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:40,753 INFO  L82        PathProgramCache]: Analyzing trace with hash 176291742, now seen corresponding path program 2 times
[2020-11-25 00:58:40,754 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:40,768 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:40,987 INFO  L134       CoverageAnalysis]: Checked inductivity of 918 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 900 trivial. 0 not checked.
[2020-11-25 00:58:40,987 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:40,987 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 00:58:40,987 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:40,987 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:58:40,987 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:58:40,988 INFO  L87              Difference]: Start difference. First operand 7325 states and 8174 transitions. cyclomatic complexity: 863 Second operand 8 states.
[2020-11-25 00:58:41,102 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:41,102 INFO  L93              Difference]: Finished difference Result 7346 states and 8198 transitions.
[2020-11-25 00:58:41,102 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:58:41,102 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7346 states and 8198 transitions.
[2020-11-25 00:58:41,114 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:41,125 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7346 states to 7325 states and 8173 transitions.
[2020-11-25 00:58:41,126 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1469
[2020-11-25 00:58:41,126 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1469
[2020-11-25 00:58:41,126 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7325 states and 8173 transitions.
[2020-11-25 00:58:41,130 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:41,130 INFO  L728         BuchiCegarLoop]: Abstraction has 7325 states and 8173 transitions.
[2020-11-25 00:58:41,135 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7325 states and 8173 transitions.
[2020-11-25 00:58:41,164 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7325 to 7319.
[2020-11-25 00:58:41,164 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7319 states.
[2020-11-25 00:58:41,170 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7319 states to 7319 states and 8167 transitions.
[2020-11-25 00:58:41,171 INFO  L751         BuchiCegarLoop]: Abstraction has 7319 states and 8167 transitions.
[2020-11-25 00:58:41,171 INFO  L631         BuchiCegarLoop]: Abstraction has 7319 states and 8167 transitions.
[2020-11-25 00:58:41,171 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 00:58:41,171 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7319 states and 8167 transitions.
[2020-11-25 00:58:41,178 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:41,178 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:41,178 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:41,179 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:41,179 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:41,184 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:41,184 INFO  L82        PathProgramCache]: Analyzing trace with hash 201303793, now seen corresponding path program 1 times
[2020-11-25 00:58:41,185 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:41,211 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:41,688 INFO  L134       CoverageAnalysis]: Checked inductivity of 930 backedges. 14 proven. 0 refuted. 0 times theorem prover too weak. 916 trivial. 0 not checked.
[2020-11-25 00:58:41,688 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:41,688 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [23] imperfect sequences [] total 23
[2020-11-25 00:58:41,688 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:41,689 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 24 interpolants.
[2020-11-25 00:58:41,689 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=52, Invalid=500, Unknown=0, NotChecked=0, Total=552
[2020-11-25 00:58:41,689 INFO  L87              Difference]: Start difference. First operand 7319 states and 8167 transitions. cyclomatic complexity: 862 Second operand 24 states.
[2020-11-25 00:58:51,252 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:51,252 INFO  L93              Difference]: Finished difference Result 7551 states and 8471 transitions.
[2020-11-25 00:58:51,252 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 00:58:51,252 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7551 states and 8471 transitions.
[2020-11-25 00:58:51,266 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:51,278 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7551 states to 7551 states and 8471 transitions.
[2020-11-25 00:58:51,278 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1504
[2020-11-25 00:58:51,279 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1504
[2020-11-25 00:58:51,279 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7551 states and 8471 transitions.
[2020-11-25 00:58:51,282 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:51,283 INFO  L728         BuchiCegarLoop]: Abstraction has 7551 states and 8471 transitions.
[2020-11-25 00:58:51,288 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7551 states and 8471 transitions.
[2020-11-25 00:58:51,316 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7551 to 7452.
[2020-11-25 00:58:51,316 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7452 states.
[2020-11-25 00:58:51,323 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7452 states to 7452 states and 8354 transitions.
[2020-11-25 00:58:51,323 INFO  L751         BuchiCegarLoop]: Abstraction has 7452 states and 8354 transitions.
[2020-11-25 00:58:51,323 INFO  L631         BuchiCegarLoop]: Abstraction has 7452 states and 8354 transitions.
[2020-11-25 00:58:51,323 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 00:58:51,323 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7452 states and 8354 transitions.
[2020-11-25 00:58:51,330 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:51,330 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:51,330 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:51,331 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:51,331 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:51,336 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:51,337 INFO  L82        PathProgramCache]: Analyzing trace with hash -1623004769, now seen corresponding path program 1 times
[2020-11-25 00:58:51,337 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:51,356 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:51,564 INFO  L134       CoverageAnalysis]: Checked inductivity of 929 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 929 trivial. 0 not checked.
[2020-11-25 00:58:51,564 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:51,564 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:58:51,565 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:51,565 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:58:51,565 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:58:51,565 INFO  L87              Difference]: Start difference. First operand 7452 states and 8354 transitions. cyclomatic complexity: 921 Second operand 3 states.
[2020-11-25 00:58:51,634 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:51,634 INFO  L93              Difference]: Finished difference Result 7428 states and 8311 transitions.
[2020-11-25 00:58:51,634 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:58:51,634 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7428 states and 8311 transitions.
[2020-11-25 00:58:51,645 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:51,656 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7428 states to 7428 states and 8311 transitions.
[2020-11-25 00:58:51,656 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1473
[2020-11-25 00:58:51,656 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1473
[2020-11-25 00:58:51,656 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7428 states and 8311 transitions.
[2020-11-25 00:58:51,660 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:51,660 INFO  L728         BuchiCegarLoop]: Abstraction has 7428 states and 8311 transitions.
[2020-11-25 00:58:51,665 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7428 states and 8311 transitions.
[2020-11-25 00:58:51,691 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7428 to 7319.
[2020-11-25 00:58:51,691 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7319 states.
[2020-11-25 00:58:51,698 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7319 states to 7319 states and 8172 transitions.
[2020-11-25 00:58:51,698 INFO  L751         BuchiCegarLoop]: Abstraction has 7319 states and 8172 transitions.
[2020-11-25 00:58:51,698 INFO  L631         BuchiCegarLoop]: Abstraction has 7319 states and 8172 transitions.
[2020-11-25 00:58:51,698 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 00:58:51,698 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7319 states and 8172 transitions.
[2020-11-25 00:58:51,704 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:51,704 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:51,704 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:51,706 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:51,706 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND FALSE  !(__var_69)
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:51,711 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:51,711 INFO  L82        PathProgramCache]: Analyzing trace with hash 894213909, now seen corresponding path program 1 times
[2020-11-25 00:58:51,712 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:51,735 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:51,949 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1073 trivial. 0 not checked.
[2020-11-25 00:58:51,949 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:58:51,949 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 00:58:51,950 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:51,950 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:58:51,950 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:58:51,950 INFO  L87              Difference]: Start difference. First operand 7319 states and 8172 transitions. cyclomatic complexity: 870 Second operand 4 states.
[2020-11-25 00:58:51,979 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:58:51,979 INFO  L93              Difference]: Finished difference Result 7322 states and 8177 transitions.
[2020-11-25 00:58:51,979 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:58:51,979 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7322 states and 8177 transitions.
[2020-11-25 00:58:51,989 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:52,000 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7322 states to 7322 states and 8177 transitions.
[2020-11-25 00:58:52,000 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1417
[2020-11-25 00:58:52,000 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1417
[2020-11-25 00:58:52,000 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7322 states and 8177 transitions.
[2020-11-25 00:58:52,004 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:58:52,004 INFO  L728         BuchiCegarLoop]: Abstraction has 7322 states and 8177 transitions.
[2020-11-25 00:58:52,009 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7322 states and 8177 transitions.
[2020-11-25 00:58:52,034 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7322 to 7319.
[2020-11-25 00:58:52,034 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7319 states.
[2020-11-25 00:58:52,041 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7319 states to 7319 states and 8169 transitions.
[2020-11-25 00:58:52,041 INFO  L751         BuchiCegarLoop]: Abstraction has 7319 states and 8169 transitions.
[2020-11-25 00:58:52,041 INFO  L631         BuchiCegarLoop]: Abstraction has 7319 states and 8169 transitions.
[2020-11-25 00:58:52,041 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 00:58:52,041 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7319 states and 8169 transitions.
[2020-11-25 00:58:52,047 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:58:52,047 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:58:52,047 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:58:52,049 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:58:52,049 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:58:52,055 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:58:52,055 INFO  L82        PathProgramCache]: Analyzing trace with hash -1849376612, now seen corresponding path program 1 times
[2020-11-25 00:58:52,056 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:58:52,079 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:58:52,738 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 96 proven. 6 refuted. 0 times theorem prover too weak. 972 trivial. 0 not checked.
[2020-11-25 00:58:52,739 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:58:52,739 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 00:58:52,739 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:58:52,739 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 00:58:52,739 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 00:58:52,740 INFO  L87              Difference]: Start difference. First operand 7319 states and 8169 transitions. cyclomatic complexity: 867 Second operand 26 states.
[2020-11-25 00:59:04,787 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:04,787 INFO  L93              Difference]: Finished difference Result 7627 states and 8569 transitions.
[2020-11-25 00:59:04,787 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 00:59:04,788 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7627 states and 8569 transitions.
[2020-11-25 00:59:04,801 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:04,814 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7627 states to 7627 states and 8569 transitions.
[2020-11-25 00:59:04,814 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1550
[2020-11-25 00:59:04,815 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1550
[2020-11-25 00:59:04,815 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7627 states and 8569 transitions.
[2020-11-25 00:59:04,819 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:04,819 INFO  L728         BuchiCegarLoop]: Abstraction has 7627 states and 8569 transitions.
[2020-11-25 00:59:04,824 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7627 states and 8569 transitions.
[2020-11-25 00:59:04,852 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7627 to 7526.
[2020-11-25 00:59:04,852 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7526 states.
[2020-11-25 00:59:04,859 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7526 states to 7526 states and 8447 transitions.
[2020-11-25 00:59:04,859 INFO  L751         BuchiCegarLoop]: Abstraction has 7526 states and 8447 transitions.
[2020-11-25 00:59:04,859 INFO  L631         BuchiCegarLoop]: Abstraction has 7526 states and 8447 transitions.
[2020-11-25 00:59:04,859 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 00:59:04,859 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7526 states and 8447 transitions.
[2020-11-25 00:59:04,865 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:04,865 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:04,865 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:04,867 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:04,867 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false
[L8109]   CALL        call __var_59 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8109]   RET         call __var_59 := FreshRefGenerator__success();
[L8110]   COND FALSE  !(revert)
[L8113]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8114]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] := true;
[L8115]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == zerointRefArr();
[L8116]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1600] == __var_59;
[L8117]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] == 0;
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:04,873 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:04,873 INFO  L82        PathProgramCache]: Analyzing trace with hash 276683869, now seen corresponding path program 1 times
[2020-11-25 00:59:04,873 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:04,932 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:05,179 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 1 proven. 4 refuted. 0 times theorem prover too weak. 1069 trivial. 0 not checked.
[2020-11-25 00:59:05,179 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:59:05,179 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 00:59:05,179 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:05,179 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 00:59:05,179 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 00:59:05,180 INFO  L87              Difference]: Start difference. First operand 7526 states and 8447 transitions. cyclomatic complexity: 944 Second operand 4 states.
[2020-11-25 00:59:05,260 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:05,260 INFO  L93              Difference]: Finished difference Result 7458 states and 8362 transitions.
[2020-11-25 00:59:05,260 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 00:59:05,260 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7458 states and 8362 transitions.
[2020-11-25 00:59:05,272 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:05,283 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7458 states to 7374 states and 8262 transitions.
[2020-11-25 00:59:05,283 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1488
[2020-11-25 00:59:05,284 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1488
[2020-11-25 00:59:05,284 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7374 states and 8262 transitions.
[2020-11-25 00:59:05,288 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:05,288 INFO  L728         BuchiCegarLoop]: Abstraction has 7374 states and 8262 transitions.
[2020-11-25 00:59:05,292 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7374 states and 8262 transitions.
[2020-11-25 00:59:05,320 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7374 to 7368.
[2020-11-25 00:59:05,321 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7368 states.
[2020-11-25 00:59:05,327 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7368 states to 7368 states and 8254 transitions.
[2020-11-25 00:59:05,327 INFO  L751         BuchiCegarLoop]: Abstraction has 7368 states and 8254 transitions.
[2020-11-25 00:59:05,327 INFO  L631         BuchiCegarLoop]: Abstraction has 7368 states and 8254 transitions.
[2020-11-25 00:59:05,328 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 00:59:05,328 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7368 states and 8254 transitions.
[2020-11-25 00:59:05,334 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:05,335 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:05,335 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:05,336 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:05,337 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND TRUE   DType[this] == ERC20Pausable
[L6021]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6021]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6022]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8264]   CALL        call __var_68 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8264]   RET         call __var_68 := FreshRefGenerator__success();
[L8265]   COND FALSE  !(revert)
[L8268]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8269]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8270]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8271]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_68;
[L8272]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:05,342 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:05,342 INFO  L82        PathProgramCache]: Analyzing trace with hash -1731306481, now seen corresponding path program 1 times
[2020-11-25 00:59:05,343 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:05,363 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:05,600 INFO  L134       CoverageAnalysis]: Checked inductivity of 1062 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 1037 trivial. 0 not checked.
[2020-11-25 00:59:05,600 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:59:05,600 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 00:59:05,600 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:05,601 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:59:05,601 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:59:05,601 INFO  L87              Difference]: Start difference. First operand 7368 states and 8254 transitions. cyclomatic complexity: 909 Second operand 9 states.
[2020-11-25 00:59:05,722 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:05,722 INFO  L93              Difference]: Finished difference Result 7399 states and 8287 transitions.
[2020-11-25 00:59:05,722 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:59:05,722 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7399 states and 8287 transitions.
[2020-11-25 00:59:05,733 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:05,745 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7399 states to 7364 states and 8248 transitions.
[2020-11-25 00:59:05,745 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1488
[2020-11-25 00:59:05,745 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1488
[2020-11-25 00:59:05,745 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7364 states and 8248 transitions.
[2020-11-25 00:59:05,749 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:05,749 INFO  L728         BuchiCegarLoop]: Abstraction has 7364 states and 8248 transitions.
[2020-11-25 00:59:05,754 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7364 states and 8248 transitions.
[2020-11-25 00:59:05,781 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7364 to 7364.
[2020-11-25 00:59:05,781 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7364 states.
[2020-11-25 00:59:05,788 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7364 states to 7364 states and 8248 transitions.
[2020-11-25 00:59:05,788 INFO  L751         BuchiCegarLoop]: Abstraction has 7364 states and 8248 transitions.
[2020-11-25 00:59:05,788 INFO  L631         BuchiCegarLoop]: Abstraction has 7364 states and 8248 transitions.
[2020-11-25 00:59:05,788 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 00:59:05,788 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7364 states and 8248 transitions.
[2020-11-25 00:59:05,795 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:05,795 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:05,795 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:05,796 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:05,796 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND FALSE  !(DType[this] == BLY)
[L6020]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6025]   COND FALSE  !(DType[this] == Pausable)
[L6030]   COND TRUE   DType[this] == PauserRole
[L6031]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6031]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6032]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8264]   CALL        call __var_68 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8264]   RET         call __var_68 := FreshRefGenerator__success();
[L8265]   COND FALSE  !(revert)
[L8268]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8269]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8270]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8271]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_68;
[L8272]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:05,801 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:05,801 INFO  L82        PathProgramCache]: Analyzing trace with hash -569986897, now seen corresponding path program 1 times
[2020-11-25 00:59:05,802 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:05,820 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:06,087 INFO  L134       CoverageAnalysis]: Checked inductivity of 1062 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 1037 trivial. 0 not checked.
[2020-11-25 00:59:06,087 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:59:06,087 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 00:59:06,087 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:06,087 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 00:59:06,087 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 00:59:06,088 INFO  L87              Difference]: Start difference. First operand 7364 states and 8248 transitions. cyclomatic complexity: 907 Second operand 9 states.
[2020-11-25 00:59:06,207 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:06,207 INFO  L93              Difference]: Finished difference Result 7382 states and 8267 transitions.
[2020-11-25 00:59:06,208 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 00:59:06,208 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7382 states and 8267 transitions.
[2020-11-25 00:59:06,219 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:06,230 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7382 states to 7344 states and 8225 transitions.
[2020-11-25 00:59:06,231 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1488
[2020-11-25 00:59:06,231 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1488
[2020-11-25 00:59:06,231 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7344 states and 8225 transitions.
[2020-11-25 00:59:06,235 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:06,235 INFO  L728         BuchiCegarLoop]: Abstraction has 7344 states and 8225 transitions.
[2020-11-25 00:59:06,240 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7344 states and 8225 transitions.
[2020-11-25 00:59:06,266 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7344 to 7344.
[2020-11-25 00:59:06,266 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7344 states.
[2020-11-25 00:59:06,273 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7344 states to 7344 states and 8225 transitions.
[2020-11-25 00:59:06,273 INFO  L751         BuchiCegarLoop]: Abstraction has 7344 states and 8225 transitions.
[2020-11-25 00:59:06,273 INFO  L631         BuchiCegarLoop]: Abstraction has 7344 states and 8225 transitions.
[2020-11-25 00:59:06,273 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 00:59:06,273 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7344 states and 8225 transitions.
[2020-11-25 00:59:06,280 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:06,280 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:06,280 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:06,281 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:06,282 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8264]   CALL        call __var_68 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8264]   RET         call __var_68 := FreshRefGenerator__success();
[L8265]   COND FALSE  !(revert)
[L8268]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8269]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8270]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8271]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_68;
[L8272]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:06,286 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:06,286 INFO  L82        PathProgramCache]: Analyzing trace with hash 2056296332, now seen corresponding path program 1 times
[2020-11-25 00:59:06,288 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:06,314 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:06,532 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1073 trivial. 0 not checked.
[2020-11-25 00:59:06,533 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:59:06,533 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 00:59:06,533 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:06,533 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 00:59:06,533 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 00:59:06,533 INFO  L87              Difference]: Start difference. First operand 7344 states and 8225 transitions. cyclomatic complexity: 904 Second operand 3 states.
[2020-11-25 00:59:06,586 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:06,586 INFO  L93              Difference]: Finished difference Result 7356 states and 8243 transitions.
[2020-11-25 00:59:06,587 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 00:59:06,587 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7356 states and 8243 transitions.
[2020-11-25 00:59:06,597 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:06,608 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7356 states to 7356 states and 8243 transitions.
[2020-11-25 00:59:06,608 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1488
[2020-11-25 00:59:06,609 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1488
[2020-11-25 00:59:06,609 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7356 states and 8243 transitions.
[2020-11-25 00:59:06,612 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:06,612 INFO  L728         BuchiCegarLoop]: Abstraction has 7356 states and 8243 transitions.
[2020-11-25 00:59:06,617 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7356 states and 8243 transitions.
[2020-11-25 00:59:06,643 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7356 to 7336.
[2020-11-25 00:59:06,643 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7336 states.
[2020-11-25 00:59:06,650 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7336 states to 7336 states and 8213 transitions.
[2020-11-25 00:59:06,650 INFO  L751         BuchiCegarLoop]: Abstraction has 7336 states and 8213 transitions.
[2020-11-25 00:59:06,650 INFO  L631         BuchiCegarLoop]: Abstraction has 7336 states and 8213 transitions.
[2020-11-25 00:59:06,650 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 00:59:06,650 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7336 states and 8213 transitions.
[2020-11-25 00:59:06,656 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:06,657 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:06,657 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:06,658 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:06,659 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:06,663 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:06,664 INFO  L82        PathProgramCache]: Analyzing trace with hash 1905306816, now seen corresponding path program 1 times
[2020-11-25 00:59:06,664 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:06,686 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:06,944 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1074 trivial. 0 not checked.
[2020-11-25 00:59:06,944 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:59:06,945 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 00:59:06,945 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:06,945 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 00:59:06,945 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=19, Unknown=0, NotChecked=0, Total=30
[2020-11-25 00:59:06,945 INFO  L87              Difference]: Start difference. First operand 7336 states and 8213 transitions. cyclomatic complexity: 900 Second operand 6 states.
[2020-11-25 00:59:08,299 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:08,299 INFO  L93              Difference]: Finished difference Result 7357 states and 8223 transitions.
[2020-11-25 00:59:08,299 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:59:08,300 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7357 states and 8223 transitions.
[2020-11-25 00:59:08,314 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:08,326 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7357 states to 7357 states and 8223 transitions.
[2020-11-25 00:59:08,326 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1520
[2020-11-25 00:59:08,326 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1520
[2020-11-25 00:59:08,326 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7357 states and 8223 transitions.
[2020-11-25 00:59:08,330 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:08,330 INFO  L728         BuchiCegarLoop]: Abstraction has 7357 states and 8223 transitions.
[2020-11-25 00:59:08,335 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7357 states and 8223 transitions.
[2020-11-25 00:59:08,360 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7357 to 7256.
[2020-11-25 00:59:08,360 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7256 states.
[2020-11-25 00:59:08,367 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7256 states to 7256 states and 8101 transitions.
[2020-11-25 00:59:08,367 INFO  L751         BuchiCegarLoop]: Abstraction has 7256 states and 8101 transitions.
[2020-11-25 00:59:08,367 INFO  L631         BuchiCegarLoop]: Abstraction has 7256 states and 8101 transitions.
[2020-11-25 00:59:08,367 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 00:59:08,367 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7256 states and 8101 transitions.
[2020-11-25 00:59:08,373 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:08,373 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:08,373 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:08,375 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:08,375 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND TRUE   choice == 16
[L12077]              gas := gas - 21000;
[L12078]  COND TRUE   gas >= 0
[L12079]              assume msgvalue_MSG == 0;
[L12080]  CALL        call __ret_0_balanceOf := balanceOf~address_BLY(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3096]               havoc __exception;
[L3097]               revert := false;
[L3098]   COND FALSE  !(__exception)
[L3134]   CALL        call __ret_0_ := balanceOf~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7455]   COND TRUE   DType[this] == BLY
[L7456]   CALL        call totalBalance_s1254 := balanceOf~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L6520]               __ret_0_ := _balances_HxERC20[this][owner_s640];
[L7456]   RET         call totalBalance_s1254 := balanceOf~address_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L7457]   COND FALSE  !(revert)
[L7463]               totalBalance_s1254 := totalBalance_s1254;
[L7464]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][owner_s1254] == false
[L7465]   CALL        call __var_38 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7465]   RET         call __var_38 := FreshRefGenerator__success();
[L7466]   COND FALSE  !(revert)
[L7469]               assume Length[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == 0;
[L7470]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][owner_s1254] := true;
[L7471]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == zerointRefArr();
[L7472]               assume M_Ref_Ref[timelockList_BLY[this]][owner_s1254] == __var_38;
[L7473]               assume sum[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] == 0;
[L7475]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][owner_s1254]] > 0)
[L7512]               __ret_0_ := totalBalance_s1254;
[L3134]   RET         call __ret_0_ := balanceOf~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L3135]               assume !revert && gas >= 0;
[L12080]  RET         call __ret_0_balanceOf := balanceOf~address_BLY(this, msgsender_MSG, msgvalue_MSG, owner_s1254);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:08,379 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:08,380 INFO  L82        PathProgramCache]: Analyzing trace with hash -33522103, now seen corresponding path program 1 times
[2020-11-25 00:59:08,380 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:08,404 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:09,059 INFO  L134       CoverageAnalysis]: Checked inductivity of 1074 backedges. 96 proven. 6 refuted. 0 times theorem prover too weak. 972 trivial. 0 not checked.
[2020-11-25 00:59:09,059 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:59:09,059 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 00:59:09,060 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:09,060 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 00:59:09,060 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 00:59:09,060 INFO  L87              Difference]: Start difference. First operand 7256 states and 8101 transitions. cyclomatic complexity: 866 Second operand 26 states.
[2020-11-25 00:59:20,234 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:20,234 INFO  L93              Difference]: Finished difference Result 7345 states and 8230 transitions.
[2020-11-25 00:59:20,234 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 00:59:20,234 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7345 states and 8230 transitions.
[2020-11-25 00:59:20,246 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 00:59:20,258 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7345 states to 7345 states and 8230 transitions.
[2020-11-25 00:59:20,258 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1526
[2020-11-25 00:59:20,259 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1534
[2020-11-25 00:59:20,259 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7345 states and 8230 transitions.
[2020-11-25 00:59:20,263 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:20,263 INFO  L728         BuchiCegarLoop]: Abstraction has 7345 states and 8230 transitions.
[2020-11-25 00:59:20,267 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7345 states and 8230 transitions.
[2020-11-25 00:59:20,292 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7345 to 7254.
[2020-11-25 00:59:20,292 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7254 states.
[2020-11-25 00:59:20,298 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7254 states to 7254 states and 8095 transitions.
[2020-11-25 00:59:20,299 INFO  L751         BuchiCegarLoop]: Abstraction has 7254 states and 8095 transitions.
[2020-11-25 00:59:20,299 INFO  L631         BuchiCegarLoop]: Abstraction has 7254 states and 8095 transitions.
[2020-11-25 00:59:20,299 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 00:59:20,299 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7254 states and 8095 transitions.
[2020-11-25 00:59:20,305 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:20,305 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:20,305 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:20,307 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:20,307 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND TRUE   choice == 6
[L12140]              gas := gas - 21000;
[L12141]  COND TRUE   gas >= 0
[L12142]              assume msgvalue_MSG == 0;
[L12143]  CALL        call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7689]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND FALSE  !(DType[this] == BLY)
[L10693]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10698]  COND FALSE  !(DType[this] == Pausable)
[L10703]  COND TRUE   DType[this] == PauserRole
[L10704]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10704]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10705]  COND FALSE  !(revert)
[L10711]  COND FALSE  !(DType[this] == BLY)
[L10716]  COND FALSE  !(DType[this] == ERC20Pausable)
[L10721]  COND FALSE  !(DType[this] == Pausable)
[L10726]  COND TRUE   DType[this] == PauserRole
[L10727]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10727]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10728]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7689]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7690]   COND FALSE  !(revert)
[L7693]   COND FALSE  !(!!frozenAccount_BLY[this][holder_s1351])
[L7697]               frozenAccount_BLY[this][holder_s1351] := true;
[L7698]               assert { :EventEmitted "Freeze_BLY" } true;
[L7699]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12143]  RET         call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:20,312 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:20,312 INFO  L82        PathProgramCache]: Analyzing trace with hash -1518137551, now seen corresponding path program 1 times
[2020-11-25 00:59:20,312 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:20,332 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:20,571 INFO  L134       CoverageAnalysis]: Checked inductivity of 1058 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1057 trivial. 0 not checked.
[2020-11-25 00:59:20,571 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:59:20,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:59:20,572 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:20,572 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:59:20,572 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:59:20,572 INFO  L87              Difference]: Start difference. First operand 7254 states and 8095 transitions. cyclomatic complexity: 862 Second operand 7 states.
[2020-11-25 00:59:20,692 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:20,693 INFO  L93              Difference]: Finished difference Result 7292 states and 8145 transitions.
[2020-11-25 00:59:20,693 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:59:20,693 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7292 states and 8145 transitions.
[2020-11-25 00:59:20,704 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:20,715 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7292 states to 7262 states and 8115 transitions.
[2020-11-25 00:59:20,715 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1472
[2020-11-25 00:59:20,716 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1472
[2020-11-25 00:59:20,716 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7262 states and 8115 transitions.
[2020-11-25 00:59:20,719 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:20,719 INFO  L728         BuchiCegarLoop]: Abstraction has 7262 states and 8115 transitions.
[2020-11-25 00:59:20,724 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7262 states and 8115 transitions.
[2020-11-25 00:59:20,749 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7262 to 7262.
[2020-11-25 00:59:20,749 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7262 states.
[2020-11-25 00:59:20,755 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7262 states to 7262 states and 8115 transitions.
[2020-11-25 00:59:20,755 INFO  L751         BuchiCegarLoop]: Abstraction has 7262 states and 8115 transitions.
[2020-11-25 00:59:20,755 INFO  L631         BuchiCegarLoop]: Abstraction has 7262 states and 8115 transitions.
[2020-11-25 00:59:20,755 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 00:59:20,755 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7262 states and 8115 transitions.
[2020-11-25 00:59:20,762 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:20,762 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:20,762 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:20,763 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:20,763 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND TRUE   choice == 6
[L12140]              gas := gas - 21000;
[L12141]  COND TRUE   gas >= 0
[L12142]              assume msgvalue_MSG == 0;
[L12143]  CALL        call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3351]               havoc __exception;
[L3352]               revert := false;
[L3353]   COND FALSE  !(__exception)
[L3389]   CALL        call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L7689]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7689]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7690]   COND FALSE  !(revert)
[L7693]   COND FALSE  !(!!frozenAccount_BLY[this][holder_s1351])
[L7697]               frozenAccount_BLY[this][holder_s1351] := true;
[L7698]               assert { :EventEmitted "Freeze_BLY" } true;
[L7699]               __ret_0_ := true;
[L3389]   RET         call __ret_0_ := freezeAccount~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L3390]               assume !revert && gas >= 0;
[L12143]  RET         call __ret_0_freezeAccount := freezeAccount~address_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1351);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND TRUE   choice == 8
[L12127]              gas := gas - 21000;
[L12128]  COND TRUE   gas >= 0
[L12129]              assume arg1676_s0 >= 0 && arg1676_s0 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12130]              assume msgvalue_MSG == 0;
[L12131]  CALL        call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L3968]               havoc __exception;
[L3969]               revert := false;
[L3970]   COND FALSE  !(__exception)
[L4006]   CALL        call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L8371]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] == false
[L8372]   CALL        call __var_71 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8372]   RET         call __var_71 := FreshRefGenerator__success();
[L8373]   COND FALSE  !(revert)
[L8376]               assume Length[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8377]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][arg1675_s0] := true;
[L8378]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == zerointRefArr();
[L8379]               assume M_Ref_Ref[timelockList_BLY[this]][arg1675_s0] == __var_71;
[L8380]               assume sum[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]] == 0;
[L8382]               __ret_0_ := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][arg1675_s0]][arg1676_s0];
[L4006]   RET         call __ret_0_ := timelockList~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L4007]               assume !revert && gas >= 0;
[L12131]  RET         call __ret_0_timelockList := timelockList~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, arg1675_s0, arg1676_s0);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:20,769 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:20,769 INFO  L82        PathProgramCache]: Analyzing trace with hash 445445418, now seen corresponding path program 1 times
[2020-11-25 00:59:20,770 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:20,793 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:21,139 INFO  L134       CoverageAnalysis]: Checked inductivity of 1058 backedges. 0 proven. 1 refuted. 0 times theorem prover too weak. 1057 trivial. 0 not checked.
[2020-11-25 00:59:21,139 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:59:21,139 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [11] total 11
[2020-11-25 00:59:21,139 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:21,140 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 00:59:21,140 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=21, Invalid=111, Unknown=0, NotChecked=0, Total=132
[2020-11-25 00:59:21,140 INFO  L87              Difference]: Start difference. First operand 7262 states and 8115 transitions. cyclomatic complexity: 874 Second operand 12 states.
[2020-11-25 00:59:25,056 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:25,057 INFO  L93              Difference]: Finished difference Result 7411 states and 8301 transitions.
[2020-11-25 00:59:25,057 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 00:59:25,057 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7411 states and 8301 transitions.
[2020-11-25 00:59:25,072 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:25,084 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7411 states to 7343 states and 8219 transitions.
[2020-11-25 00:59:25,084 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1530
[2020-11-25 00:59:25,085 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1530
[2020-11-25 00:59:25,085 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7343 states and 8219 transitions.
[2020-11-25 00:59:25,089 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:25,089 INFO  L728         BuchiCegarLoop]: Abstraction has 7343 states and 8219 transitions.
[2020-11-25 00:59:25,094 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7343 states and 8219 transitions.
[2020-11-25 00:59:25,119 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7343 to 7268.
[2020-11-25 00:59:25,120 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7268 states.
[2020-11-25 00:59:25,126 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7268 states to 7268 states and 8135 transitions.
[2020-11-25 00:59:25,126 INFO  L751         BuchiCegarLoop]: Abstraction has 7268 states and 8135 transitions.
[2020-11-25 00:59:25,126 INFO  L631         BuchiCegarLoop]: Abstraction has 7268 states and 8135 transitions.
[2020-11-25 00:59:25,126 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 00:59:25,126 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7268 states and 8135 transitions.
[2020-11-25 00:59:25,133 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 00:59:25,133 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:25,133 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:25,135 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:25,135 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:25,139 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:25,139 INFO  L82        PathProgramCache]: Analyzing trace with hash 2009855237, now seen corresponding path program 1 times
[2020-11-25 00:59:25,140 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:25,183 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:25,570 INFO  L134       CoverageAnalysis]: Checked inductivity of 1082 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 1082 trivial. 0 not checked.
[2020-11-25 00:59:25,571 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:59:25,571 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 00:59:25,573 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:25,573 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 00:59:25,574 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=154, Unknown=0, NotChecked=0, Total=182
[2020-11-25 00:59:25,574 INFO  L87              Difference]: Start difference. First operand 7268 states and 8135 transitions. cyclomatic complexity: 890 Second operand 14 states.
[2020-11-25 00:59:32,380 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:32,380 INFO  L93              Difference]: Finished difference Result 7312 states and 8172 transitions.
[2020-11-25 00:59:32,380 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 00:59:32,381 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7312 states and 8172 transitions.
[2020-11-25 00:59:32,393 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:59:32,404 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7312 states to 7312 states and 8172 transitions.
[2020-11-25 00:59:32,404 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1460
[2020-11-25 00:59:32,405 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1460
[2020-11-25 00:59:32,405 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7312 states and 8172 transitions.
[2020-11-25 00:59:32,409 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:32,409 INFO  L728         BuchiCegarLoop]: Abstraction has 7312 states and 8172 transitions.
[2020-11-25 00:59:32,414 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7312 states and 8172 transitions.
[2020-11-25 00:59:32,440 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7312 to 7158.
[2020-11-25 00:59:32,440 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7158 states.
[2020-11-25 00:59:32,446 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7158 states to 7158 states and 7965 transitions.
[2020-11-25 00:59:32,446 INFO  L751         BuchiCegarLoop]: Abstraction has 7158 states and 7965 transitions.
[2020-11-25 00:59:32,446 INFO  L631         BuchiCegarLoop]: Abstraction has 7158 states and 7965 transitions.
[2020-11-25 00:59:32,446 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 00:59:32,446 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7158 states and 7965 transitions.
[2020-11-25 00:59:32,453 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:59:32,453 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:32,453 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:32,455 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:32,455 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !(((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false
[L7566]   CALL        call __var_41 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7566]   RET         call __var_41 := FreshRefGenerator__success();
[L7567]   COND FALSE  !(revert)
[L7570]               assume Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7571]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] := true;
[L7572]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == zerointRefArr();
[L7573]               assume M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG] == __var_41;
[L7574]               assume sum[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] == 0;
[L7576]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:32,459 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:32,460 INFO  L82        PathProgramCache]: Analyzing trace with hash 1417698569, now seen corresponding path program 1 times
[2020-11-25 00:59:32,460 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:32,486 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:33,170 INFO  L134       CoverageAnalysis]: Checked inductivity of 1093 backedges. 105 proven. 6 refuted. 0 times theorem prover too weak. 982 trivial. 0 not checked.
[2020-11-25 00:59:33,171 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:59:33,171 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 00:59:33,171 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:33,171 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 00:59:33,171 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 00:59:33,172 INFO  L87              Difference]: Start difference. First operand 7158 states and 7965 transitions. cyclomatic complexity: 824 Second operand 26 states.
[2020-11-25 00:59:44,523 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:44,524 INFO  L93              Difference]: Finished difference Result 7312 states and 8147 transitions.
[2020-11-25 00:59:44,524 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 00:59:44,524 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7312 states and 8147 transitions.
[2020-11-25 00:59:44,537 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:59:44,548 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7312 states to 7312 states and 8147 transitions.
[2020-11-25 00:59:44,548 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1516
[2020-11-25 00:59:44,549 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1516
[2020-11-25 00:59:44,549 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7312 states and 8147 transitions.
[2020-11-25 00:59:44,552 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:44,552 INFO  L728         BuchiCegarLoop]: Abstraction has 7312 states and 8147 transitions.
[2020-11-25 00:59:44,557 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7312 states and 8147 transitions.
[2020-11-25 00:59:44,581 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7312 to 7158.
[2020-11-25 00:59:44,581 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7158 states.
[2020-11-25 00:59:44,587 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7158 states to 7158 states and 7965 transitions.
[2020-11-25 00:59:44,587 INFO  L751         BuchiCegarLoop]: Abstraction has 7158 states and 7965 transitions.
[2020-11-25 00:59:44,588 INFO  L631         BuchiCegarLoop]: Abstraction has 7158 states and 7965 transitions.
[2020-11-25 00:59:44,588 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-11-25 00:59:44,588 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7158 states and 7965 transitions.
[2020-11-25 00:59:44,594 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:59:44,594 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:44,594 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:44,596 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:44,596 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND FALSE  !(DType[this] == BLY)
[L7134]   COND TRUE   DType[this] == ERC20Pausable
[L7135]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6667]   COND TRUE   DType[this] == HxERC20
[L6668]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6668]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6669]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7135]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7136]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:44,601 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:44,601 INFO  L82        PathProgramCache]: Analyzing trace with hash 743384494, now seen corresponding path program 1 times
[2020-11-25 00:59:44,602 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:44,623 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:44,881 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1088 trivial. 0 not checked.
[2020-11-25 00:59:44,881 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:59:44,881 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 00:59:44,882 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:44,882 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 00:59:44,882 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 00:59:44,882 INFO  L87              Difference]: Start difference. First operand 7158 states and 7965 transitions. cyclomatic complexity: 824 Second operand 7 states.
[2020-11-25 00:59:44,987 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:44,987 INFO  L93              Difference]: Finished difference Result 7212 states and 8017 transitions.
[2020-11-25 00:59:44,987 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 00:59:44,987 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7212 states and 8017 transitions.
[2020-11-25 00:59:45,001 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:59:45,013 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7212 states to 7148 states and 7951 transitions.
[2020-11-25 00:59:45,013 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1404
[2020-11-25 00:59:45,014 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1404
[2020-11-25 00:59:45,014 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7148 states and 7951 transitions.
[2020-11-25 00:59:45,017 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:45,017 INFO  L728         BuchiCegarLoop]: Abstraction has 7148 states and 7951 transitions.
[2020-11-25 00:59:45,023 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7148 states and 7951 transitions.
[2020-11-25 00:59:45,046 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7148 to 7148.
[2020-11-25 00:59:45,046 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7148 states.
[2020-11-25 00:59:45,052 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7148 states to 7148 states and 7951 transitions.
[2020-11-25 00:59:45,052 INFO  L751         BuchiCegarLoop]: Abstraction has 7148 states and 7951 transitions.
[2020-11-25 00:59:45,053 INFO  L631         BuchiCegarLoop]: Abstraction has 7148 states and 7951 transitions.
[2020-11-25 00:59:45,053 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-11-25 00:59:45,053 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7148 states and 7951 transitions.
[2020-11-25 00:59:45,089 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:59:45,089 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:45,089 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:45,094 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:45,094 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false
[L7644]   CALL        call __var_45 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7644]   RET         call __var_45 := FreshRefGenerator__success();
[L7645]   COND FALSE  !(revert)
[L7648]               assume Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7649]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] := true;
[L7650]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == zerointRefArr();
[L7651]               assume M_Ref_Ref[timelockList_BLY[this]][from_s1322] == __var_45;
[L7652]               assume sum[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] == 0;
[L7654]   COND FALSE  !(Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:45,147 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:45,147 INFO  L82        PathProgramCache]: Analyzing trace with hash -870373437, now seen corresponding path program 1 times
[2020-11-25 00:59:45,148 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:45,172 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:45,836 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 96 proven. 6 refuted. 0 times theorem prover too weak. 987 trivial. 0 not checked.
[2020-11-25 00:59:45,836 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:59:45,837 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 00:59:45,837 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:45,837 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 00:59:45,837 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 00:59:45,837 INFO  L87              Difference]: Start difference. First operand 7148 states and 7951 transitions. cyclomatic complexity: 820 Second operand 26 states.
[2020-11-25 00:59:57,349 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:57,349 INFO  L93              Difference]: Finished difference Result 7324 states and 8149 transitions.
[2020-11-25 00:59:57,349 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 00:59:57,349 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7324 states and 8149 transitions.
[2020-11-25 00:59:57,361 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:59:57,372 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7324 states to 7324 states and 8149 transitions.
[2020-11-25 00:59:57,372 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1524
[2020-11-25 00:59:57,373 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1524
[2020-11-25 00:59:57,373 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7324 states and 8149 transitions.
[2020-11-25 00:59:57,377 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:57,377 INFO  L728         BuchiCegarLoop]: Abstraction has 7324 states and 8149 transitions.
[2020-11-25 00:59:57,381 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7324 states and 8149 transitions.
[2020-11-25 00:59:57,405 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7324 to 7160.
[2020-11-25 00:59:57,405 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7160 states.
[2020-11-25 00:59:57,411 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7160 states to 7160 states and 7960 transitions.
[2020-11-25 00:59:57,411 INFO  L751         BuchiCegarLoop]: Abstraction has 7160 states and 7960 transitions.
[2020-11-25 00:59:57,411 INFO  L631         BuchiCegarLoop]: Abstraction has 7160 states and 7960 transitions.
[2020-11-25 00:59:57,411 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-11-25 00:59:57,412 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7160 states and 7960 transitions.
[2020-11-25 00:59:57,418 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:59:57,418 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:57,418 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:57,419 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:57,419 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND FALSE  !(DType[this] == BLY)
[L6662]   COND FALSE  !(DType[this] == ERC20Pausable)
[L6667]   COND TRUE   DType[this] == HxERC20
[L6668]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6668]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6669]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:57,425 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:57,425 INFO  L82        PathProgramCache]: Analyzing trace with hash -576693724, now seen corresponding path program 1 times
[2020-11-25 00:59:57,425 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:57,446 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:57,711 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 1088 trivial. 0 not checked.
[2020-11-25 00:59:57,711 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 00:59:57,711 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 00:59:57,711 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:57,711 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 00:59:57,711 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 00:59:57,712 INFO  L87              Difference]: Start difference. First operand 7160 states and 7960 transitions. cyclomatic complexity: 817 Second operand 8 states.
[2020-11-25 00:59:57,828 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 00:59:57,828 INFO  L93              Difference]: Finished difference Result 7238 states and 8036 transitions.
[2020-11-25 00:59:57,829 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 00:59:57,829 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7238 states and 8036 transitions.
[2020-11-25 00:59:57,840 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:59:57,850 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7238 states to 7150 states and 7946 transitions.
[2020-11-25 00:59:57,850 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1402
[2020-11-25 00:59:57,851 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1402
[2020-11-25 00:59:57,851 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7150 states and 7946 transitions.
[2020-11-25 00:59:57,854 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 00:59:57,854 INFO  L728         BuchiCegarLoop]: Abstraction has 7150 states and 7946 transitions.
[2020-11-25 00:59:57,859 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7150 states and 7946 transitions.
[2020-11-25 00:59:57,883 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7150 to 7150.
[2020-11-25 00:59:57,883 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7150 states.
[2020-11-25 00:59:57,889 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7150 states to 7150 states and 7946 transitions.
[2020-11-25 00:59:57,889 INFO  L751         BuchiCegarLoop]: Abstraction has 7150 states and 7946 transitions.
[2020-11-25 00:59:57,889 INFO  L631         BuchiCegarLoop]: Abstraction has 7150 states and 7946 transitions.
[2020-11-25 00:59:57,889 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-11-25 00:59:57,889 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7150 states and 7946 transitions.
[2020-11-25 00:59:57,896 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 00:59:57,896 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 00:59:57,896 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 00:59:57,898 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 00:59:57,898 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND TRUE   choice == 18
[L12064]              gas := gas - 21000;
[L12065]  COND TRUE   gas >= 0
[L12066]              assume value_s1322 >= 0 && value_s1322 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12067]              assume msgvalue_MSG == 0;
[L12068]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3270]               havoc __exception;
[L3271]               revert := false;
[L3272]   COND FALSE  !(__exception)
[L3308]   CALL        call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7639]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7639]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7640]   COND FALSE  !(revert)
[L7643]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][from_s1322] == false)
[L7654]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][from_s1322]] > 0
[L7655]   CALL        call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L8249]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false
[L8250]   CALL        call __var_67 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L8250]   RET         call __var_67 := FreshRefGenerator__success();
[L8251]   COND FALSE  !(revert)
[L8254]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8255]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] := true;
[L8256]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == zerointRefArr();
[L8257]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1645] == __var_67;
[L8258]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]] == 0;
[L8260]               idx_s1645 := 0;
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7655]   RET         call __var_46 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322);
[L7656]   COND FALSE  !(revert)
[L7660]   COND TRUE   DType[this] == BLY
[L7661]   CALL        call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7125]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7125]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7126]   COND FALSE  !(revert)
[L7129]   COND TRUE   DType[this] == BLY
[L7130]   CALL        call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L6650]   CALL        call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6650]   RET         call __var_15 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _allowed_HxERC20[this][from_s760][msgsender_MSG], value_s760);
[L6651]   COND FALSE  !(revert)
[L6654]               sum__allowed1[from_s760] := sum__allowed1[from_s760] - _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6655]               _allowed_HxERC20[this][from_s760][msgsender_MSG] := __var_15;
[L6656]               sum__allowed1[from_s760] := sum__allowed1[from_s760] + _allowed_HxERC20[this][from_s760][msgsender_MSG];
[L6657]   COND TRUE   DType[this] == BLY
[L6658]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6658]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s760, to_s760, value_s760);
[L6659]   COND FALSE  !(revert)
[L6675]               assert { :EventEmitted "Approval_HxERC20" } true;
[L6676]               __ret_0_ := true;
[L7130]   RET         call __var_32 := transferFrom~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1074, to_s1074, value_s1074);
[L7131]   COND FALSE  !(revert)
[L7142]               __ret_0_ := __var_32;
[L7661]   RET         call __var_47 := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L7662]   COND FALSE  !(revert)
[L7668]               __ret_0_ := __var_47;
[L3308]   RET         call __ret_0_ := transferFrom~address~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L3309]               assume !revert && gas >= 0;
[L12068]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, from_s1322, to_s1322, value_s1322);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 00:59:57,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 00:59:57,903 INFO  L82        PathProgramCache]: Analyzing trace with hash 1016324911, now seen corresponding path program 1 times
[2020-11-25 00:59:57,904 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 00:59:57,924 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 00:59:58,320 INFO  L134       CoverageAnalysis]: Checked inductivity of 1089 backedges. 1 proven. 96 refuted. 0 times theorem prover too weak. 992 trivial. 0 not checked.
[2020-11-25 00:59:58,320 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 00:59:58,321 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-25 00:59:58,321 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 00:59:58,321 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 00:59:58,321 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=31, Invalid=179, Unknown=0, NotChecked=0, Total=210
[2020-11-25 00:59:58,322 INFO  L87              Difference]: Start difference. First operand 7150 states and 7946 transitions. cyclomatic complexity: 813 Second operand 15 states.
[2020-11-25 01:00:03,896 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:03,896 INFO  L93              Difference]: Finished difference Result 7293 states and 8107 transitions.
[2020-11-25 01:00:03,896 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 01:00:03,896 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7293 states and 8107 transitions.
[2020-11-25 01:00:03,907 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:00:03,917 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7293 states to 7293 states and 8107 transitions.
[2020-11-25 01:00:03,917 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1506
[2020-11-25 01:00:03,918 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1506
[2020-11-25 01:00:03,918 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7293 states and 8107 transitions.
[2020-11-25 01:00:03,921 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:03,921 INFO  L728         BuchiCegarLoop]: Abstraction has 7293 states and 8107 transitions.
[2020-11-25 01:00:03,926 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7293 states and 8107 transitions.
[2020-11-25 01:00:03,950 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7293 to 7159.
[2020-11-25 01:00:03,950 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7159 states.
[2020-11-25 01:00:03,956 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7159 states to 7159 states and 7961 transitions.
[2020-11-25 01:00:03,956 INFO  L751         BuchiCegarLoop]: Abstraction has 7159 states and 7961 transitions.
[2020-11-25 01:00:03,956 INFO  L631         BuchiCegarLoop]: Abstraction has 7159 states and 7961 transitions.
[2020-11-25 01:00:03,956 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-11-25 01:00:03,956 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7159 states and 7961 transitions.
[2020-11-25 01:00:03,962 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:00:03,962 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:03,962 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:03,964 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:03,964 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND FALSE  !(gas >= 0)
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:03,968 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:03,968 INFO  L82        PathProgramCache]: Analyzing trace with hash 1837644796, now seen corresponding path program 1 times
[2020-11-25 01:00:03,968 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:04,062 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:00:04,162 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:00:04,341 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:04,341 INFO  L82        PathProgramCache]: Analyzing trace with hash -615841729, now seen corresponding path program 1 times
[2020-11-25 01:00:04,342 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:04,344 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:00:04,350 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:00:04,350 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:00:04,350 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:00:04,351 INFO  L1008  eck$LassoCheckResult]: loop already infeasible
[2020-11-25 01:00:04,351 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:00:04,351 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:00:04,351 INFO  L87              Difference]: Start difference. First operand 7159 states and 7961 transitions. cyclomatic complexity: 819 Second operand 4 states.
[2020-11-25 01:00:04,824 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:00:04,824 INFO  L93              Difference]: Finished difference Result 7238 states and 7990 transitions.
[2020-11-25 01:00:04,824 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:00:04,824 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 7238 states and 7990 transitions.
[2020-11-25 01:00:04,844 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:00:04,858 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 7238 states to 7238 states and 7990 transitions.
[2020-11-25 01:00:04,858 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1406
[2020-11-25 01:00:04,858 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1406
[2020-11-25 01:00:04,858 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7238 states and 7990 transitions.
[2020-11-25 01:00:04,862 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:00:04,862 INFO  L728         BuchiCegarLoop]: Abstraction has 7238 states and 7990 transitions.
[2020-11-25 01:00:04,868 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7238 states and 7990 transitions.
[2020-11-25 01:00:04,897 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7238 to 7022.
[2020-11-25 01:00:04,897 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 7022 states.
[2020-11-25 01:00:04,904 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 7022 states to 7022 states and 7725 transitions.
[2020-11-25 01:00:04,904 INFO  L751         BuchiCegarLoop]: Abstraction has 7022 states and 7725 transitions.
[2020-11-25 01:00:04,904 INFO  L631         BuchiCegarLoop]: Abstraction has 7022 states and 7725 transitions.
[2020-11-25 01:00:04,904 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-11-25 01:00:04,904 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7022 states and 7725 transitions.
[2020-11-25 01:00:04,913 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:00:04,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:00:04,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:00:04,915 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:00:04,915 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  fail_transfer_BLY0 := false;
[L2]                  call_transfer_BLY0 := false;
[L2]      CALL        call main();
[L12188]              assume null == 0;
[L12189]  CALL        call this := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L12189]  RET         call this := FreshRefGenerator__success();
[L12190]              assume now >= 0;
[L12191]              assume DType[this] == BLY;
[L12192]              assume msgvalue_MSG >= 0;
[L12193]              gas := gas - 53000;
[L12194]  CALL        call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
[L12195]              assume !revert && gas >= 0;
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND FALSE  !(choice == 20)
[L12056]  COND FALSE  !(choice == 19)
[L12063]  COND FALSE  !(choice == 18)
[L12070]  COND FALSE  !(choice == 17)
[L12076]  COND FALSE  !(choice == 16)
[L12082]  COND FALSE  !(choice == 15)
[L12088]  COND FALSE  !(choice == 14)
[L12095]  COND FALSE  !(choice == 13)
[L12102]  COND FALSE  !(choice == 12)
[L12108]  COND FALSE  !(choice == 11)
[L12114]  COND FALSE  !(choice == 10)
[L12120]  COND FALSE  !(choice == 9)
[L12126]  COND FALSE  !(choice == 8)
[L12133]  COND FALSE  !(choice == 7)
[L12139]  COND FALSE  !(choice == 6)
[L12145]  COND FALSE  !(choice == 5)
[L12151]  COND TRUE   choice == 4
[L12152]              gas := gas - 21000;
[L12153]  COND TRUE   gas >= 0
[L12154]              assume value_s1410 >= 0 && value_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12155]              assume releaseTime_s1410 >= 0 && releaseTime_s1410 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12156]              assume msgvalue_MSG == 0;
[L12157]  CALL        call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L12198]  RET         call CorralChoice_BLY(this);
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND FALSE  !(choice == 32)
[L11983]  COND FALSE  !(choice == 31)
[L11989]  COND FALSE  !(choice == 30)
[L11995]  COND FALSE  !(choice == 29)
[L12001]  COND FALSE  !(choice == 28)
[L12007]  COND FALSE  !(choice == 27)
[L12013]  COND FALSE  !(choice == 26)
[L12019]  COND FALSE  !(choice == 25)
[L12025]  COND FALSE  !(choice == 24)
[L12031]  COND FALSE  !(choice == 23)
[L12037]  COND FALSE  !(choice == 22)
[L12043]  COND FALSE  !(choice == 21)
[L12049]  COND TRUE   choice == 20
[L12050]              gas := gas - 21000;
[L12051]  COND TRUE   gas >= 0
[L12052]              assume value_s1288 >= 0 && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L12053]              assume msgvalue_MSG == 0;
[L12054]  CALL        call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L12198]  RET         call CorralChoice_BLY(this);

Loop:
[L12198]  CALL        call CorralChoice_BLY(this);
[L11895]              havoc msgsender_MSG;
[L11896]              havoc msgvalue_MSG;
[L11897]              havoc choice;
[L11898]              havoc __ret_0_owner;
[L11899]              havoc __ret_0_newOwner;
[L11900]              havoc account_s293;
[L11901]              havoc __ret_0_isOwner;
[L11902]              havoc _newOwner_s313;
[L11903]              havoc __ret_0_acceptOwnership;
[L11904]              havoc account_s390;
[L11905]              havoc __ret_0_isPauser;
[L11906]              havoc account_s402;
[L11907]              havoc account_s414;
[L11908]              havoc __ret_0_paused;
[L11909]              havoc to_s1288;
[L11910]              havoc value_s1288;
[L11911]              havoc __ret_0_transfer;
[L11912]              havoc spender_s711;
[L11913]              havoc value_s711;
[L11914]              havoc __ret_0_approve;
[L11915]              havoc from_s1322;
[L11916]              havoc to_s1322;
[L11917]              havoc value_s1322;
[L11918]              havoc __ret_0_transferFrom;
[L11919]              havoc __ret_0_totalSupply;
[L11920]              havoc owner_s1254;
[L11921]              havoc __ret_0_balanceOf;
[L11922]              havoc owner_s656;
[L11923]              havoc spender_s656;
[L11924]              havoc __ret_0_allowance;
[L11925]              havoc spender_s809;
[L11926]              havoc addedValue_s809;
[L11927]              havoc __ret_0_increaseAllowance;
[L11928]              havoc spender_s858;
[L11929]              havoc subtractedValue_s858;
[L11930]              havoc __ret_0_decreaseAllowance;
[L11931]              havoc name_s1105;
[L11932]              havoc symbol_s1105;
[L11933]              havoc decimals_s1105;
[L11934]              havoc __ret_0_name;
[L11935]              havoc __ret_0_symbol;
[L11936]              havoc __ret_0_decimals;
[L11937]              havoc __ret_0_implementation;
[L11938]              havoc arg1675_s0;
[L11939]              havoc arg1676_s0;
[L11940]              havoc __ret_0_timelockList;
[L11941]              havoc arg1677_s0;
[L11942]              havoc __ret_0_frozenAccount;
[L11943]              havoc holder_s1351;
[L11944]              havoc __ret_0_freezeAccount;
[L11945]              havoc holder_s1379;
[L11946]              havoc __ret_0_unfreezeAccount;
[L11947]              havoc holder_s1410;
[L11948]              havoc value_s1410;
[L11949]              havoc releaseTime_s1410;
[L11950]              havoc __ret_0_lock;
[L11951]              havoc holder_s1439;
[L11952]              havoc value_s1439;
[L11953]              havoc releaseTime_s1439;
[L11954]              havoc __ret_0_transferWithLock;
[L11955]              havoc holder_s1468;
[L11956]              havoc idx_s1468;
[L11957]              havoc __ret_0_unlock;
[L11958]              havoc _newImplementation_s1486;
[L11959]              havoc tmpNow;
[L11960]              havoc gas;
[L11961]              assume gas > 4000000 && gas <= 8000000;
[L11962]              tmpNow := now;
[L11963]              havoc now;
[L11964]              assume now > tmpNow;
[L11965]              assume msgsender_MSG != null;
[L11966]              assume DType[msgsender_MSG] != HxSafeMath;
[L11967]              assume DType[msgsender_MSG] != Roles;
[L11968]              assume DType[msgsender_MSG] != HxOwnable;
[L11969]              assume DType[msgsender_MSG] != PauserRole;
[L11970]              assume DType[msgsender_MSG] != Pausable;
[L11971]              assume DType[msgsender_MSG] != IERC20;
[L11972]              assume DType[msgsender_MSG] != HxERC20;
[L11973]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11974]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11975]              assume DType[msgsender_MSG] != BLY;
[L11976]              Alloc[msgsender_MSG] := true;
[L11977]  COND TRUE   choice == 32
[L11978]              gas := gas - 21000;
[L11979]  COND TRUE   gas >= 0
[L11980]              assume msgvalue_MSG == 0;
[L11981]  CALL        call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND FALSE  !(__exception)
[L652]    CALL        call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]               __ret_0_ := owner_HxOwnable[this];
[L652]    RET         call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L653]                assume !revert && gas >= 0;
[L11981]  RET         call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);
[L12198]  RET         call CorralChoice_BLY(this);

[2020-11-25 01:00:04,919 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:04,919 INFO  L82        PathProgramCache]: Analyzing trace with hash 1837644796, now seen corresponding path program 2 times
[2020-11-25 01:00:04,920 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:05,011 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:00:05,111 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:00:05,281 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:05,281 INFO  L82        PathProgramCache]: Analyzing trace with hash 1691817326, now seen corresponding path program 1 times
[2020-11-25 01:00:05,282 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:05,287 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:00:05,291 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:00:05,300 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:00:05,301 INFO  L82        PathProgramCache]: Analyzing trace with hash -174207063, now seen corresponding path program 1 times
[2020-11-25 01:00:05,302 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:00:05,409 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:00:05,522 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 883 to 1759
[2020-11-25 01:00:06,007 WARN  L188               SmtUtils]: Spent 150.00 ms on a formula simplification that was a NOOP. DAG size: 399
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 10513 to 21023
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2179 to 4357
[2020-11-25 01:00:06,211 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-25 01:00:07,024 WARN  L188               SmtUtils]: Spent 133.00 ms on a formula simplification. DAG size of input: 231 DAG size of output: 217
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:00:08,638 WARN  L188               SmtUtils]: Spent 1.30 s on a formula simplification. DAG size of input: 455 DAG size of output: 429
Garbage collection #1: 157 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9883 to 19763
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:00:08,816 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification that was a NOOP. DAG size: 260
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
[2020-11-25 01:00:09,077 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 225 DAG size of output: 224
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 01:00:09,548 WARN  L188               SmtUtils]: Spent 419.00 ms on a formula simplification that was a NOOP. DAG size: 423
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9181 to 18353
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
[2020-11-25 01:00:09,768 WARN  L188               SmtUtils]: Spent 215.00 ms on a formula simplification that was a NOOP. DAG size: 383
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 01:00:10,008 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 153
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 01:00:10,163 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 172 DAG size of output: 170
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
[2020-11-25 01:00:10,656 WARN  L188               SmtUtils]: Spent 247.00 ms on a formula simplification. DAG size of input: 321 DAG size of output: 316
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 01:00:10,773 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification that was a NOOP. DAG size: 298
[2020-11-25 01:00:11,134 WARN  L188               SmtUtils]: Spent 355.00 ms on a formula simplification. DAG size of input: 438 DAG size of output: 351
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-25 01:00:11,508 WARN  L188               SmtUtils]: Spent 283.00 ms on a formula simplification that was a NOOP. DAG size: 477
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 01:00:11,710 WARN  L188               SmtUtils]: Spent 193.00 ms on a formula simplification that was a NOOP. DAG size: 391
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 01:00:12,576 WARN  L188               SmtUtils]: Spent 200.00 ms on a formula simplification. DAG size of input: 192 DAG size of output: 179
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
[2020-11-25 01:00:12,721 WARN  L188               SmtUtils]: Spent 109.00 ms on a formula simplification. DAG size of input: 146 DAG size of output: 141
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 01:00:13,016 WARN  L188               SmtUtils]: Spent 233.00 ms on a formula simplification. DAG size of input: 163 DAG size of output: 152
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
[2020-11-25 01:00:13,779 WARN  L188               SmtUtils]: Spent 664.00 ms on a formula simplification. DAG size of input: 331 DAG size of output: 326
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 01:00:14,184 WARN  L188               SmtUtils]: Spent 401.00 ms on a formula simplification that was a NOOP. DAG size: 307
[2020-11-25 01:00:15,270 WARN  L188               SmtUtils]: Spent 1.08 s on a formula simplification. DAG size of input: 398 DAG size of output: 359
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-25 01:00:15,608 WARN  L188               SmtUtils]: Spent 328.00 ms on a formula simplification that was a NOOP. DAG size: 253
[2020-11-25 01:00:16,282 WARN  L188               SmtUtils]: Spent 672.00 ms on a formula simplification that was a NOOP. DAG size: 481
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12073 to 24137
[2020-11-25 01:00:16,920 WARN  L188               SmtUtils]: Spent 628.00 ms on a formula simplification that was a NOOP. DAG size: 392
[2020-11-25 01:00:30,701 WARN  L188               SmtUtils]: Spent 13.78 s on a formula simplification. DAG size of input: 1053 DAG size of output: 1004
Garbage collection #1: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #2: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #3: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #4: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #5: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
Garbage collection #6: 12541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12541 to 25073
Garbage collection #7: 25073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 25073 to 50131
Garbage collection #8: 50131 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 50131 to 100129
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 01:00:31,888 WARN  L188               SmtUtils]: Spent 1.13 s on a formula simplification that was a NOOP. DAG size: 424
[2020-11-25 01:00:34,143 WARN  L188               SmtUtils]: Spent 2.22 s on a formula simplification that was a NOOP. DAG size: 549
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-25 01:00:35,290 WARN  L188               SmtUtils]: Spent 1.14 s on a formula simplification that was a NOOP. DAG size: 424
[2020-11-25 01:00:39,334 WARN  L188               SmtUtils]: Spent 4.04 s on a formula simplification. DAG size of input: 551 DAG size of output: 550
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-25 01:00:41,436 WARN  L188               SmtUtils]: Spent 2.10 s on a formula simplification that was a NOOP. DAG size: 546
[2020-11-25 01:00:41,527 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:00:41,624 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 01:00:41,640 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:00:41 BasicIcfg
[2020-11-25 01:00:41,641 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:00:41,641 INFO  L168              Benchmark]: Toolchain (without parser) took 141262.16 ms. Allocated memory was 1.0 GB in the beginning and 5.5 GB in the end (delta: 4.5 GB). Free memory was 919.1 MB in the beginning and 1.5 GB in the end (delta: -556.3 MB). Peak memory consumption was 4.7 GB. Max. memory is 15.3 GB.
[2020-11-25 01:00:41,641 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:00:41,641 INFO  L168              Benchmark]: Boogie Preprocessor took 167.72 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 886.9 MB in the end (delta: 32.2 MB). Peak memory consumption was 32.2 MB. Max. memory is 15.3 GB.
[2020-11-25 01:00:41,642 INFO  L168              Benchmark]: UtopiaSpecLang took 95.53 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 876.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:00:41,642 INFO  L168              Benchmark]: Boogie Printer took 30.43 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 870.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:00:41,642 INFO  L168              Benchmark]: RCFGBuilder took 1415.95 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 870.8 MB in the beginning and 757.4 MB in the end (delta: 113.4 MB). Peak memory consumption was 177.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:00:41,642 INFO  L168              Benchmark]: UtopiaLTL2Aut took 35.59 ms. Allocated memory is still 1.1 GB. Free memory was 757.4 MB in the beginning and 747.9 MB in the end (delta: 9.4 MB). Peak memory consumption was 9.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:00:41,642 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3275.74 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 450.4 MB). Free memory was 747.9 MB in the beginning and 819.8 MB in the end (delta: -71.9 MB). Peak memory consumption was 378.5 MB. Max. memory is 15.3 GB.
[2020-11-25 01:00:41,643 INFO  L168              Benchmark]: BlockEncodingV2 took 310.47 ms. Allocated memory is still 1.5 GB. Free memory was 819.8 MB in the beginning and 658.2 MB in the end (delta: 161.7 MB). Peak memory consumption was 161.7 MB. Max. memory is 15.3 GB.
[2020-11-25 01:00:41,643 INFO  L168              Benchmark]: BuchiAutomizer took 135927.65 ms. Allocated memory was 1.5 GB in the beginning and 5.5 GB in the end (delta: 4.0 GB). Free memory was 658.2 MB in the beginning and 1.5 GB in the end (delta: -817.3 MB). Peak memory consumption was 3.9 GB. Max. memory is 15.3 GB.
[2020-11-25 01:00:41,645 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    11452 locations, 20742 edges
  - StatisticsResult: Encoded RCFG
    11204 locations, 20137 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 167.72 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 886.9 MB in the end (delta: 32.2 MB). Peak memory consumption was 32.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 95.53 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 876.1 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 30.43 ms. Allocated memory is still 1.0 GB. Free memory was 876.1 MB in the beginning and 870.8 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1415.95 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 64.5 MB). Free memory was 870.8 MB in the beginning and 757.4 MB in the end (delta: 113.4 MB). Peak memory consumption was 177.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 35.59 ms. Allocated memory is still 1.1 GB. Free memory was 757.4 MB in the beginning and 747.9 MB in the end (delta: 9.4 MB). Peak memory consumption was 9.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3275.74 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 450.4 MB). Free memory was 747.9 MB in the beginning and 819.8 MB in the end (delta: -71.9 MB). Peak memory consumption was 378.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 310.47 ms. Allocated memory is still 1.5 GB. Free memory was 819.8 MB in the beginning and 658.2 MB in the end (delta: 161.7 MB). Peak memory consumption was 161.7 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 135927.65 ms. Allocated memory was 1.5 GB in the beginning and 5.5 GB in the end (delta: 4.0 GB). Free memory was 658.2 MB in the beginning and 1.5 GB in the end (delta: -817.3 MB). Peak memory consumption was 3.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4614 locations, 6376 edges
  - StatisticsResult: BuchiProgram size
    11452 locations, 20742 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 39 terminating modules (39 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.39 modules have a trivial ranking function, the largest among these consists of 26 locations. The remainder module has 7022 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 135.7s and 40 iterations.  TraceHistogramMax:8. Analysis of lassos took 48.2s. Construction of modules took 64.5s. BÃ¼chi inclusion checks took 19.1s. Highest rank in rank-based complementation 0. Minimization of det autom 39. Minimization of nondet autom 0. Automata minimization 1.8s AutomataMinimizationTime, 39 MinimizatonAttempts, 4615 StatesRemovedByMinimization, 26 NontrivialMinimizations. Non-live state removal took 1.1s Buchi closure took 0.0s. Biggest automaton had 7951 states and ocurred in iteration 4.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 282218 SDtfs, 147371 SDslu, 1071904 SDs, 0 SdLazy, 824267 SolverSat, 22234 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 64.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI1 SFLT0 conc0 concLT0 SILN0 SILU38 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(1000000000000000000000000022) = (new BLY).gas(2).value(1)({from : 1000000000000000000000000003});
[L3014]               havoc __exception;
[L3015]               revert := false;
[L3016]   COND FALSE  !(__exception)
[L3052]   CALL        call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L7344]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7344]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7345]   COND FALSE  !(revert)
[L7348]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7188]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7188]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7163]               assume msgsender_MSG != null;
[L7164]               Balance[this] := 0;
[L7165]               _name_ERC20Detailed[this] := -1412326813;
[L7166]               _symbol_ERC20Detailed[this] := -1412326813;
[L7167]               _decimals_ERC20Detailed[this] := 0;
[L7169]               _name_ERC20Detailed[this] := name_s1105;
[L7170]               _symbol_ERC20Detailed[this] := symbol_s1105;
[L7171]               _decimals_ERC20Detailed[this] := decimals_s1105;
[L7192]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1105, symbol_s1105, decimals_s1105);
[L7193]   COND FALSE  !(revert)
[L7348]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 249484120, 92481062, 18);
[L7349]   COND FALSE  !(revert)
[L7352]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7352]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7353]   COND FALSE  !(revert)
[L7356]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7356]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7357]   COND FALSE  !(revert)
[L7360]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7360]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7361]   COND FALSE  !(revert)
[L7364]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7364]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7365]   COND FALSE  !(revert)
[L7368]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L7020]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7021]   COND FALSE  !(revert)
[L7024]   CALL        call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6490]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6444]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6429]               assume msgsender_MSG != null;
[L6430]               Balance[this] := 0;
[L6444]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6445]   COND FALSE  !(revert)
[L6490]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6491]   COND FALSE  !(revert)
[L6494]   CALL        call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6466]               assume msgsender_MSG != null;
[L6467]               Balance[this] := 0;
[L6468]               _balances_HxERC20[this] := zeroRefintArr();
[L6469]               sum__balances0[this] := 0;
[L6470]               _allowed_HxERC20[this] := zeroRefRefintArr();
[L6471]               sum__allowed1[this] := 0;
[L6472]               _totalSupply_HxERC20[this] := 0;
[L6494]   RET         call HxERC20_HxERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6495]   COND FALSE  !(revert)
[L7024]   RET         call HxERC20_HxERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7025]   COND FALSE  !(revert)
[L7028]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L7028]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7029]   COND FALSE  !(revert)
[L7032]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L7032]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7033]   COND FALSE  !(revert)
[L7036]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6338]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6338]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6056]   CALL        call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5857]   CALL        call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5835]               assume msgsender_MSG != null;
[L5836]               Balance[this] := 0;
[L5837]               owner_HxOwnable[this] := null;
[L5838]               newOwner_HxOwnable[this] := null;
[L5840]               owner_HxOwnable[this] := msgsender_MSG;
[L5841]               __var_6 := null;
[L5842]               newOwner_HxOwnable[this] := __var_6;
[L5857]   RET         call HxOwnable_HxOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5858]   COND FALSE  !(revert)
[L6056]   RET         call HxOwnable_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6057]   COND FALSE  !(revert)
[L6060]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6006]               assume msgsender_MSG != null;
[L6007]               Balance[this] := 0;
[L6009]   CALL        call __var_10 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L6009]   RET         call __var_10 := FreshRefGenerator__success();
[L6010]   COND FALSE  !(revert)
[L6013]               _pausers_PauserRole[this] := __var_10;
[L6015]   COND TRUE   DType[this] == BLY
[L6016]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6276]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L5737]               __var_1 := null;
[L5738]   COND FALSE  !(!(account_s164 != null))
[L5742]   CALL        call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L5742]   RET         call __var_2 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s164, account_s164);
[L5743]   COND FALSE  !(revert)
[L5746]   COND FALSE  !(!!__var_2)
[L5750]               M_Ref_bool[bearer_Roles.Role[role_s164]][account_s164] := true;
[L6276]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s439);
[L6277]   COND FALSE  !(revert)
[L6280]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L6016]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6017]   COND FALSE  !(revert)
[L6060]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6061]   COND FALSE  !(revert)
[L6342]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6313]               assume msgsender_MSG != null;
[L6314]               Balance[this] := 0;
[L6315]               _paused_Pausable[this] := false;
[L6317]               _paused_Pausable[this] := false;
[L6346]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7036]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7037]   COND FALSE  !(revert)
[L7040]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6985]               assume msgsender_MSG != null;
[L6986]               Balance[this] := 0;
[L7040]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7041]   COND FALSE  !(revert)
[L7368]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7369]   COND FALSE  !(revert)
[L7372]   CALL        call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7273]               assume msgsender_MSG != null;
[L7274]               Balance[this] := 0;
[L7275]               implementation_BLY[this] := null;
[L7277]   CALL        call __var_36 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7277]   RET         call __var_36 := FreshRefGenerator__success();
[L7278]   COND FALSE  !(revert)
[L7281]               timelockList_BLY[this] := __var_36;
[L7283]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]] := zeroRefboolArr();
[L7284]               frozenAccount_BLY[this] := zeroRefboolArr();
[L7287]               assume Balance[msgsender_MSG] >= msgvalue_MSG;
[L7288]               Balance[msgsender_MSG] := Balance[msgsender_MSG] - msgvalue_MSG;
[L7289]               Balance[this] := Balance[this] + msgvalue_MSG;
[L7291]               __var_35 := 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7292]   COND TRUE   DType[this] == BLY
[L7293]   CALL        call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L6844]               __var_23 := null;
[L6845]   COND FALSE  !(!(account_s946 != null))
[L6849]   CALL        call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6849]   RET         call __var_24 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _totalSupply_HxERC20[this], value_s946);
[L6850]   COND FALSE  !(revert)
[L6853]               _totalSupply_HxERC20[this] := __var_24;
[L6854]   CALL        call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6854]   RET         call __var_25 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][account_s946], value_s946);
[L6855]   COND FALSE  !(revert)
[L6858]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][account_s946];
[L6859]               _balances_HxERC20[this][account_s946] := __var_25;
[L6860]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][account_s946];
[L6861]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L7293]   RET         call _mint~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 1000000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7294]   COND FALSE  !(revert)
[L7372]   RET         call BLY_BLY_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7373]   COND FALSE  !(revert)
[L3052]   RET         call BLY_BLY__success(this, msgsender_MSG, msgvalue_MSG);
[L3053]               assume !revert && gas >= 0;
[L12194]  RET         call BLY_BLY(this, msgsender_MSG, msgvalue_MSG);
BLY(1000000000000000000000000022).lock~address~uint256~uint256.gas(3979002)({from : 1000000000000000000000000003, holder : 1000000000000000000000000003, value : 14, releaseTime : 3});
[L3520]               havoc __exception;
[L3521]               revert := false;
[L3522]   COND FALSE  !(__exception)
[L3558]   CALL        call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7756]   CALL        call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10688]  COND TRUE   DType[this] == BLY
[L10689]  CALL        call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6080]   CALL        call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L5808]               __var_5 := null;
[L5809]   COND FALSE  !(!(account_s218 != null))
[L5813]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s218]][account_s218];
[L6080]   RET         call __var_13 := has~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s390);
[L6081]   COND FALSE  !(revert)
[L6084]               __ret_0_ := __var_13;
[L10689]  RET         call __var_11 := isPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10690]  COND FALSE  !(revert)
[L10711]  COND TRUE   DType[this] == BLY
[L10712]  CALL        call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5876]   COND TRUE   account_s293 == owner_HxOwnable[this]
[L5877]               __ret_0_ := true;
[L10712]  RET         call __var_12 := isOwner~address_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10713]  COND FALSE  !(revert)
[L10734]  COND FALSE  !(!(__var_11 || __var_12))
[L7756]   RET         call onlyPauser_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7757]   COND FALSE  !(revert)
[L7760]   COND FALSE  !(!(_balances_HxERC20[this][holder_s1410] >= value_s1410))
[L7764]   CALL        call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7963]   CALL        call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L7963]   RET         call __var_53 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1527], value_s1527);
[L7964]   COND FALSE  !(revert)
[L7967]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1527];
[L7968]               _balances_HxERC20[this][holder_s1527] := __var_53;
[L7969]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1527];
[L7970]   COND TRUE   alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] == false
[L7971]   CALL        call __var_54 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7971]   RET         call __var_54 := FreshRefGenerator__success();
[L7972]   COND FALSE  !(revert)
[L7975]               assume Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7976]               alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1527] := true;
[L7977]               assume M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == zerointRefArr();
[L7978]               assume M_Ref_Ref[timelockList_BLY[this]][holder_s1527] == __var_54;
[L7979]               assume sum[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] == 0;
[L7981]   CALL        call __var_56 := FreshRefGenerator__success();
[L5497]               havoc newRef;
[L5498]               assume Alloc[newRef] == false;
[L5499]               Alloc[newRef] := true;
[L5500]               assume newRef != null;
[L7981]   RET         call __var_56 := FreshRefGenerator__success();
[L7982]   COND FALSE  !(revert)
[L7985]               assume DType[__var_56] == BLY.LockInfo;
[L7986]   CALL        call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L5521]               _releaseTime_BLY.LockInfo[this] := _releaseTime;
[L5522]               _amount_BLY.LockInfo[this] := _amount;
[L7986]   RET         call BLY.LockInfo_ctor__success(__var_56, this, 0, releaseTime_s1527, value_s1527);
[L7987]   COND FALSE  !(revert)
[L7990]               __var_55 := __var_56;
[L7991]               __var_58 := Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]];
[L7992]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]][__var_58] := __var_55;
[L7993]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1527]] := __var_58 + 1;
[L7994]               assert { :EventEmitted "Lock_BLY" } true;
[L7995]               __ret_0_ := true;
[L7764]   RET         call __var_49 := _lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L7765]   COND FALSE  !(revert)
[L7768]               __ret_0_ := true;
[L3558]   RET         call __ret_0_ := lock~address~uint256~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
[L3559]               assume !revert && gas >= 0;
[L12157]  RET         call __ret_0_lock := lock~address~uint256~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, holder_s1410, value_s1410, releaseTime_s1410);
BLY(1000000000000000000000000022).transfer~address~uint256.gas(3979003)({from : 1000000000000000000000000003, to : 1000000000000000000000000017, value : 999999999999999999999999993});
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume ((((((msgsender_MSG != to_s1288 && (value_s1288 > _balances_HxERC20[this][msgsender_MSG] || _balances_HxERC20[this][to_s1288] + value_s1288 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && value_s1288 >= 0) && value_s1288 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][to_s1288] >= 0) && _balances_HxERC20[this][to_s1288] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_HxERC20[this][msgsender_MSG] >= 0) && _balances_HxERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_transfer_BLY0 := true;
[L2]                  call_transfer_BLY0 := false;
[L2]                  revert := revert_hold;
[L3182]               havoc __exception;
[L3183]               revert := false;
[L3184]   COND FALSE  !(__exception)
[L3220]   CALL        call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7561]   CALL        call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L10782]  COND FALSE  !(!!frozenAccount_BLY[this][_holder_s1185])
[L7561]   RET         call notFrozen_pre__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7562]   COND FALSE  !(revert)
[L7565]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][msgsender_MSG] == false)
[L7576]   COND TRUE   Length[M_Ref_Ref[timelockList_BLY[this]][msgsender_MSG]] > 0
[L7577]   CALL        call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L8249]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8260]               idx_s1645 := 0;
[L8261]   COND TRUE   idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]]
[L8263]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1645] == false)
[L8274]   COND TRUE   _releaseTime_BLY.LockInfo[M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]][idx_s1645]] <= now
[L8275]   CALL        call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8108]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8119]               lockinfo_s1600 := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600];
[L8120]               releaseAmount_s1600 := _amount_BLY.LockInfo[lockinfo_s1600];
[L8121]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8132]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8143]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8154]   CALL        call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L8154]   RET         call __var_62 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]], 1);
[L8155]   COND FALSE  !(revert)
[L8158]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8169]               M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][idx_s1600] := M_int_Ref[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]][__var_62];
[L8170]   COND FALSE  !(alloc_timelockList_BLY_lvl0[timelockList_BLY[this]][holder_s1600] == false)
[L8181]               Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] := (Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1600]] - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8182]               assert { :EventEmitted "Unlock_BLY" } true;
[L8183]   CALL        call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L8183]   RET         call __var_66 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][holder_s1600], releaseAmount_s1600);
[L8184]   COND FALSE  !(revert)
[L8187]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][holder_s1600];
[L8188]               _balances_HxERC20[this][holder_s1600] := __var_66;
[L8189]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][holder_s1600];
[L8190]               __ret_0_ := true;
[L8275]   RET         call __var_69 := _unlock~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, holder_s1645, idx_s1645);
[L8276]   COND FALSE  !(revert)
[L8279]   COND TRUE   __var_69
[L8280]               idx_s1645 := (idx_s1645 - 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8283]               idx_s1645 := (idx_s1645 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8284]   COND FALSE  !(gas < 0)
[L8261]   COND FALSE  !(idx_s1645 < Length[M_Ref_Ref[timelockList_BLY[this]][holder_s1645]])
[L8288]               __ret_0_ := true;
[L7577]   RET         call __var_42 := _autoUnlock~address_BLY__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L7578]   COND FALSE  !(revert)
[L7582]   COND TRUE   DType[this] == BLY
[L7583]   CALL        call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7075]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L10750]  COND FALSE  !(!!_paused_Pausable[this])
[L7075]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   COND TRUE   DType[this] == BLY
[L7080]   CALL        call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L6562]   COND TRUE   DType[this] == BLY
[L6563]   CALL        call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6793]               __var_20 := null;
[L6794]   COND FALSE  !(!(to_s904 != null))
[L6798]   CALL        call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L5628]   COND FALSE  !(!(b_s82 <= a_s82))
[L5632]               c_s82 := (a_s82 - b_s82) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5633]               __ret_0_ := c_s82;
[L6798]   RET         call __var_21 := sub~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][from_s904], value_s904);
[L6799]   COND FALSE  !(revert)
[L6802]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][from_s904];
[L6803]               _balances_HxERC20[this][from_s904] := __var_21;
[L6804]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][from_s904];
[L6805]   CALL        call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L5652]               c_s106 := (a_s106 + b_s106) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5653]   COND FALSE  !(!(c_s106 >= a_s106))
[L5657]               __ret_0_ := c_s106;
[L6805]   RET         call __var_22 := add~uint256~uint256_HxSafeMath__success(this, this, 0, _balances_HxERC20[this][to_s904], value_s904);
[L6806]   COND FALSE  !(revert)
[L6809]               sum__balances0[this] := sum__balances0[this] - _balances_HxERC20[this][to_s904];
[L6810]               _balances_HxERC20[this][to_s904] := __var_22;
[L6811]               sum__balances0[this] := sum__balances0[this] + _balances_HxERC20[this][to_s904];
[L6812]               assert { :EventEmitted "Transfer_HxERC20" } true;
[L6563]   RET         call _transfer~address~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, to_s675, value_s675);
[L6564]   COND FALSE  !(revert)
[L6580]               __ret_0_ := true;
[L7080]   RET         call __var_30 := transfer~address~uint256_HxERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1053, value_s1053);
[L7081]   COND FALSE  !(revert)
[L7092]               __ret_0_ := __var_30;
[L7583]   RET         call __var_43 := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L7584]   COND FALSE  !(revert)
[L7590]               __ret_0_ := __var_43;
[L3220]   RET         call __ret_0_ := transfer~address~uint256_BLY__success(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);
[L3221]               assume !revert && gas >= 0;
[L12054]  RET         call __ret_0_transfer := transfer~address~uint256_BLY(this, msgsender_MSG, msgvalue_MSG, to_s1288, value_s1288);

Loop:
HxOwnable(1000000000000000000000000022).owner.gas(3979001)({from : 1000000000000000000000000006});
[L614]                havoc __exception;
[L615]                revert := false;
[L616]    COND FALSE  !(__exception)
[L652]    CALL        call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L5948]               __ret_0_ := owner_HxOwnable[this];
[L652]    RET         call __ret_0_ := owner_HxOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L653]                assume !revert && gas >= 0;
[L11981]  RET         call __ret_0_owner := owner_HxOwnable(this, msgsender_MSG, msgvalue_MSG);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
