This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 08:45:58,912 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 08:45:58,914 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 08:45:58,925 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 08:45:58,925 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 08:45:58,926 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 08:45:58,927 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 08:45:58,929 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 08:45:58,931 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 08:45:58,931 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 08:45:58,932 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 08:45:58,933 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 08:45:58,934 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 08:45:58,934 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 08:45:58,935 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 08:45:58,936 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 08:45:58,936 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 08:45:58,938 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 08:45:58,940 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 08:45:58,941 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 08:45:58,942 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 08:45:58,942 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 08:45:58,945 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 08:45:58,945 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 08:45:58,945 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 08:45:58,945 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 08:45:58,946 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 08:45:58,946 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 08:45:58,947 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 08:45:58,947 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 08:45:58,947 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 08:45:58,948 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 08:45:58,948 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 08:45:58,949 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 08:45:58,950 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 08:45:58,950 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 08:45:58,950 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 08:45:58,951 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 08:45:58,951 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 08:45:58,951 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 08:45:58,952 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 08:45:58,952 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 08:45:58,960 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 08:45:58,960 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 08:45:58,961 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 08:45:58,962 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 08:45:58,962 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 08:45:58,962 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 08:45:58,962 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 08:45:58,962 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 08:45:58,962 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 08:45:58,962 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 08:45:58,962 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 08:45:58,963 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 08:45:58,963 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 08:45:58,963 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 08:45:58,963 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 08:45:58,963 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 08:45:58,963 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 08:45:58,963 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 08:45:58,963 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 08:45:58,963 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 08:45:58,964 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 08:45:58,964 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 08:45:58,964 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 08:45:58,964 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 08:45:58,964 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 08:45:58,964 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 08:45:58,987 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 08:45:58,997 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 08:45:58,999 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 08:45:59,001 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 08:45:59,002 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 08:45:59,003 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl
[2020-11-25 08:45:59,003 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl'
[2020-11-25 08:45:59,130 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 08:45:59,132 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 08:45:59,132 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 08:45:59,132 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 08:45:59,132 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 08:45:59,149 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/1) ...
[2020-11-25 08:45:59,151 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/1) ...
[2020-11-25 08:45:59,201 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/1) ...
[2020-11-25 08:45:59,202 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/1) ...
[2020-11-25 08:45:59,237 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/1) ...
[2020-11-25 08:45:59,266 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/1) ...
[2020-11-25 08:45:59,283 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/1) ...
[2020-11-25 08:45:59,303 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 08:45:59,304 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 08:45:59,304 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 08:45:59,306 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 08:45:59,310 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/1) ...
[2020-11-25 08:45:59,337 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:45:59,348 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:45:59,357 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:45:59,370 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s1061 && p1!=to_s1061 ) && ( p2!=from_s1061 || p3!=msg.sender ) ) && from_s1061!=to_s1061 ) && value_s1061<=_balances_ERC20[this][from_s1061] ) && value_s1061<=_allowances_ERC20[this][from_s1061][msg.sender] ) && ( _balances_ERC20[this][to_s1061] + value_s1061 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s1061>=0 ) && value_s1061<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1061]>=0 ) && _balances_ERC20[this][to_s1061]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s1061]>=0 ) && _balances_ERC20[this][from_s1061]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][from_s1061][msg.sender]>=0 ) && _allowances_ERC20[this][from_s1061][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 08:45:59,374 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][from_s1061]==( ( old(_balances_ERC20[this][from_s1061]) ) - value_s1061 ) ) && _balances_ERC20[this][to_s1061]==( ( old(_balances_ERC20[this][to_s1061]) ) + value_s1061 ) ) && _allowances_ERC20[this][from_s1061][msg.sender]==( ( old(_allowances_ERC20[this][from_s1061][msg.sender]) ) - value_s1061 ) ) && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && _allowances_ERC20[this][p2][p3]==( old(_allowances_ERC20[this][p2][p3]) ) ) && _owner_Ownable[this]==( old(_owner_Ownable[this]) ) ) && _minters_MinterRole[this]==( old(_minters_MinterRole[this]) ) ) && _paused_Pausable[this]==( old(_paused_Pausable[this]) ) ) && _pausers_PauserRole[this]==( old(_pausers_PauserRole[this]) ) ) && _name_ERC20Detailed[this]==( old(_name_ERC20Detailed[this]) ) ) && _symbol_ERC20Detailed[this]==( old(_symbol_ERC20Detailed[this]) ) ) && _decimals_ERC20Detailed[this]==( old(_decimals_ERC20Detailed[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_ERC20Pausable>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[from_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],IdentifierExpression[value_s1061,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_minters_MinterRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_pausers_PauserRole,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20Detailed,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20Pausable>]]]]]]
[2020-11-25 08:45:59,383 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20Pausable.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && _owner_Ownable[this] == old(_owner_Ownable[this]) && _minters_MinterRole[this] == old(_minters_MinterRole[this]) && _paused_Pausable[this] == old(_paused_Pausable[this]) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this]) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this]) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this]) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]))))
[2020-11-25 08:45:59,383 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC20Pausable0) ==> ( <>AP(success_transferFrom_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 08:45:59,404 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:45:59 PropertyContainer
[2020-11-25 08:45:59,404 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 08:45:59,405 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 08:45:59,405 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 08:45:59,405 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 08:45:59,406 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/2) ...
[2020-11-25 08:45:59,406 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 08:45:59,406 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 08:45:59,432 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:45:59" (2/2) ...
[2020-11-25 08:45:59,432 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 08:45:59,433 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 08:45:59,433 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 08:45:59,433 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 08:45:59,434 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/2) ...
[2020-11-25 08:45:59,492 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 08:45:59,492 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__success
[2020-11-25 08:45:59,492 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:45:59,493 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 08:45:59,493 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 08:45:59,493 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:45:59,493 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:45:59,493 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:45:59,493 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:45:59,493 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:45:59,493 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:45:59,493 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-25 08:45:59,493 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-25 08:45:59,494 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-25 08:45:59,494 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-25 08:45:59,494 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-25 08:45:59,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-25 08:45:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-25 08:45:59,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-25 08:45:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-25 08:45:59,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-25 08:45:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:45:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:45:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 08:45:59,495 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 08:45:59,495 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 08:45:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 08:45:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 08:45:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 08:45:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 08:45:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 08:45:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:45:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 08:45:59,496 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 08:45:59,496 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 08:45:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 08:45:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 08:45:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 08:45:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 08:45:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 08:45:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 08:45:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 08:45:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 08:45:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 08:45:59,497 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:45:59,497 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 08:45:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:45:59,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 08:45:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:45:59,498 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 08:45:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:45:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:45:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:45:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:45:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:45:59,498 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:45:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:45:59,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 08:45:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 08:45:59,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 08:45:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 08:45:59,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 08:45:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 08:45:59,499 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 08:45:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:45:59,499 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles
[2020-11-25 08:45:59,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles
[2020-11-25 08:45:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__success
[2020-11-25 08:45:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__success
[2020-11-25 08:45:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__success
[2020-11-25 08:45:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:45:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole
[2020-11-25 08:45:59,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole
[2020-11-25 08:45:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole
[2020-11-25 08:45:59,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole
[2020-11-25 08:45:59,500 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole
[2020-11-25 08:45:59,500 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole
[2020-11-25 08:45:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole
[2020-11-25 08:45:59,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole
[2020-11-25 08:45:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:45:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:45:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:45:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-25 08:45:59,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-25 08:45:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-25 08:45:59,501 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-25 08:45:59,501 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-25 08:45:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-25 08:45:59,502 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-25 08:45:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-25 08:45:59,502 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:45:59,502 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:45:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-25 08:45:59,502 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:45:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-25 08:45:59,502 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:45:59,502 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-25 08:45:59,502 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:45:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-25 08:45:59,503 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:45:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:45:59,503 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:45:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-25 08:45:59,503 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:45:59,503 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole
[2020-11-25 08:45:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole
[2020-11-25 08:45:59,503 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole
[2020-11-25 08:45:59,503 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole
[2020-11-25 08:45:59,504 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole
[2020-11-25 08:45:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole
[2020-11-25 08:45:59,504 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole
[2020-11-25 08:45:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole
[2020-11-25 08:45:59,504 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:45:59,504 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:45:59,504 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:45:59,504 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:45:59,504 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable
[2020-11-25 08:45:59,505 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:45:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable
[2020-11-25 08:45:59,505 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:45:59,505 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:45:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable
[2020-11-25 08:45:59,505 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:45:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable
[2020-11-25 08:45:59,505 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:45:59,505 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable
[2020-11-25 08:45:59,505 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:45:59,506 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl
[2020-11-25 08:45:59,506 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl
[2020-11-25 08:45:59,506 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 08:45:59,506 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 08:45:59,506 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 08:45:59,506 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 08:45:59,506 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__success
[2020-11-25 08:45:59,506 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-25 08:45:59,506 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-25 08:45:59,507 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__success
[2020-11-25 08:45:59,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 08:45:59,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 08:45:59,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-25 08:45:59,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-25 08:45:59,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 08:45:59,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 08:45:59,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 08:45:59,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 08:45:59,507 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:45:59,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:45:59,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Roles
[2020-11-25 08:45:59,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Roles
[2020-11-25 08:45:59,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_PauserRole
[2020-11-25 08:45:59,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_PauserRole
[2020-11-25 08:45:59,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-25 08:45:59,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-25 08:45:59,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:45:59,508 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:45:59,509 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MinterRole
[2020-11-25 08:45:59,509 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MinterRole
[2020-11-25 08:45:59,509 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:45:59,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:45:59,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:45:59,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:45:59,510 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Wafl
[2020-11-25 08:45:59,510 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 08:45:59,511 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 08:45:59,511 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles.Role_ctor__fail
[2020-11-25 08:45:59,511 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:45:59,511 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 08:45:59,512 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 08:45:59,512 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:59,512 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:59,512 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:59,512 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:59,513 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:59,513 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:45:59,513 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-25 08:45:59,513 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-25 08:45:59,513 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-25 08:45:59,514 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-25 08:45:59,514 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-25 08:45:59,514 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-25 08:45:59,514 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-25 08:45:59,514 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:45:59,515 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:45:59,515 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:45:59,515 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:45:59,515 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:45:59,516 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 08:45:59,516 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 08:45:59,516 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:45:59,516 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 08:45:59,516 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 08:45:59,517 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 08:45:59,517 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 08:45:59,517 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 08:45:59,517 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:45:59,517 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:45:59,518 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:45:59,518 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 08:45:59,518 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:45:59,518 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:45:59,518 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:45:59,519 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:45:59,519 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:45:59,519 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:45:59,519 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:45:59,519 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:45:59,520 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:45:59,520 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:45:59,520 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:45:59,520 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:45:59,520 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:45:59,520 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:45:59,520 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:45:59,520 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__success
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure Roles_Roles__fail
[2020-11-25 08:45:59,521 INFO  L130     BoogieDeclarations]: Found specification of procedure add~Role~address_Roles__fail
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure remove~Role~address_Roles__fail
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure has~Role~address_Roles__fail
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__success
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure PauserRole_PauserRole__fail
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__success
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__success
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__success
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:45:59,522 INFO  L130     BoogieDeclarations]: Found specification of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-25 08:45:59,523 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:59,524 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__success
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure MinterRole_MinterRole__fail
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__success
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__success
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__success
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:45:59,525 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:45:59,526 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__success
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure Wafl_Wafl__fail
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyPauser_pre__fail
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-25 08:45:59,527 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyMinter_pre__fail
[2020-11-25 08:45:59,527 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__fail
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles.Role_ctor__success
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:59,528 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-25 08:45:59,529 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 08:45:59,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 08:45:59,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 08:45:59,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 08:45:59,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__fail
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles_NoBaseCtor__success
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__fail
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure Roles_Roles__success
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__fail
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~Role~address_Roles__success
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__fail
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure remove~Role~address_Roles__success
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__fail
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure has~Role~address_Roles__success
[2020-11-25 08:45:59,534 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__fail
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole_NoBaseCtor__success
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__fail
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure PauserRole_PauserRole__success
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__fail
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure isPauser~address_PauserRole__success
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__fail
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure addPauser~address_PauserRole__success
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__fail
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure renouncePauser_PauserRole__success
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__fail
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addPauser~address_PauserRole__success
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__fail
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removePauser~address_PauserRole__success
[2020-11-25 08:45:59,535 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-25 08:45:59,536 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__fail
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole_NoBaseCtor__success
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__fail
[2020-11-25 08:45:59,537 INFO  L138     BoogieDeclarations]: Found implementation of procedure MinterRole_MinterRole__success
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__fail
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure isMinter~address_MinterRole__success
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__fail
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_MinterRole__success
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__fail
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceMinter_MinterRole__success
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__fail
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addMinter~address_MinterRole__success
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__fail
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure _removeMinter~address_MinterRole__success
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__fail
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable_NoBaseCtor__success
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__fail
[2020-11-25 08:45:59,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Mintable_ERC20Mintable__success
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__fail
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ERC20Mintable__success
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__fail
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable_NoBaseCtor__success
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__fail
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Burnable_ERC20Burnable__success
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__fail
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_ERC20Burnable__success
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__fail
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_ERC20Burnable__success
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__fail
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl_NoBaseCtor__success
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__fail
[2020-11-25 08:45:59,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure Wafl_Wafl__success
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__fail
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyPauser_pre__success
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-25 08:45:59,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__fail
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyMinter_pre__success
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 08:45:59,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Roles
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Roles
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_PauserRole
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_PauserRole
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MinterRole
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MinterRole
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Mintable
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Mintable
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Burnable
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Burnable
[2020-11-25 08:45:59,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Wafl
[2020-11-25 08:45:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 08:45:59,543 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 08:45:59,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 08:46:00,239 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:46:00,239 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:46:00,239 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:46:00,794 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 08:46:01,101 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 08:46:01,101 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-25 08:46:01,104 INFO  L202        PluginConnector]: Adding new model Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:46:01 BoogieIcfgContainer
[2020-11-25 08:46:01,104 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:45:59" (2/2) ...
[2020-11-25 08:46:01,105 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 08:46:01,105 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@1c0d6688 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:46:01, skipping insertion in model container
[2020-11-25 08:46:01,105 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 08:46:01,105 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 08:46:01,105 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 08:46:01,106 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 08:46:01,107 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/3) ...
[2020-11-25 08:46:01,107 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@157a2a30 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:46:01, skipping insertion in model container
[2020-11-25 08:46:01,107 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:45:59" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 08:46:01,141 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:46:01 NWAContainer
[2020-11-25 08:46:01,141 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 08:46:01,141 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 08:46:01,141 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 08:46:01,142 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 08:46:01,143 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:46:01" (3/4) ...
[2020-11-25 08:46:01,143 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@71f4f683 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:46:01, skipping insertion in model container
[2020-11-25 08:46:01,144 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:46:01" (4/4) ...
[2020-11-25 08:46:01,147 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 08:46:01,154 INFO  L110   BuchiProductObserver]: Initial RCFG 4159 locations, 6114 edges
[2020-11-25 08:46:01,154 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 08:46:01,169 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 08:46:04,740 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 08:46:04,754 INFO  L110   BuchiProductObserver]: BuchiProgram size 10768 locations, 20080 edges
[2020-11-25 08:46:04,754 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:46:04 BoogieIcfgContainer
[2020-11-25 08:46:04,754 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 08:46:04,754 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 08:46:04,754 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 08:46:04,756 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 08:46:04,756 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:46:04" (1/1) ...
[2020-11-25 08:46:04,965 INFO  L313           BlockEncoder]: Initial Icfg 10768 locations, 20080 edges
[2020-11-25 08:46:04,965 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 08:46:04,965 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 08:46:04,965 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 08:46:04,966 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 08:46:04,986 INFO  L70    emoveInfeasibleEdges]: Removed 291 edges and 29 locations because of local infeasibility
[2020-11-25 08:46:05,007 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-25 08:46:05,033 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 08:46:05,040 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 08:46:05,046 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 08:46:05,047 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 08:46:05,051 INFO  L313           BlockEncoder]: Encoded RCFG 10574 locations, 19542 edges
[2020-11-25 08:46:05,051 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:46:05 BasicIcfg
[2020-11-25 08:46:05,051 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 08:46:05,052 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 08:46:05,052 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 08:46:05,054 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 08:46:05,054 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:46:05,054 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 08:45:59" (1/6) ...
[2020-11-25 08:46:05,055 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@101eb49d and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:46:05, skipping insertion in model container
[2020-11-25 08:46:05,055 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:46:05,055 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 08:45:59" (2/6) ...
[2020-11-25 08:46:05,056 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@101eb49d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:46:05, skipping insertion in model container
[2020-11-25 08:46:05,056 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:46:05,056 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 08:46:01" (3/6) ...
[2020-11-25 08:46:05,056 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@101eb49d and model type Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:46:05, skipping insertion in model container
[2020-11-25 08:46:05,056 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:46:05,056 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 08:46:01" (4/6) ...
[2020-11-25 08:46:05,056 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@101eb49d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 08:46:05, skipping insertion in model container
[2020-11-25 08:46:05,056 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:46:05,056 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 08:46:04" (5/6) ...
[2020-11-25 08:46:05,056 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@101eb49d and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 08:46:05, skipping insertion in model container
[2020-11-25 08:46:05,057 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 08:46:05,057 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 08:46:05" (6/6) ...
[2020-11-25 08:46:05,058 INFO  L404   chiAutomizerObserver]: Analyzing ICFG Wafl_0x3Fee076a0f0218899B89fE7e3F54dd2dC18917E0_transferfrom-normal.bpl_BEv2
[2020-11-25 08:46:05,094 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 08:46:05,094 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 08:46:05,094 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 08:46:05,094 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 08:46:05,094 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 08:46:05,094 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 08:46:05,094 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 08:46:05,094 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 08:46:05,094 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 08:46:05,230 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10574 states.
[2020-11-25 08:46:05,302 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:46:05,303 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:05,303 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:05,310 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:05,310 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:05,310 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 08:46:05,310 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 10574 states.
[2020-11-25 08:46:05,345 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:46:05,345 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:05,345 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:05,346 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:05,347 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND TRUE   revert
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND TRUE   choice == 27
[L11035]              gas := gas - 21000;
[L11036]  COND FALSE  !(gas >= 0)
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:05,360 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:05,360 INFO  L82        PathProgramCache]: Analyzing trace with hash -108270805, now seen corresponding path program 1 times
[2020-11-25 08:46:05,365 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:05,386 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:05,430 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:46:05,432 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:46:05,432 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:46:05,839 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:05,848 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:46:05,848 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:46:05,849 INFO  L87              Difference]: Start difference. First operand 10574 states. Second operand 4 states.
[2020-11-25 08:46:07,017 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:07,018 INFO  L93              Difference]: Finished difference Result 6110 states and 7522 transitions.
[2020-11-25 08:46:07,018 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 08:46:07,021 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6110 states and 7522 transitions.
[2020-11-25 08:46:07,055 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:46:07,087 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6110 states to 6110 states and 7522 transitions.
[2020-11-25 08:46:07,088 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 08:46:07,091 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1407
[2020-11-25 08:46:07,092 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6110 states and 7522 transitions.
[2020-11-25 08:46:07,108 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:07,108 INFO  L728         BuchiCegarLoop]: Abstraction has 6110 states and 7522 transitions.
[2020-11-25 08:46:07,132 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6110 states and 7522 transitions.
[2020-11-25 08:46:07,214 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6110 to 6110.
[2020-11-25 08:46:07,215 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6110 states.
[2020-11-25 08:46:07,223 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6110 states to 6110 states and 7522 transitions.
[2020-11-25 08:46:07,224 INFO  L751         BuchiCegarLoop]: Abstraction has 6110 states and 7522 transitions.
[2020-11-25 08:46:07,224 INFO  L631         BuchiCegarLoop]: Abstraction has 6110 states and 7522 transitions.
[2020-11-25 08:46:07,224 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 08:46:07,224 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6110 states and 7522 transitions.
[2020-11-25 08:46:07,236 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:46:07,236 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:07,236 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:07,238 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:07,238 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND TRUE   revert
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND TRUE   revert
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND FALSE  !(__exception)
[L2257]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6431]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9504]   COND FALSE  !(!!_paused_Pausable[this])
[L6431]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6432]   COND TRUE   revert
[L2257]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2258]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s1061] == old(_balances_ERC20[this][from_s1061]) - value_s1061) && _balances_ERC20[this][to_s1061] == old(_balances_ERC20[this][to_s1061]) + value_s1061) && _allowances_ERC20[this][from_s1061][msgsender_MSG] == old(_allowances_ERC20[this][from_s1061][msgsender_MSG]) - value_s1061) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND FALSE  !(__exception)
[L2257]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6431]   CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9504]   COND FALSE  !(!!_paused_Pausable[this])
[L6431]   RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L6432]   COND TRUE   revert
[L2257]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2258]               assume !revert && gas >= 0;
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume !(((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s1061] == old(_balances_ERC20[this][from_s1061]) - value_s1061) && _balances_ERC20[this][to_s1061] == old(_balances_ERC20[this][to_s1061]) + value_s1061) && _allowances_ERC20[this][from_s1061][msgsender_MSG] == old(_allowances_ERC20[this][from_s1061][msgsender_MSG]) - value_s1061) && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && _owner_Ownable[this] == old(_owner_Ownable[this])) && _minters_MinterRole[this] == old(_minters_MinterRole[this])) && _paused_Pausable[this] == old(_paused_Pausable[this])) && _pausers_PauserRole[this] == old(_pausers_PauserRole[this])) && _name_ERC20Detailed[this] == old(_name_ERC20Detailed[this])) && _symbol_ERC20Detailed[this] == old(_symbol_ERC20Detailed[this])) && _decimals_ERC20Detailed[this] == old(_decimals_ERC20Detailed[this]));
[L3]                  revert := revert_hold;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:07,243 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:07,243 INFO  L82        PathProgramCache]: Analyzing trace with hash -1260379617, now seen corresponding path program 1 times
[2020-11-25 08:46:07,244 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:07,253 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:07,285 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 08:46:07,285 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:46:07,285 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 08:46:07,286 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:07,286 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 08:46:07,286 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 08:46:07,287 INFO  L87              Difference]: Start difference. First operand 6110 states and 7522 transitions. cyclomatic complexity: 1414 Second operand 3 states.
[2020-11-25 08:46:07,531 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:07,531 INFO  L93              Difference]: Finished difference Result 8384 states and 10350 transitions.
[2020-11-25 08:46:07,531 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 08:46:07,531 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8384 states and 10350 transitions.
[2020-11-25 08:46:07,555 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 08:46:07,588 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8384 states to 7466 states and 8910 transitions.
[2020-11-25 08:46:07,588 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1802
[2020-11-25 08:46:07,590 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1895
[2020-11-25 08:46:07,590 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7466 states and 8910 transitions.
[2020-11-25 08:46:07,600 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:07,600 INFO  L728         BuchiCegarLoop]: Abstraction has 7466 states and 8910 transitions.
[2020-11-25 08:46:07,608 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7466 states and 8910 transitions.
[2020-11-25 08:46:07,675 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7466 to 6628.
[2020-11-25 08:46:07,675 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6628 states.
[2020-11-25 08:46:07,683 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6628 states to 6628 states and 7864 transitions.
[2020-11-25 08:46:07,683 INFO  L751         BuchiCegarLoop]: Abstraction has 6628 states and 7864 transitions.
[2020-11-25 08:46:07,684 INFO  L631         BuchiCegarLoop]: Abstraction has 6628 states and 7864 transitions.
[2020-11-25 08:46:07,684 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 08:46:07,684 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6628 states and 7864 transitions.
[2020-11-25 08:46:07,693 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 08:46:07,693 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:07,693 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:07,698 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:07,699 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND TRUE   __exception
[L3138]               __tmp__Balance := Balance;
[L3139]               __tmp__DType := DType;
[L3140]               __tmp__Alloc := Alloc;
[L3141]               __tmp__balance_ADDR := balance_ADDR;
[L3142]               __tmp__M_Ref_int := M_Ref_int;
[L3143]               __tmp__sum__balances0 := sum__balances0;
[L3144]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3145]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3146]               __tmp__sum__allowances1 := sum__allowances1;
[L3147]               __tmp__M_Ref_bool := M_Ref_bool;
[L3148]               __tmp__sum := sum;
[L3149]               __tmp__Length := Length;
[L3150]               __tmp__now := now;
[L3151]               __tmp___owner_Ownable := _owner_Ownable;
[L3152]               __tmp___balances_ERC20 := _balances_ERC20;
[L3153]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3154]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3155]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3156]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3157]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3158]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3159]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3160]               __tmp___paused_Pausable := _paused_Pausable;
[L3161]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3162]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L7114]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7115]   COND FALSE  !(revert)
[L7118]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L7118]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7119]   COND FALSE  !(revert)
[L7122]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5742]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L5742]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5743]   COND FALSE  !(revert)
[L5746]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5715]               assume msgsender_MSG != null;
[L5716]               __tmp__Balance[this] := 0;
[L5717]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5719]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5721]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5722]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5723]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5746]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5747]   COND FALSE  !(revert)
[L7122]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7123]   COND FALSE  !(revert)
[L7126]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L7126]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]   COND FALSE  !(revert)
[L7130]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L7130]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7131]   COND FALSE  !(revert)
[L7134]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6307]   COND FALSE  !(revert)
[L6310]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6310]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6311]   COND FALSE  !(revert)
[L6314]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6314]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6315]   COND FALSE  !(revert)
[L6318]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L6318]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6319]   COND FALSE  !(revert)
[L6322]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6291]               assume msgsender_MSG != null;
[L6292]               __tmp__Balance[this] := 0;
[L6322]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L7134]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7135]   COND FALSE  !(revert)
[L7138]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6958]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6959]   COND FALSE  !(revert)
[L6962]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6962]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6963]   COND FALSE  !(revert)
[L6966]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6943]               assume msgsender_MSG != null;
[L6944]               __tmp__Balance[this] := 0;
[L6966]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6967]   COND FALSE  !(revert)
[L7138]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7139]   COND FALSE  !(revert)
[L7142]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6625]   COND TRUE   __tmp__DType[this] == MinterRole
[L6626]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6626]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6627]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L7142]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7143]   COND FALSE  !(revert)
[L7146]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6856]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]   COND FALSE  !(revert)
[L6860]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6860]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6861]   COND FALSE  !(revert)
[L6864]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6625]   COND TRUE   __tmp__DType[this] == MinterRole
[L6626]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6626]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6627]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6864]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6865]   COND FALSE  !(revert)
[L6868]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6841]               assume msgsender_MSG != null;
[L6842]               __tmp__Balance[this] := 0;
[L6868]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6869]   COND FALSE  !(revert)
[L7146]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7147]   COND FALSE  !(revert)
[L7150]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4690]               assume msgsender_MSG != null;
[L4691]               __tmp__Balance[this] := 0;
[L4692]               __tmp___owner_Ownable[this] := null;
[L4694]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4710]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4711]   COND FALSE  !(revert)
[L7150]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]               assume msgsender_MSG != null;
[L7062]               __tmp__Balance[this] := 0;
[L7064]   COND TRUE   __tmp__DType[this] == Wafl
[L7065]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7065]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7066]   COND FALSE  !(revert)
[L7072]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7073]   COND TRUE   __tmp__DType[this] == Wafl
[L7074]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5450]               __var_11 := null;
[L5451]   COND FALSE  !(!(account_s587 != null))
[L5455]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5455]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5456]   COND FALSE  !(revert)
[L5459]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5460]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5460]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5461]   COND FALSE  !(revert)
[L5464]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5465]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5466]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7074]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7075]   COND FALSE  !(revert)
[L7154]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7155]   COND FALSE  !(revert)
[L3162]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3163]               assume revert || gas < 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:07,707 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:07,707 INFO  L82        PathProgramCache]: Analyzing trace with hash 475966283, now seen corresponding path program 1 times
[2020-11-25 08:46:07,708 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:07,729 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:08,029 INFO  L134       CoverageAnalysis]: Checked inductivity of 982 backedges. 0 proven. 36 refuted. 0 times theorem prover too weak. 946 trivial. 0 not checked.
[2020-11-25 08:46:08,029 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:46:08,029 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:46:08,030 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:08,030 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:46:08,030 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:46:08,030 INFO  L87              Difference]: Start difference. First operand 6628 states and 7864 transitions. cyclomatic complexity: 1238 Second operand 8 states.
[2020-11-25 08:46:09,558 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:09,558 INFO  L93              Difference]: Finished difference Result 9273 states and 11033 transitions.
[2020-11-25 08:46:09,558 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:46:09,559 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9273 states and 11033 transitions.
[2020-11-25 08:46:09,578 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:46:09,603 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9273 states to 9244 states and 10997 transitions.
[2020-11-25 08:46:09,603 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2369
[2020-11-25 08:46:09,604 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2369
[2020-11-25 08:46:09,604 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9244 states and 10997 transitions.
[2020-11-25 08:46:09,612 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:09,612 INFO  L728         BuchiCegarLoop]: Abstraction has 9244 states and 10997 transitions.
[2020-11-25 08:46:09,618 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9244 states and 10997 transitions.
[2020-11-25 08:46:09,688 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9244 to 9136.
[2020-11-25 08:46:09,689 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9136 states.
[2020-11-25 08:46:09,700 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9136 states to 9136 states and 10889 transitions.
[2020-11-25 08:46:09,700 INFO  L751         BuchiCegarLoop]: Abstraction has 9136 states and 10889 transitions.
[2020-11-25 08:46:09,701 INFO  L631         BuchiCegarLoop]: Abstraction has 9136 states and 10889 transitions.
[2020-11-25 08:46:09,701 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 08:46:09,701 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9136 states and 10889 transitions.
[2020-11-25 08:46:09,713 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:46:09,713 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:09,713 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:09,716 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:09,716 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND TRUE   __exception
[L3138]               __tmp__Balance := Balance;
[L3139]               __tmp__DType := DType;
[L3140]               __tmp__Alloc := Alloc;
[L3141]               __tmp__balance_ADDR := balance_ADDR;
[L3142]               __tmp__M_Ref_int := M_Ref_int;
[L3143]               __tmp__sum__balances0 := sum__balances0;
[L3144]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3145]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3146]               __tmp__sum__allowances1 := sum__allowances1;
[L3147]               __tmp__M_Ref_bool := M_Ref_bool;
[L3148]               __tmp__sum := sum;
[L3149]               __tmp__Length := Length;
[L3150]               __tmp__now := now;
[L3151]               __tmp___owner_Ownable := _owner_Ownable;
[L3152]               __tmp___balances_ERC20 := _balances_ERC20;
[L3153]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3154]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3155]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3156]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3157]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3158]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3159]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3160]               __tmp___paused_Pausable := _paused_Pausable;
[L3161]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3162]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L7114]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7115]   COND FALSE  !(revert)
[L7118]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L7118]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7119]   COND FALSE  !(revert)
[L7122]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5742]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L5742]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5743]   COND FALSE  !(revert)
[L5746]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5715]               assume msgsender_MSG != null;
[L5716]               __tmp__Balance[this] := 0;
[L5717]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5719]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5721]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5722]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5723]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5746]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5747]   COND FALSE  !(revert)
[L7122]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7123]   COND FALSE  !(revert)
[L7126]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L7126]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]   COND FALSE  !(revert)
[L7130]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L7130]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7131]   COND FALSE  !(revert)
[L7134]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6307]   COND FALSE  !(revert)
[L6310]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6310]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6311]   COND FALSE  !(revert)
[L6314]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6314]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6315]   COND FALSE  !(revert)
[L6318]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L6318]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6319]   COND FALSE  !(revert)
[L6322]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6291]               assume msgsender_MSG != null;
[L6292]               __tmp__Balance[this] := 0;
[L6322]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L7134]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7135]   COND FALSE  !(revert)
[L7138]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6958]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6959]   COND FALSE  !(revert)
[L6962]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6962]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6963]   COND FALSE  !(revert)
[L6966]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6943]               assume msgsender_MSG != null;
[L6944]               __tmp__Balance[this] := 0;
[L6966]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6967]   COND FALSE  !(revert)
[L7138]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7139]   COND FALSE  !(revert)
[L7142]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6625]   COND TRUE   __tmp__DType[this] == MinterRole
[L6626]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6626]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6627]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L7142]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7143]   COND FALSE  !(revert)
[L7146]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6856]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]   COND FALSE  !(revert)
[L6860]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6860]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6861]   COND FALSE  !(revert)
[L6864]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6625]   COND TRUE   __tmp__DType[this] == MinterRole
[L6626]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6626]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6627]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6864]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6865]   COND FALSE  !(revert)
[L6868]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6841]               assume msgsender_MSG != null;
[L6842]               __tmp__Balance[this] := 0;
[L6868]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6869]   COND FALSE  !(revert)
[L7146]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7147]   COND FALSE  !(revert)
[L7150]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4690]               assume msgsender_MSG != null;
[L4691]               __tmp__Balance[this] := 0;
[L4692]               __tmp___owner_Ownable[this] := null;
[L4694]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4710]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4711]   COND FALSE  !(revert)
[L7150]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]               assume msgsender_MSG != null;
[L7062]               __tmp__Balance[this] := 0;
[L7064]   COND TRUE   __tmp__DType[this] == Wafl
[L7065]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7065]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7066]   COND FALSE  !(revert)
[L7072]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7073]   COND TRUE   __tmp__DType[this] == Wafl
[L7074]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5450]               __var_11 := null;
[L5451]   COND FALSE  !(!(account_s587 != null))
[L5455]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5455]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5456]   COND FALSE  !(revert)
[L5459]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5460]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5460]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5461]   COND FALSE  !(revert)
[L5464]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5465]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5466]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7074]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7075]   COND FALSE  !(revert)
[L7154]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7155]   COND FALSE  !(revert)
[L3162]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3163]               assume revert || gas < 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:09,723 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:09,723 INFO  L82        PathProgramCache]: Analyzing trace with hash 2109313800, now seen corresponding path program 1 times
[2020-11-25 08:46:09,724 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:09,737 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:09,942 INFO  L134       CoverageAnalysis]: Checked inductivity of 961 backedges. 0 proven. 49 refuted. 0 times theorem prover too weak. 912 trivial. 0 not checked.
[2020-11-25 08:46:09,942 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:46:09,942 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:46:09,943 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:09,943 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:46:09,943 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:46:09,943 INFO  L87              Difference]: Start difference. First operand 9136 states and 10889 transitions. cyclomatic complexity: 1757 Second operand 8 states.
[2020-11-25 08:46:10,209 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:10,209 INFO  L93              Difference]: Finished difference Result 9143 states and 10897 transitions.
[2020-11-25 08:46:10,209 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:46:10,209 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9143 states and 10897 transitions.
[2020-11-25 08:46:10,229 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:46:10,255 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9143 states to 9143 states and 10897 transitions.
[2020-11-25 08:46:10,255 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2347
[2020-11-25 08:46:10,256 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2347
[2020-11-25 08:46:10,256 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9143 states and 10897 transitions.
[2020-11-25 08:46:10,263 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:10,263 INFO  L728         BuchiCegarLoop]: Abstraction has 9143 states and 10897 transitions.
[2020-11-25 08:46:10,269 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9143 states and 10897 transitions.
[2020-11-25 08:46:10,325 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9143 to 9143.
[2020-11-25 08:46:10,326 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9143 states.
[2020-11-25 08:46:10,337 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9143 states to 9143 states and 10897 transitions.
[2020-11-25 08:46:10,337 INFO  L751         BuchiCegarLoop]: Abstraction has 9143 states and 10897 transitions.
[2020-11-25 08:46:10,337 INFO  L631         BuchiCegarLoop]: Abstraction has 9143 states and 10897 transitions.
[2020-11-25 08:46:10,337 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 08:46:10,337 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9143 states and 10897 transitions.
[2020-11-25 08:46:10,348 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:46:10,348 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:10,348 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:10,350 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:10,350 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND TRUE   DType[this] == ERC20Pausable
[L5969]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5969]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5970]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND TRUE   DType[this] == ERC20Pausable
[L5969]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5969]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5970]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND TRUE   DType[this] == ERC20Pausable
[L5969]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5969]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5970]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND TRUE   DType[this] == ERC20Pausable
[L5969]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5969]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5970]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:10,356 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:10,356 INFO  L82        PathProgramCache]: Analyzing trace with hash 373260852, now seen corresponding path program 1 times
[2020-11-25 08:46:10,357 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:10,374 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:10,546 INFO  L134       CoverageAnalysis]: Checked inductivity of 1012 backedges. 0 proven. 27 refuted. 0 times theorem prover too weak. 985 trivial. 0 not checked.
[2020-11-25 08:46:10,546 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:46:10,546 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:46:10,546 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:10,547 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:46:10,547 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:46:10,547 INFO  L87              Difference]: Start difference. First operand 9143 states and 10897 transitions. cyclomatic complexity: 1758 Second operand 7 states.
[2020-11-25 08:46:10,713 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:10,713 INFO  L93              Difference]: Finished difference Result 9178 states and 10940 transitions.
[2020-11-25 08:46:10,713 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:46:10,713 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9178 states and 10940 transitions.
[2020-11-25 08:46:10,730 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:46:10,749 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9178 states to 9149 states and 10904 transitions.
[2020-11-25 08:46:10,749 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2347
[2020-11-25 08:46:10,750 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2347
[2020-11-25 08:46:10,750 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9149 states and 10904 transitions.
[2020-11-25 08:46:10,757 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:10,757 INFO  L728         BuchiCegarLoop]: Abstraction has 9149 states and 10904 transitions.
[2020-11-25 08:46:10,763 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9149 states and 10904 transitions.
[2020-11-25 08:46:10,813 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9149 to 9149.
[2020-11-25 08:46:10,813 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9149 states.
[2020-11-25 08:46:10,823 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9149 states to 9149 states and 10904 transitions.
[2020-11-25 08:46:10,823 INFO  L751         BuchiCegarLoop]: Abstraction has 9149 states and 10904 transitions.
[2020-11-25 08:46:10,823 INFO  L631         BuchiCegarLoop]: Abstraction has 9149 states and 10904 transitions.
[2020-11-25 08:46:10,823 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 08:46:10,823 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9149 states and 10904 transitions.
[2020-11-25 08:46:10,834 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:46:10,834 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:10,834 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:10,836 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:10,836 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND TRUE   __exception
[L3138]               __tmp__Balance := Balance;
[L3139]               __tmp__DType := DType;
[L3140]               __tmp__Alloc := Alloc;
[L3141]               __tmp__balance_ADDR := balance_ADDR;
[L3142]               __tmp__M_Ref_int := M_Ref_int;
[L3143]               __tmp__sum__balances0 := sum__balances0;
[L3144]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3145]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3146]               __tmp__sum__allowances1 := sum__allowances1;
[L3147]               __tmp__M_Ref_bool := M_Ref_bool;
[L3148]               __tmp__sum := sum;
[L3149]               __tmp__Length := Length;
[L3150]               __tmp__now := now;
[L3151]               __tmp___owner_Ownable := _owner_Ownable;
[L3152]               __tmp___balances_ERC20 := _balances_ERC20;
[L3153]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3154]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3155]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3156]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3157]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3158]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3159]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3160]               __tmp___paused_Pausable := _paused_Pausable;
[L3161]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3162]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L7114]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7115]   COND FALSE  !(revert)
[L7118]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L7118]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7119]   COND FALSE  !(revert)
[L7122]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5742]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L5742]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5743]   COND FALSE  !(revert)
[L5746]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5715]               assume msgsender_MSG != null;
[L5716]               __tmp__Balance[this] := 0;
[L5717]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5719]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5721]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5722]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5723]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5746]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5747]   COND FALSE  !(revert)
[L7122]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7123]   COND FALSE  !(revert)
[L7126]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L7126]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]   COND FALSE  !(revert)
[L7130]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L7130]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7131]   COND FALSE  !(revert)
[L7134]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6307]   COND FALSE  !(revert)
[L6310]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6310]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6311]   COND FALSE  !(revert)
[L6314]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L5930]   COND FALSE  !(__tmp__DType[this] == ERC20Pausable)
[L5935]   COND FALSE  !(__tmp__DType[this] == Pausable)
[L5940]   COND TRUE   __tmp__DType[this] == PauserRole
[L5941]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5941]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5942]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6314]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6315]   COND FALSE  !(revert)
[L6318]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L6318]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6319]   COND FALSE  !(revert)
[L6322]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6291]               assume msgsender_MSG != null;
[L6292]               __tmp__Balance[this] := 0;
[L6322]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L7134]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7135]   COND FALSE  !(revert)
[L7138]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6958]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6959]   COND FALSE  !(revert)
[L6962]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6962]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6963]   COND FALSE  !(revert)
[L6966]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6943]               assume msgsender_MSG != null;
[L6944]               __tmp__Balance[this] := 0;
[L6966]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6967]   COND FALSE  !(revert)
[L7138]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7139]   COND FALSE  !(revert)
[L7142]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6621]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6621]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6622]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L7142]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7143]   COND FALSE  !(revert)
[L7146]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6856]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]   COND FALSE  !(revert)
[L6860]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6860]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6861]   COND FALSE  !(revert)
[L6864]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND TRUE   __tmp__DType[this] == ERC20Mintable
[L6621]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6621]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6622]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6864]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6865]   COND FALSE  !(revert)
[L6868]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6841]               assume msgsender_MSG != null;
[L6842]               __tmp__Balance[this] := 0;
[L6868]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6869]   COND FALSE  !(revert)
[L7146]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7147]   COND FALSE  !(revert)
[L7150]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4690]               assume msgsender_MSG != null;
[L4691]               __tmp__Balance[this] := 0;
[L4692]               __tmp___owner_Ownable[this] := null;
[L4694]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4710]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4711]   COND FALSE  !(revert)
[L7150]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]               assume msgsender_MSG != null;
[L7062]               __tmp__Balance[this] := 0;
[L7064]   COND TRUE   __tmp__DType[this] == Wafl
[L7065]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7065]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7066]   COND FALSE  !(revert)
[L7072]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7073]   COND TRUE   __tmp__DType[this] == Wafl
[L7074]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5450]               __var_11 := null;
[L5451]   COND FALSE  !(!(account_s587 != null))
[L5455]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5455]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5456]   COND FALSE  !(revert)
[L5459]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5460]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5460]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5461]   COND FALSE  !(revert)
[L5464]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5465]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5466]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7074]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7075]   COND FALSE  !(revert)
[L7154]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7155]   COND FALSE  !(revert)
[L3162]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3163]               assume revert || gas < 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:10,842 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:10,842 INFO  L82        PathProgramCache]: Analyzing trace with hash 687713536, now seen corresponding path program 1 times
[2020-11-25 08:46:10,843 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:10,863 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:11,066 INFO  L134       CoverageAnalysis]: Checked inductivity of 951 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 933 trivial. 0 not checked.
[2020-11-25 08:46:11,066 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:46:11,067 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [9] total 9
[2020-11-25 08:46:11,067 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:11,067 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:46:11,067 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:46:11,067 INFO  L87              Difference]: Start difference. First operand 9149 states and 10904 transitions. cyclomatic complexity: 1759 Second operand 9 states.
[2020-11-25 08:46:12,897 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:12,897 INFO  L93              Difference]: Finished difference Result 9290 states and 11052 transitions.
[2020-11-25 08:46:12,898 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 08:46:12,898 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9290 states and 11052 transitions.
[2020-11-25 08:46:12,915 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:46:12,933 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9290 states to 9257 states and 11011 transitions.
[2020-11-25 08:46:12,933 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2369
[2020-11-25 08:46:12,934 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2369
[2020-11-25 08:46:12,934 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9257 states and 11011 transitions.
[2020-11-25 08:46:12,940 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:12,940 INFO  L728         BuchiCegarLoop]: Abstraction has 9257 states and 11011 transitions.
[2020-11-25 08:46:12,945 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9257 states and 11011 transitions.
[2020-11-25 08:46:12,994 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9257 to 9149.
[2020-11-25 08:46:12,994 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9149 states.
[2020-11-25 08:46:13,004 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9149 states to 9149 states and 10903 transitions.
[2020-11-25 08:46:13,004 INFO  L751         BuchiCegarLoop]: Abstraction has 9149 states and 10903 transitions.
[2020-11-25 08:46:13,004 INFO  L631         BuchiCegarLoop]: Abstraction has 9149 states and 10903 transitions.
[2020-11-25 08:46:13,004 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 08:46:13,004 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9149 states and 10903 transitions.
[2020-11-25 08:46:13,014 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 08:46:13,014 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:13,014 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:13,016 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:13,016 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND TRUE   __exception
[L3138]               __tmp__Balance := Balance;
[L3139]               __tmp__DType := DType;
[L3140]               __tmp__Alloc := Alloc;
[L3141]               __tmp__balance_ADDR := balance_ADDR;
[L3142]               __tmp__M_Ref_int := M_Ref_int;
[L3143]               __tmp__sum__balances0 := sum__balances0;
[L3144]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L3145]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L3146]               __tmp__sum__allowances1 := sum__allowances1;
[L3147]               __tmp__M_Ref_bool := M_Ref_bool;
[L3148]               __tmp__sum := sum;
[L3149]               __tmp__Length := Length;
[L3150]               __tmp__now := now;
[L3151]               __tmp___owner_Ownable := _owner_Ownable;
[L3152]               __tmp___balances_ERC20 := _balances_ERC20;
[L3153]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L3154]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L3155]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L3156]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L3157]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L3158]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L3159]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L3160]               __tmp___paused_Pausable := _paused_Pausable;
[L3161]               __tmp___minters_MinterRole := _minters_MinterRole;
[L3162]   CALL        call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L7114]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L7114]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7115]   COND FALSE  !(revert)
[L7118]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L7118]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L7119]   COND FALSE  !(revert)
[L7122]   CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5742]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L5742]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5743]   COND FALSE  !(revert)
[L5746]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5715]               assume msgsender_MSG != null;
[L5716]               __tmp__Balance[this] := 0;
[L5717]               __tmp___name_ERC20Detailed[this] := -1545721152;
[L5718]               __tmp___symbol_ERC20Detailed[this] := -1545721152;
[L5719]               __tmp___decimals_ERC20Detailed[this] := 0;
[L5721]               __tmp___name_ERC20Detailed[this] := name_s731;
[L5722]               __tmp___symbol_ERC20Detailed[this] := symbol_s731;
[L5723]               __tmp___decimals_ERC20Detailed[this] := decimals_s731;
[L5746]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5747]   COND FALSE  !(revert)
[L7122]   RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7123]   COND FALSE  !(revert)
[L7126]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L7126]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7127]   COND FALSE  !(revert)
[L7130]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L7130]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7131]   COND FALSE  !(revert)
[L7134]   CALL        call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6306]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6306]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6307]   COND FALSE  !(revert)
[L6310]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6310]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6311]   COND FALSE  !(revert)
[L6314]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6314]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6315]   COND FALSE  !(revert)
[L6318]   CALL        call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6200]   CALL        call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L5991]   CALL        call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5916]               assume msgsender_MSG != null;
[L5917]               __tmp__Balance[this] := 0;
[L5919]   CALL        call __var_23 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L5919]   RET         call __var_23 := FreshRefGenerator__fail();
[L5920]   COND FALSE  !(revert)
[L5923]               __tmp___pausers_PauserRole[this] := __var_23;
[L5925]   COND TRUE   __tmp__DType[this] == Wafl
[L5926]   CALL        call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6146]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6146]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___pausers_PauserRole[this], account_s919);
[L6147]   COND FALSE  !(revert)
[L5926]   RET         call _addPauser~address_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5927]   COND FALSE  !(revert)
[L5991]   RET         call PauserRole_PauserRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5992]   COND FALSE  !(revert)
[L6200]   RET         call PauserRole_PauserRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6201]   COND FALSE  !(revert)
[L6204]   CALL        call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6181]               assume msgsender_MSG != null;
[L6182]               __tmp__Balance[this] := 0;
[L6183]               __tmp___paused_Pausable[this] := false;
[L6185]               __tmp___paused_Pausable[this] := false;
[L6204]   RET         call Pausable_Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6205]   COND FALSE  !(revert)
[L6318]   RET         call Pausable_Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6319]   COND FALSE  !(revert)
[L6322]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6291]               assume msgsender_MSG != null;
[L6292]               __tmp__Balance[this] := 0;
[L6322]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6323]   COND FALSE  !(revert)
[L7134]   RET         call ERC20Pausable_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7135]   COND FALSE  !(revert)
[L7138]   CALL        call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6958]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6958]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6959]   COND FALSE  !(revert)
[L6962]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6962]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6963]   COND FALSE  !(revert)
[L6966]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6943]               assume msgsender_MSG != null;
[L6944]               __tmp__Balance[this] := 0;
[L6966]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6967]   COND FALSE  !(revert)
[L7138]   RET         call ERC20Burnable_ERC20Burnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7139]   COND FALSE  !(revert)
[L7142]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6625]   COND TRUE   __tmp__DType[this] == MinterRole
[L6626]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6626]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6627]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L7142]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L7143]   COND FALSE  !(revert)
[L7146]   CALL        call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L6856]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L6856]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6857]   COND FALSE  !(revert)
[L6860]   CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4896]   CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4854]   CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4839]               assume msgsender_MSG != null;
[L4840]               __tmp__Balance[this] := 0;
[L4854]   RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4855]   COND FALSE  !(revert)
[L4896]   RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4897]   COND FALSE  !(revert)
[L4900]   CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4871]               assume msgsender_MSG != null;
[L4872]               __tmp__Balance[this] := 0;
[L4873]               __tmp___balances_ERC20[this] := zeroRefintArr();
[L4874]               __tmp__sum__balances0[this] := 0;
[L4875]               __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4876]               __tmp__sum__allowances1[this] := 0;
[L4877]               __tmp___totalSupply_ERC20[this] := 0;
[L4900]   RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4901]   COND FALSE  !(revert)
[L6860]   RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L6861]   COND FALSE  !(revert)
[L6864]   CALL        call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6671]   CALL        call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6606]               assume msgsender_MSG != null;
[L6607]               __tmp__Balance[this] := 0;
[L6609]   CALL        call __var_36 := FreshRefGenerator__fail();
[L4507]               havoc newRef;
[L4508]               assume __tmp__Alloc[newRef] == false;
[L4509]               __tmp__Alloc[newRef] := true;
[L4510]               assume newRef != null;
[L6609]   RET         call __var_36 := FreshRefGenerator__fail();
[L6610]   COND FALSE  !(revert)
[L6613]               __tmp___minters_MinterRole[this] := __var_36;
[L6615]   COND FALSE  !(__tmp__DType[this] == Wafl)
[L6620]   COND FALSE  !(__tmp__DType[this] == ERC20Mintable)
[L6625]   COND TRUE   __tmp__DType[this] == MinterRole
[L6626]   CALL        call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6806]   CALL        call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L5835]   CALL        call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5891]               __var_22 := null;
[L5892]   COND FALSE  !(!(account_s834 != null))
[L5896]               __ret_0_ := __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s834]][account_s834];
[L5835]   RET         call __var_20 := has~Role~address_Roles__fail(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5836]   COND FALSE  !(revert)
[L5839]   COND FALSE  !(!!__var_20)
[L5843]               __tmp__M_Ref_bool[__tmp__bearer_Roles.Role[role_s786]][account_s786] := true;
[L6806]   RET         call add~Role~address_Roles__fail(this, this, 0, __tmp___minters_MinterRole[this], account_s1200);
[L6807]   COND FALSE  !(revert)
[L6626]   RET         call _addMinter~address_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6627]   COND FALSE  !(revert)
[L6671]   RET         call MinterRole_MinterRole_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6672]   COND FALSE  !(revert)
[L6864]   RET         call MinterRole_MinterRole__fail(this, msgsender_MSG, msgvalue_MSG);
[L6865]   COND FALSE  !(revert)
[L6868]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6841]               assume msgsender_MSG != null;
[L6842]               __tmp__Balance[this] := 0;
[L6868]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L6869]   COND FALSE  !(revert)
[L7146]   RET         call ERC20Mintable_ERC20Mintable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7147]   COND FALSE  !(revert)
[L7150]   CALL        call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L4710]   CALL        call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4690]               assume msgsender_MSG != null;
[L4691]               __tmp__Balance[this] := 0;
[L4692]               __tmp___owner_Ownable[this] := null;
[L4694]               __tmp___owner_Ownable[this] := msgsender_MSG;
[L4710]   RET         call Ownable_Ownable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4711]   COND FALSE  !(revert)
[L7150]   RET         call Ownable_Ownable__fail(this, msgsender_MSG, msgvalue_MSG);
[L7151]   COND FALSE  !(revert)
[L7154]   CALL        call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7061]               assume msgsender_MSG != null;
[L7062]               __tmp__Balance[this] := 0;
[L7064]   COND TRUE   __tmp__DType[this] == Wafl
[L7065]   CALL        call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L5790]               __ret_0_ := __tmp___decimals_ERC20Detailed[this];
[L7065]   RET         call __var_40 := decimals_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG);
[L7066]   COND FALSE  !(revert)
[L7072]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7073]   COND TRUE   __tmp__DType[this] == Wafl
[L7074]   CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5450]               __var_11 := null;
[L5451]   COND FALSE  !(!(account_s587 != null))
[L5455]   CALL        call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5455]   RET         call __var_12 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___totalSupply_ERC20[this], amount_s587);
[L5456]   COND FALSE  !(revert)
[L5459]               __tmp___totalSupply_ERC20[this] := __var_12;
[L5460]   CALL        call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L4566]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4567]   COND FALSE  !(!(c_s26 >= a_s26))
[L4571]               __ret_0_ := c_s26;
[L5460]   RET         call __var_13 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s587], amount_s587);
[L5461]   COND FALSE  !(revert)
[L5464]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][account_s587];
[L5465]               __tmp___balances_ERC20[this][account_s587] := __var_13;
[L5466]               __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][account_s587];
[L7074]   RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7075]   COND FALSE  !(revert)
[L7154]   RET         call Wafl_Wafl_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L7155]   COND FALSE  !(revert)
[L3162]   RET         call Wafl_Wafl__fail(this, msgsender_MSG, msgvalue_MSG);
[L3163]               assume revert || gas < 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:13,021 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:13,021 INFO  L82        PathProgramCache]: Analyzing trace with hash 1233635229, now seen corresponding path program 1 times
[2020-11-25 08:46:13,022 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:13,047 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:13,218 INFO  L134       CoverageAnalysis]: Checked inductivity of 964 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 964 trivial. 0 not checked.
[2020-11-25 08:46:13,219 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:46:13,219 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 08:46:13,219 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:13,219 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 08:46:13,219 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 08:46:13,220 INFO  L87              Difference]: Start difference. First operand 9149 states and 10903 transitions. cyclomatic complexity: 1758 Second operand 4 states.
[2020-11-25 08:46:13,576 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:13,576 INFO  L93              Difference]: Finished difference Result 11175 states and 13313 transitions.
[2020-11-25 08:46:13,576 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 08:46:13,577 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 11175 states and 13313 transitions.
[2020-11-25 08:46:13,606 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 08:46:13,645 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 11175 states to 10855 states and 12965 transitions.
[2020-11-25 08:46:13,645 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2741
[2020-11-25 08:46:13,646 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2741
[2020-11-25 08:46:13,647 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 10855 states and 12965 transitions.
[2020-11-25 08:46:13,655 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:13,656 INFO  L728         BuchiCegarLoop]: Abstraction has 10855 states and 12965 transitions.
[2020-11-25 08:46:13,663 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 10855 states and 12965 transitions.
[2020-11-25 08:46:13,742 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 10855 to 9709.
[2020-11-25 08:46:13,742 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9709 states.
[2020-11-25 08:46:13,755 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9709 states to 9709 states and 11423 transitions.
[2020-11-25 08:46:13,756 INFO  L751         BuchiCegarLoop]: Abstraction has 9709 states and 11423 transitions.
[2020-11-25 08:46:13,756 INFO  L631         BuchiCegarLoop]: Abstraction has 9709 states and 11423 transitions.
[2020-11-25 08:46:13,756 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 08:46:13,756 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9709 states and 11423 transitions.
[2020-11-25 08:46:13,769 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:13,769 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:13,769 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:13,771 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:13,771 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:13,776 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:13,776 INFO  L82        PathProgramCache]: Analyzing trace with hash 1077150742, now seen corresponding path program 1 times
[2020-11-25 08:46:13,777 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:13,789 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:13,984 INFO  L134       CoverageAnalysis]: Checked inductivity of 1018 backedges. 0 proven. 33 refuted. 0 times theorem prover too weak. 985 trivial. 0 not checked.
[2020-11-25 08:46:13,984 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:46:13,984 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:46:13,984 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:13,985 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:46:13,985 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:46:13,985 INFO  L87              Difference]: Start difference. First operand 9709 states and 11423 transitions. cyclomatic complexity: 1718 Second operand 7 states.
[2020-11-25 08:46:14,160 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:14,160 INFO  L93              Difference]: Finished difference Result 9744 states and 11466 transitions.
[2020-11-25 08:46:14,161 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:46:14,161 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9744 states and 11466 transitions.
[2020-11-25 08:46:14,178 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:14,196 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9744 states to 9715 states and 11430 transitions.
[2020-11-25 08:46:14,196 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2611
[2020-11-25 08:46:14,197 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2611
[2020-11-25 08:46:14,197 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9715 states and 11430 transitions.
[2020-11-25 08:46:14,202 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:14,202 INFO  L728         BuchiCegarLoop]: Abstraction has 9715 states and 11430 transitions.
[2020-11-25 08:46:14,208 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9715 states and 11430 transitions.
[2020-11-25 08:46:14,256 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9715 to 9709.
[2020-11-25 08:46:14,256 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9709 states.
[2020-11-25 08:46:14,267 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9709 states to 9709 states and 11423 transitions.
[2020-11-25 08:46:14,267 INFO  L751         BuchiCegarLoop]: Abstraction has 9709 states and 11423 transitions.
[2020-11-25 08:46:14,267 INFO  L631         BuchiCegarLoop]: Abstraction has 9709 states and 11423 transitions.
[2020-11-25 08:46:14,267 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 08:46:14,267 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9709 states and 11423 transitions.
[2020-11-25 08:46:14,277 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:14,277 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:14,277 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:14,279 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:14,279 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND TRUE   choice == 27
[L11035]              gas := gas - 21000;
[L11036]  COND FALSE  !(gas >= 0)
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:14,283 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:14,284 INFO  L82        PathProgramCache]: Analyzing trace with hash -1201178831, now seen corresponding path program 1 times
[2020-11-25 08:46:14,285 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:14,299 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:14,508 INFO  L134       CoverageAnalysis]: Checked inductivity of 1000 backedges. 6 proven. 29 refuted. 0 times theorem prover too weak. 965 trivial. 0 not checked.
[2020-11-25 08:46:14,508 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:46:14,508 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:46:14,509 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:14,509 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:46:14,509 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:46:14,509 INFO  L87              Difference]: Start difference. First operand 9709 states and 11423 transitions. cyclomatic complexity: 1718 Second operand 8 states.
[2020-11-25 08:46:14,724 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:14,724 INFO  L93              Difference]: Finished difference Result 9742 states and 11463 transitions.
[2020-11-25 08:46:14,724 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:46:14,724 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9742 states and 11463 transitions.
[2020-11-25 08:46:14,741 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:14,758 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9742 states to 9716 states and 11431 transitions.
[2020-11-25 08:46:14,759 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2611
[2020-11-25 08:46:14,760 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2611
[2020-11-25 08:46:14,760 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9716 states and 11431 transitions.
[2020-11-25 08:46:14,765 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:14,765 INFO  L728         BuchiCegarLoop]: Abstraction has 9716 states and 11431 transitions.
[2020-11-25 08:46:14,770 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9716 states and 11431 transitions.
[2020-11-25 08:46:14,816 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9716 to 9716.
[2020-11-25 08:46:14,816 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9716 states.
[2020-11-25 08:46:14,827 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9716 states to 9716 states and 11431 transitions.
[2020-11-25 08:46:14,827 INFO  L751         BuchiCegarLoop]: Abstraction has 9716 states and 11431 transitions.
[2020-11-25 08:46:14,827 INFO  L631         BuchiCegarLoop]: Abstraction has 9716 states and 11431 transitions.
[2020-11-25 08:46:14,827 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 08:46:14,827 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9716 states and 11431 transitions.
[2020-11-25 08:46:14,837 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:14,837 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:14,837 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:14,839 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:14,839 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND FALSE  !(DType[this] == Pausable)
[L5978]   COND TRUE   DType[this] == PauserRole
[L5979]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5979]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5980]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:14,844 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:14,844 INFO  L82        PathProgramCache]: Analyzing trace with hash -1069500109, now seen corresponding path program 1 times
[2020-11-25 08:46:14,845 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:14,858 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:15,028 INFO  L134       CoverageAnalysis]: Checked inductivity of 994 backedges. 12 proven. 6 refuted. 0 times theorem prover too weak. 976 trivial. 0 not checked.
[2020-11-25 08:46:15,028 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:46:15,028 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [8] total 8
[2020-11-25 08:46:15,029 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:15,029 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:46:15,029 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:46:15,029 INFO  L87              Difference]: Start difference. First operand 9716 states and 11431 transitions. cyclomatic complexity: 1719 Second operand 8 states.
[2020-11-25 08:46:15,220 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:15,220 INFO  L93              Difference]: Finished difference Result 9749 states and 11471 transitions.
[2020-11-25 08:46:15,221 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:46:15,221 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9749 states and 11471 transitions.
[2020-11-25 08:46:15,239 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:15,257 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9749 states to 9716 states and 11430 transitions.
[2020-11-25 08:46:15,257 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2611
[2020-11-25 08:46:15,258 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2611
[2020-11-25 08:46:15,258 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9716 states and 11430 transitions.
[2020-11-25 08:46:15,264 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:15,264 INFO  L728         BuchiCegarLoop]: Abstraction has 9716 states and 11430 transitions.
[2020-11-25 08:46:15,269 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9716 states and 11430 transitions.
[2020-11-25 08:46:15,315 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9716 to 9716.
[2020-11-25 08:46:15,315 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9716 states.
[2020-11-25 08:46:15,326 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9716 states to 9716 states and 11430 transitions.
[2020-11-25 08:46:15,326 INFO  L751         BuchiCegarLoop]: Abstraction has 9716 states and 11430 transitions.
[2020-11-25 08:46:15,326 INFO  L631         BuchiCegarLoop]: Abstraction has 9716 states and 11430 transitions.
[2020-11-25 08:46:15,326 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 08:46:15,326 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9716 states and 11430 transitions.
[2020-11-25 08:46:15,336 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:15,336 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:15,336 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:15,337 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:15,337 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND TRUE   choice == 27
[L11035]              gas := gas - 21000;
[L11036]  COND FALSE  !(gas >= 0)
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:15,342 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:15,342 INFO  L82        PathProgramCache]: Analyzing trace with hash -447208426, now seen corresponding path program 1 times
[2020-11-25 08:46:15,343 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:15,361 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:15,546 INFO  L134       CoverageAnalysis]: Checked inductivity of 1006 backedges. 0 proven. 10 refuted. 0 times theorem prover too weak. 996 trivial. 0 not checked.
[2020-11-25 08:46:15,546 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 08:46:15,546 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-25 08:46:15,547 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:15,547 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 08:46:15,547 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 08:46:15,547 INFO  L87              Difference]: Start difference. First operand 9716 states and 11430 transitions. cyclomatic complexity: 1718 Second operand 7 states.
[2020-11-25 08:46:15,704 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:15,704 INFO  L93              Difference]: Finished difference Result 9739 states and 11456 transitions.
[2020-11-25 08:46:15,704 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 08:46:15,705 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9739 states and 11456 transitions.
[2020-11-25 08:46:15,722 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:15,739 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9739 states to 9722 states and 11436 transitions.
[2020-11-25 08:46:15,739 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2611
[2020-11-25 08:46:15,740 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2611
[2020-11-25 08:46:15,740 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9722 states and 11436 transitions.
[2020-11-25 08:46:15,745 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:15,745 INFO  L728         BuchiCegarLoop]: Abstraction has 9722 states and 11436 transitions.
[2020-11-25 08:46:15,750 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9722 states and 11436 transitions.
[2020-11-25 08:46:15,793 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9722 to 9722.
[2020-11-25 08:46:15,794 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9722 states.
[2020-11-25 08:46:15,804 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9722 states to 9722 states and 11436 transitions.
[2020-11-25 08:46:15,804 INFO  L751         BuchiCegarLoop]: Abstraction has 9722 states and 11436 transitions.
[2020-11-25 08:46:15,804 INFO  L631         BuchiCegarLoop]: Abstraction has 9722 states and 11436 transitions.
[2020-11-25 08:46:15,804 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 08:46:15,804 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9722 states and 11436 transitions.
[2020-11-25 08:46:15,815 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:15,815 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:15,815 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:15,816 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:15,816 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND TRUE   DType[this] == ERC20Pausable
[L5969]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5969]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5970]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:15,821 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:15,821 INFO  L82        PathProgramCache]: Analyzing trace with hash 1523838120, now seen corresponding path program 1 times
[2020-11-25 08:46:15,822 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:15,835 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:16,001 INFO  L134       CoverageAnalysis]: Checked inductivity of 989 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 964 trivial. 0 not checked.
[2020-11-25 08:46:16,001 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:46:16,002 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:46:16,002 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:16,002 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:46:16,002 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:46:16,002 INFO  L87              Difference]: Start difference. First operand 9722 states and 11436 transitions. cyclomatic complexity: 1718 Second operand 9 states.
[2020-11-25 08:46:16,210 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:16,210 INFO  L93              Difference]: Finished difference Result 9765 states and 11485 transitions.
[2020-11-25 08:46:16,210 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:46:16,210 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9765 states and 11485 transitions.
[2020-11-25 08:46:16,228 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:16,245 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9765 states to 9718 states and 11430 transitions.
[2020-11-25 08:46:16,245 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2611
[2020-11-25 08:46:16,246 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2611
[2020-11-25 08:46:16,246 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9718 states and 11430 transitions.
[2020-11-25 08:46:16,251 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:16,251 INFO  L728         BuchiCegarLoop]: Abstraction has 9718 states and 11430 transitions.
[2020-11-25 08:46:16,256 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9718 states and 11430 transitions.
[2020-11-25 08:46:16,298 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9718 to 9718.
[2020-11-25 08:46:16,298 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9718 states.
[2020-11-25 08:46:16,309 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9718 states to 9718 states and 11430 transitions.
[2020-11-25 08:46:16,309 INFO  L751         BuchiCegarLoop]: Abstraction has 9718 states and 11430 transitions.
[2020-11-25 08:46:16,309 INFO  L631         BuchiCegarLoop]: Abstraction has 9718 states and 11430 transitions.
[2020-11-25 08:46:16,309 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 08:46:16,309 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9718 states and 11430 transitions.
[2020-11-25 08:46:16,319 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:16,319 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:16,319 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:16,320 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:16,320 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND FALSE  !(DType[this] == Wafl)
[L6653]   COND TRUE   DType[this] == ERC20Mintable
[L6654]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6654]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6655]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND TRUE   choice == 27
[L11035]              gas := gas - 21000;
[L11036]  COND FALSE  !(gas >= 0)
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:16,324 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:16,325 INFO  L82        PathProgramCache]: Analyzing trace with hash -202714085, now seen corresponding path program 1 times
[2020-11-25 08:46:16,325 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:16,343 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:16,576 INFO  L134       CoverageAnalysis]: Checked inductivity of 1001 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 995 trivial. 0 not checked.
[2020-11-25 08:46:16,576 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:46:16,576 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 08:46:16,577 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:16,577 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 08:46:16,577 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 08:46:16,577 INFO  L87              Difference]: Start difference. First operand 9718 states and 11430 transitions. cyclomatic complexity: 1716 Second operand 8 states.
[2020-11-25 08:46:16,758 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:16,758 INFO  L93              Difference]: Finished difference Result 9739 states and 11453 transitions.
[2020-11-25 08:46:16,758 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 08:46:16,758 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9739 states and 11453 transitions.
[2020-11-25 08:46:16,775 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:16,792 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9739 states to 9702 states and 11410 transitions.
[2020-11-25 08:46:16,792 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2611
[2020-11-25 08:46:16,793 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2611
[2020-11-25 08:46:16,793 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9702 states and 11410 transitions.
[2020-11-25 08:46:16,797 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:16,798 INFO  L728         BuchiCegarLoop]: Abstraction has 9702 states and 11410 transitions.
[2020-11-25 08:46:16,802 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9702 states and 11410 transitions.
[2020-11-25 08:46:16,844 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9702 to 9702.
[2020-11-25 08:46:16,845 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9702 states.
[2020-11-25 08:46:16,855 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9702 states to 9702 states and 11410 transitions.
[2020-11-25 08:46:16,855 INFO  L751         BuchiCegarLoop]: Abstraction has 9702 states and 11410 transitions.
[2020-11-25 08:46:16,855 INFO  L631         BuchiCegarLoop]: Abstraction has 9702 states and 11410 transitions.
[2020-11-25 08:46:16,855 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 08:46:16,855 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9702 states and 11410 transitions.
[2020-11-25 08:46:16,865 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:16,866 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:16,866 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:16,867 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:16,867 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND FALSE  !(DType[this] == Wafl)
[L5968]   COND FALSE  !(DType[this] == ERC20Pausable)
[L5973]   COND TRUE   DType[this] == Pausable
[L5974]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5974]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5975]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND TRUE   choice == 27
[L11035]              gas := gas - 21000;
[L11036]  COND FALSE  !(gas >= 0)
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:16,871 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:16,871 INFO  L82        PathProgramCache]: Analyzing trace with hash 112071405, now seen corresponding path program 1 times
[2020-11-25 08:46:16,872 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:16,885 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:17,049 INFO  L134       CoverageAnalysis]: Checked inductivity of 993 backedges. 25 proven. 0 refuted. 0 times theorem prover too weak. 968 trivial. 0 not checked.
[2020-11-25 08:46:17,049 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:46:17,049 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 08:46:17,050 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:17,050 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 08:46:17,050 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=15, Invalid=57, Unknown=0, NotChecked=0, Total=72
[2020-11-25 08:46:17,050 INFO  L87              Difference]: Start difference. First operand 9702 states and 11410 transitions. cyclomatic complexity: 1712 Second operand 9 states.
[2020-11-25 08:46:17,258 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:17,258 INFO  L93              Difference]: Finished difference Result 9732 states and 11445 transitions.
[2020-11-25 08:46:17,258 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 08:46:17,258 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9732 states and 11445 transitions.
[2020-11-25 08:46:17,275 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:17,292 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9732 states to 9678 states and 11381 transitions.
[2020-11-25 08:46:17,292 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2611
[2020-11-25 08:46:17,293 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2611
[2020-11-25 08:46:17,293 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9678 states and 11381 transitions.
[2020-11-25 08:46:17,298 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:17,298 INFO  L728         BuchiCegarLoop]: Abstraction has 9678 states and 11381 transitions.
[2020-11-25 08:46:17,303 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9678 states and 11381 transitions.
[2020-11-25 08:46:17,343 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9678 to 9678.
[2020-11-25 08:46:17,343 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 9678 states.
[2020-11-25 08:46:17,353 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 9678 states to 9678 states and 11381 transitions.
[2020-11-25 08:46:17,353 INFO  L751         BuchiCegarLoop]: Abstraction has 9678 states and 11381 transitions.
[2020-11-25 08:46:17,353 INFO  L631         BuchiCegarLoop]: Abstraction has 9678 states and 11381 transitions.
[2020-11-25 08:46:17,354 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 08:46:17,354 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 9678 states and 11381 transitions.
[2020-11-25 08:46:17,363 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-25 08:46:17,364 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:17,364 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:17,365 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:17,365 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND TRUE   !!__tmp___paused_Pausable[this]
[L9497]               revert := true;
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:17,369 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:17,369 INFO  L82        PathProgramCache]: Analyzing trace with hash 727738226, now seen corresponding path program 1 times
[2020-11-25 08:46:17,370 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:17,388 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 08:46:17,591 INFO  L134       CoverageAnalysis]: Checked inductivity of 1005 backedges. 6 proven. 0 refuted. 0 times theorem prover too weak. 999 trivial. 0 not checked.
[2020-11-25 08:46:17,591 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 08:46:17,591 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 08:46:17,592 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 08:46:17,592 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 08:46:17,592 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=25, Invalid=157, Unknown=0, NotChecked=0, Total=182
[2020-11-25 08:46:17,592 INFO  L87              Difference]: Start difference. First operand 9678 states and 11381 transitions. cyclomatic complexity: 1707 Second operand 14 states.
[2020-11-25 08:46:25,444 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 08:46:25,444 INFO  L93              Difference]: Finished difference Result 13765 states and 16268 transitions.
[2020-11-25 08:46:25,444 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 08:46:25,444 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 13765 states and 16268 transitions.
[2020-11-25 08:46:25,472 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 08:46:25,500 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 13765 states to 13765 states and 16268 transitions.
[2020-11-25 08:46:25,501 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3568
[2020-11-25 08:46:25,502 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 3568
[2020-11-25 08:46:25,502 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 13765 states and 16268 transitions.
[2020-11-25 08:46:25,509 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 08:46:25,510 INFO  L728         BuchiCegarLoop]: Abstraction has 13765 states and 16268 transitions.
[2020-11-25 08:46:25,515 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 13765 states and 16268 transitions.
[2020-11-25 08:46:25,583 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 13765 to 12497.
[2020-11-25 08:46:25,584 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 12497 states.
[2020-11-25 08:46:25,600 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 12497 states to 12497 states and 15000 transitions.
[2020-11-25 08:46:25,600 INFO  L751         BuchiCegarLoop]: Abstraction has 12497 states and 15000 transitions.
[2020-11-25 08:46:25,600 INFO  L631         BuchiCegarLoop]: Abstraction has 12497 states and 15000 transitions.
[2020-11-25 08:46:25,600 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 08:46:25,600 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 12497 states and 15000 transitions.
[2020-11-25 08:46:25,614 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 24
[2020-11-25 08:46:25,614 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 08:46:25,614 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 08:46:25,615 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 08:46:25,615 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                  success_transferFrom_ERC20Pausable0 := false;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]      CALL        call main();
[L3]                  havoc p3;
[L3]                  havoc p2;
[L3]                  havoc p1;
[L11212]              assume null == 0;
[L11213]  CALL        call this := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L11213]  RET         call this := FreshRefGenerator__success();
[L11214]              assume now >= 0;
[L11215]              assume DType[this] == Wafl;
[L11216]              assume msgvalue_MSG == 0;
[L11217]              gas := gas - 53000;
[L11218]  CALL        call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
[L11219]              assume !revert && gas >= 0;
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND FALSE  !(revert)
[L6410]   COND TRUE   __tmp__DType[this] == Wafl
[L6411]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5093]   COND TRUE   __tmp__DType[this] == Wafl
[L5094]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5386]               __var_7 := null;
[L5387]   COND TRUE   !(sender_s544 != null)
[L5388]               revert := true;
[L5094]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5095]   COND TRUE   revert
[L6411]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6412]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

Loop:
[L11222]  CALL        call CorralChoice_Wafl(this);
[L10966]              havoc msgsender_MSG;
[L10967]              havoc msgvalue_MSG;
[L10968]              havoc choice;
[L10969]              havoc __ret_0_owner;
[L10970]              havoc __ret_0_isOwner;
[L10971]              havoc newOwner_s216;
[L10972]              havoc __ret_0_totalSupply;
[L10973]              havoc account_s345;
[L10974]              havoc __ret_0_balanceOf;
[L10975]              havoc to_s1040;
[L10976]              havoc value_s1040;
[L10977]              havoc __ret_0_transfer;
[L10978]              havoc owner_s380;
[L10979]              havoc spender_s380;
[L10980]              havoc __ret_0_allowance;
[L10981]              havoc spender_s1079;
[L10982]              havoc value_s1079;
[L10983]              havoc __ret_0_approve;
[L10984]              havoc from_s1061;
[L10985]              havoc to_s1061;
[L10986]              havoc value_s1061;
[L10987]              havoc __ret_0_transferFrom;
[L10988]              havoc spender_s1097;
[L10989]              havoc addedValue_s1097;
[L10990]              havoc __ret_0_increaseAllowance;
[L10991]              havoc spender_s1115;
[L10992]              havoc subtractedValue_s1115;
[L10993]              havoc __ret_0_decreaseAllowance;
[L10994]              havoc name_s731;
[L10995]              havoc symbol_s731;
[L10996]              havoc decimals_s731;
[L10997]              havoc __ret_0_name;
[L10998]              havoc __ret_0_symbol;
[L10999]              havoc __ret_0_decimals;
[L11000]              havoc account_s882;
[L11001]              havoc __ret_0_isPauser;
[L11002]              havoc account_s894;
[L11003]              havoc __ret_0_paused;
[L11004]              havoc account_s1163;
[L11005]              havoc __ret_0_isMinter;
[L11006]              havoc account_s1175;
[L11007]              havoc account_s1240;
[L11008]              havoc amount_s1240;
[L11009]              havoc __ret_0_mint;
[L11010]              havoc amount_s1255;
[L11011]              havoc account_s1268;
[L11012]              havoc amount_s1268;
[L11013]              havoc tmpNow;
[L11014]              havoc gas;
[L11015]              assume gas > 4000000 && gas <= 8000000;
[L11016]              tmpNow := now;
[L11017]              havoc now;
[L11018]              assume now > tmpNow;
[L11019]              assume msgsender_MSG != null;
[L11020]              assume DType[msgsender_MSG] != SafeMath;
[L11021]              assume DType[msgsender_MSG] != Ownable;
[L11022]              assume DType[msgsender_MSG] != IERC20;
[L11023]              assume DType[msgsender_MSG] != ERC20;
[L11024]              assume DType[msgsender_MSG] != ERC20Detailed;
[L11025]              assume DType[msgsender_MSG] != Roles;
[L11026]              assume DType[msgsender_MSG] != PauserRole;
[L11027]              assume DType[msgsender_MSG] != Pausable;
[L11028]              assume DType[msgsender_MSG] != ERC20Pausable;
[L11029]              assume DType[msgsender_MSG] != MinterRole;
[L11030]              assume DType[msgsender_MSG] != ERC20Mintable;
[L11031]              assume DType[msgsender_MSG] != ERC20Burnable;
[L11032]              assume DType[msgsender_MSG] != Wafl;
[L11033]              Alloc[msgsender_MSG] := true;
[L11034]  COND FALSE  !(choice == 27)
[L11040]  COND FALSE  !(choice == 26)
[L11046]  COND FALSE  !(choice == 25)
[L11052]  COND FALSE  !(choice == 24)
[L11058]  COND FALSE  !(choice == 23)
[L11064]  COND FALSE  !(choice == 22)
[L11070]  COND FALSE  !(choice == 21)
[L11077]  COND FALSE  !(choice == 20)
[L11083]  COND FALSE  !(choice == 19)
[L11090]  COND TRUE   choice == 18
[L11091]              gas := gas - 21000;
[L11092]  COND TRUE   gas >= 0
[L11093]              assume value_s1061 >= 0 && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L11094]              assume msgvalue_MSG == 0;
[L11095]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND FALSE  !(revert)
[L6410]   COND TRUE   __tmp__DType[this] == Wafl
[L6411]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5093]   COND TRUE   __tmp__DType[this] == Wafl
[L5094]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5386]               __var_7 := null;
[L5387]   COND TRUE   !(sender_s544 != null)
[L5388]               revert := true;
[L5094]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5095]   COND TRUE   revert
[L6411]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6412]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L11222]  RET         call CorralChoice_Wafl(this);

[2020-11-25 08:46:25,620 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:25,620 INFO  L82        PathProgramCache]: Analyzing trace with hash 1315818530, now seen corresponding path program 1 times
[2020-11-25 08:46:25,621 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:25,677 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:46:25,711 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:46:25,878 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:25,878 INFO  L82        PathProgramCache]: Analyzing trace with hash 247343392, now seen corresponding path program 1 times
[2020-11-25 08:46:25,879 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:25,884 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:46:25,889 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:46:25,903 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 08:46:25,903 INFO  L82        PathProgramCache]: Analyzing trace with hash 462413919, now seen corresponding path program 1 times
[2020-11-25 08:46:25,904 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 08:46:25,945 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:46:25,997 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 223 to 443
[2020-11-25 08:46:26,404 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification. DAG size of input: 184 DAG size of output: 176
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1093 to 2179
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.003s / 0.005s total
Resizing node table from 3137 to 6271
[2020-11-25 08:46:26,652 WARN  L188               SmtUtils]: Spent 215.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 128
[2020-11-25 08:46:26,827 WARN  L188               SmtUtils]: Spent 173.00 ms on a formula simplification that was a NOOP. DAG size: 303
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 7933 to 15859
[2020-11-25 08:46:27,587 WARN  L188               SmtUtils]: Spent 739.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 249
[2020-11-25 08:46:28,659 WARN  L188               SmtUtils]: Spent 1.07 s on a formula simplification. DAG size of input: 343 DAG size of output: 312
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2473 to 4943
Garbage collection #7: 4943 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4943 to 9883
Garbage collection #8: 9883 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9883 to 19763
[2020-11-25 08:46:28,971 WARN  L188               SmtUtils]: Spent 283.00 ms on a formula simplification. DAG size of input: 202 DAG size of output: 196
[2020-11-25 08:46:29,292 WARN  L188               SmtUtils]: Spent 319.00 ms on a formula simplification that was a NOOP. DAG size: 382
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 9181 to 18353
[2020-11-25 08:46:29,909 WARN  L188               SmtUtils]: Spent 607.00 ms on a formula simplification. DAG size of input: 311 DAG size of output: 311
[2020-11-25 08:46:30,221 WARN  L188               SmtUtils]: Spent 310.00 ms on a formula simplification that was a NOOP. DAG size: 311
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #1: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #2: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #3: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #4: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #5: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #6: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #7: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
[2020-11-25 08:46:30,735 WARN  L188               SmtUtils]: Spent 491.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 227
[2020-11-25 08:46:30,746 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-25 08:46:34,088 WARN  L188               SmtUtils]: Spent 2.06 s on a formula simplification. DAG size of input: 540 DAG size of output: 502
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-25 08:46:34,383 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification that was a NOOP. DAG size: 244
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 08:46:34,501 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification that was a NOOP. DAG size: 212
[2020-11-25 08:46:34,700 WARN  L188               SmtUtils]: Spent 198.00 ms on a formula simplification. DAG size of input: 217 DAG size of output: 216
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
[2020-11-25 08:46:34,980 WARN  L188               SmtUtils]: Spent 219.00 ms on a formula simplification that was a NOOP. DAG size: 367
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-25 08:46:35,170 WARN  L188               SmtUtils]: Spent 186.00 ms on a formula simplification that was a NOOP. DAG size: 335
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 08:46:35,438 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 134 DAG size of output: 128
[2020-11-25 08:46:35,574 WARN  L188               SmtUtils]: Spent 135.00 ms on a formula simplification that was a NOOP. DAG size: 303
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 08:46:36,269 WARN  L188               SmtUtils]: Spent 686.00 ms on a formula simplification. DAG size of input: 249 DAG size of output: 249
[2020-11-25 08:46:37,341 WARN  L188               SmtUtils]: Spent 1.07 s on a formula simplification. DAG size of input: 342 DAG size of output: 312
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 08:46:37,790 WARN  L188               SmtUtils]: Spent 427.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 207
[2020-11-25 08:46:38,116 WARN  L188               SmtUtils]: Spent 325.00 ms on a formula simplification that was a NOOP. DAG size: 393
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #8: 19763 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19763 to 39521
[2020-11-25 08:46:38,996 WARN  L188               SmtUtils]: Spent 848.00 ms on a formula simplification. DAG size of input: 340 DAG size of output: 322
[2020-11-25 08:46:41,596 WARN  L188               SmtUtils]: Spent 2.60 s on a formula simplification. DAG size of input: 627 DAG size of output: 606
Garbage collection #1: 227 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 227 to 449
Garbage collection #2: 449 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 449 to 887
Garbage collection #3: 887 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 887 to 1759
Garbage collection #4: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #5: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
Garbage collection #6: 7027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7027 to 14051
Garbage collection #7: 14051 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 14051 to 28099
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
[2020-11-25 08:46:43,033 WARN  L188               SmtUtils]: Spent 1.31 s on a formula simplification. DAG size of input: 375 DAG size of output: 340
[2020-11-25 08:46:44,049 WARN  L188               SmtUtils]: Spent 990.00 ms on a formula simplification that was a NOOP. DAG size: 467
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9883 to 19763
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 13313 to 26597
Garbage collection #9: 26597 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 26597 to 53189
Garbage collection #10: 53189 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 53189 to 103183
[2020-11-25 08:46:45,377 WARN  L188               SmtUtils]: Spent 1.24 s on a formula simplification. DAG size of input: 359 DAG size of output: 340
[2020-11-25 08:46:47,287 WARN  L188               SmtUtils]: Spent 1.91 s on a formula simplification. DAG size of input: 469 DAG size of output: 468
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #8: 19763 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19763 to 39521
Garbage collection #9: 39521 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 39521 to 79039
Garbage collection #10: 79039 nodes / 0 free / 0.002s / 0.002s total
Resizing node table from 79039 to 129037
[2020-11-25 08:46:52,183 WARN  L188               SmtUtils]: Spent 4.85 s on a formula simplification. DAG size of input: 496 DAG size of output: 463
[2020-11-25 08:46:52,239 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:46:52,291 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 08:46:52,309 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 08:46:52 BasicIcfg
[2020-11-25 08:46:52,309 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 08:46:52,310 INFO  L168              Benchmark]: Toolchain (without parser) took 53178.85 ms. Allocated memory was 1.0 GB in the beginning and 4.1 GB in the end (delta: 3.1 GB). Free memory was 924.5 MB in the beginning and 835.0 MB in the end (delta: 89.4 MB). Peak memory consumption was 3.3 GB. Max. memory is 15.3 GB.
[2020-11-25 08:46:52,310 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.27 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 08:46:52,310 INFO  L168              Benchmark]: Boogie Preprocessor took 171.71 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 897.2 MB in the end (delta: 27.2 MB). Peak memory consumption was 27.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:46:52,311 INFO  L168              Benchmark]: UtopiaSpecLang took 100.12 ms. Allocated memory is still 1.0 GB. Free memory was 897.2 MB in the beginning and 886.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 08:46:52,311 INFO  L168              Benchmark]: Boogie Printer took 28.02 ms. Allocated memory is still 1.0 GB. Free memory was 886.5 MB in the beginning and 875.5 MB in the end (delta: 11.0 MB). Peak memory consumption was 11.0 MB. Max. memory is 15.3 GB.
[2020-11-25 08:46:52,312 INFO  L168              Benchmark]: RCFGBuilder took 1672.09 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 51.9 MB). Free memory was 875.5 MB in the beginning and 756.0 MB in the end (delta: 119.4 MB). Peak memory consumption was 171.3 MB. Max. memory is 15.3 GB.
[2020-11-25 08:46:52,312 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.00 ms. Allocated memory is still 1.1 GB. Free memory was 756.0 MB in the beginning and 746.9 MB in the end (delta: 9.2 MB). Peak memory consumption was 9.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:46:52,313 INFO  L168              Benchmark]: BÃ¼chi Program Product took 3612.80 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 421.0 MB). Free memory was 746.9 MB in the beginning and 800.7 MB in the end (delta: -53.8 MB). Peak memory consumption was 367.2 MB. Max. memory is 15.3 GB.
[2020-11-25 08:46:52,313 INFO  L168              Benchmark]: BlockEncodingV2 took 297.23 ms. Allocated memory is still 1.5 GB. Free memory was 800.7 MB in the beginning and 645.3 MB in the end (delta: 155.4 MB). Peak memory consumption was 155.4 MB. Max. memory is 15.3 GB.
[2020-11-25 08:46:52,313 INFO  L168              Benchmark]: BuchiAutomizer took 47257.36 ms. Allocated memory was 1.5 GB in the beginning and 4.1 GB in the end (delta: 2.6 GB). Free memory was 645.3 MB in the beginning and 835.0 MB in the end (delta: -189.7 MB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
[2020-11-25 08:46:52,316 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    10768 locations, 20080 edges
  - StatisticsResult: Encoded RCFG
    10574 locations, 19542 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.27 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 171.71 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 897.2 MB in the end (delta: 27.2 MB). Peak memory consumption was 27.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 100.12 ms. Allocated memory is still 1.0 GB. Free memory was 897.2 MB in the beginning and 886.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 28.02 ms. Allocated memory is still 1.0 GB. Free memory was 886.5 MB in the beginning and 875.5 MB in the end (delta: 11.0 MB). Peak memory consumption was 11.0 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1672.09 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 51.9 MB). Free memory was 875.5 MB in the beginning and 756.0 MB in the end (delta: 119.4 MB). Peak memory consumption was 171.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.00 ms. Allocated memory is still 1.1 GB. Free memory was 756.0 MB in the beginning and 746.9 MB in the end (delta: 9.2 MB). Peak memory consumption was 9.2 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 3612.80 ms. Allocated memory was 1.1 GB in the beginning and 1.5 GB in the end (delta: 421.0 MB). Free memory was 746.9 MB in the beginning and 800.7 MB in the end (delta: -53.8 MB). Peak memory consumption was 367.2 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 297.23 ms. Allocated memory is still 1.5 GB. Free memory was 800.7 MB in the beginning and 645.3 MB in the end (delta: 155.4 MB). Peak memory consumption was 155.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 47257.36 ms. Allocated memory was 1.5 GB in the beginning and 4.1 GB in the end (delta: 2.6 GB). Free memory was 645.3 MB in the beginning and 835.0 MB in the end (delta: -189.7 MB). Peak memory consumption was 2.5 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    4159 locations, 6114 edges
  - StatisticsResult: BuchiProgram size
    10768 locations, 20080 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 15 terminating modules (15 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.15 modules have a trivial ranking function, the largest among these consists of 14 locations. The remainder module has 12497 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 47.1s and 16 iterations.  TraceHistogramMax:9. Analysis of lassos took 30.0s. Construction of modules took 10.5s. BÃ¼chi inclusion checks took 4.1s. Highest rank in rank-based complementation 0. Minimization of det autom 15. Minimization of nondet autom 0. Automata minimization 1.0s AutomataMinimizationTime, 15 MinimizatonAttempts, 3474 StatesRemovedByMinimization, 6 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 12497 states and ocurred in iteration 15.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 108267 SDtfs, 43245 SDslu, 452312 SDs, 0 SdLazy, 135594 SolverSat, 7787 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 10.5s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU15 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115787428790991736226411098954254884178879543113989747471779898303288945549164) = (new Wafl)({from : 115787428790991736226411098954254884178879543113989747471779898303288945549145});
[L3135]               havoc __exception;
[L3136]               revert := false;
[L3137]   COND FALSE  !(__exception)
[L3165]   CALL        call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L7164]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L7164]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7165]   COND FALSE  !(revert)
[L7168]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L7168]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7169]   COND FALSE  !(revert)
[L7172]   CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L5754]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L5754]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]   COND FALSE  !(revert)
[L5758]   CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5729]               assume msgsender_MSG != null;
[L5730]               Balance[this] := 0;
[L5731]               _name_ERC20Detailed[this] := -1545721152;
[L5732]               _symbol_ERC20Detailed[this] := -1545721152;
[L5733]               _decimals_ERC20Detailed[this] := 0;
[L5735]               _name_ERC20Detailed[this] := name_s731;
[L5736]               _symbol_ERC20Detailed[this] := symbol_s731;
[L5737]               _decimals_ERC20Detailed[this] := decimals_s731;
[L5758]   RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s731, symbol_s731, decimals_s731);
[L5759]   COND FALSE  !(revert)
[L7172]   RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, 1861448946, 1818491892, 18);
[L7173]   COND FALSE  !(revert)
[L7176]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L7176]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7177]   COND FALSE  !(revert)
[L7180]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L7180]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7181]   COND FALSE  !(revert)
[L7184]   CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6330]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6330]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6331]   COND FALSE  !(revert)
[L6334]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6334]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6335]   COND FALSE  !(revert)
[L6338]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6338]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6339]   COND FALSE  !(revert)
[L6342]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6212]   CALL        call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6000]   CALL        call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5954]               assume msgsender_MSG != null;
[L5955]               Balance[this] := 0;
[L5957]   CALL        call __var_23 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L5957]   RET         call __var_23 := FreshRefGenerator__success();
[L5958]   COND FALSE  !(revert)
[L5961]               _pausers_PauserRole[this] := __var_23;
[L5963]   COND TRUE   DType[this] == Wafl
[L5964]   CALL        call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6154]   CALL        call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6154]   RET         call add~Role~address_Roles__success(this, this, 0, _pausers_PauserRole[this], account_s919);
[L6155]   COND FALSE  !(revert)
[L6158]               assert { :EventEmitted "PauserAdded_PauserRole" } true;
[L5964]   RET         call _addPauser~address_PauserRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5965]   COND FALSE  !(revert)
[L6000]   RET         call PauserRole_PauserRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6001]   COND FALSE  !(revert)
[L6212]   RET         call PauserRole_PauserRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6213]   COND FALSE  !(revert)
[L6216]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6191]               assume msgsender_MSG != null;
[L6192]               Balance[this] := 0;
[L6193]               _paused_Pausable[this] := false;
[L6195]               _paused_Pausable[this] := false;
[L6216]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6217]   COND FALSE  !(revert)
[L6342]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L6343]   COND FALSE  !(revert)
[L6346]   CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6299]               assume msgsender_MSG != null;
[L6300]               Balance[this] := 0;
[L6346]   RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6347]   COND FALSE  !(revert)
[L7184]   RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L7185]   COND FALSE  !(revert)
[L7188]   CALL        call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L6974]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6974]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6975]   COND FALSE  !(revert)
[L6978]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6978]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6979]   COND FALSE  !(revert)
[L6982]   CALL        call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6951]               assume msgsender_MSG != null;
[L6952]               Balance[this] := 0;
[L6982]   RET         call ERC20Burnable_ERC20Burnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6983]   COND FALSE  !(revert)
[L7188]   RET         call ERC20Burnable_ERC20Burnable__success(this, msgsender_MSG, msgvalue_MSG);
[L7189]   COND FALSE  !(revert)
[L7192]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L7192]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L7193]   COND FALSE  !(revert)
[L7196]   CALL        call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L6876]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L6876]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6877]   COND FALSE  !(revert)
[L6880]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4908]   CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4862]   CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4847]               assume msgsender_MSG != null;
[L4848]               Balance[this] := 0;
[L4862]   RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4863]   COND FALSE  !(revert)
[L4908]   RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4909]   COND FALSE  !(revert)
[L4912]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4884]               assume msgsender_MSG != null;
[L4885]               Balance[this] := 0;
[L4886]               _balances_ERC20[this] := zeroRefintArr();
[L4887]               sum__balances0[this] := 0;
[L4888]               _allowances_ERC20[this] := zeroRefRefintArr();
[L4889]               sum__allowances1[this] := 0;
[L4890]               _totalSupply_ERC20[this] := 0;
[L4912]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4913]   COND FALSE  !(revert)
[L6880]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L6881]   COND FALSE  !(revert)
[L6884]   CALL        call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6680]   CALL        call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6639]               assume msgsender_MSG != null;
[L6640]               Balance[this] := 0;
[L6642]   CALL        call __var_36 := FreshRefGenerator__success();
[L4515]               havoc newRef;
[L4516]               assume Alloc[newRef] == false;
[L4517]               Alloc[newRef] := true;
[L4518]               assume newRef != null;
[L6642]   RET         call __var_36 := FreshRefGenerator__success();
[L6643]   COND FALSE  !(revert)
[L6646]               _minters_MinterRole[this] := __var_36;
[L6648]   COND TRUE   DType[this] == Wafl
[L6649]   CALL        call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6814]   CALL        call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L5849]   CALL        call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5903]               __var_22 := null;
[L5904]   COND FALSE  !(!(account_s834 != null))
[L5908]               __ret_0_ := M_Ref_bool[bearer_Roles.Role[role_s834]][account_s834];
[L5849]   RET         call __var_20 := has~Role~address_Roles__success(this, msgsender_MSG, msgvalue_MSG, role_s786, account_s786);
[L5850]   COND FALSE  !(revert)
[L5853]   COND FALSE  !(!!__var_20)
[L5857]               M_Ref_bool[bearer_Roles.Role[role_s786]][account_s786] := true;
[L6814]   RET         call add~Role~address_Roles__success(this, this, 0, _minters_MinterRole[this], account_s1200);
[L6815]   COND FALSE  !(revert)
[L6818]               assert { :EventEmitted "MinterAdded_MinterRole" } true;
[L6649]   RET         call _addMinter~address_MinterRole__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L6650]   COND FALSE  !(revert)
[L6680]   RET         call MinterRole_MinterRole_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6681]   COND FALSE  !(revert)
[L6884]   RET         call MinterRole_MinterRole__success(this, msgsender_MSG, msgvalue_MSG);
[L6885]   COND FALSE  !(revert)
[L6888]   CALL        call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6849]               assume msgsender_MSG != null;
[L6850]               Balance[this] := 0;
[L6888]   RET         call ERC20Mintable_ERC20Mintable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6889]   COND FALSE  !(revert)
[L7196]   RET         call ERC20Mintable_ERC20Mintable__success(this, msgsender_MSG, msgvalue_MSG);
[L7197]   COND FALSE  !(revert)
[L7200]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4718]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4700]               assume msgsender_MSG != null;
[L4701]               Balance[this] := 0;
[L4702]               _owner_Ownable[this] := null;
[L4704]               _owner_Ownable[this] := msgsender_MSG;
[L4705]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L4718]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4719]   COND FALSE  !(revert)
[L7200]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7201]   COND FALSE  !(revert)
[L7204]   CALL        call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7088]               assume msgsender_MSG != null;
[L7089]               Balance[this] := 0;
[L7091]   COND TRUE   DType[this] == Wafl
[L7092]   CALL        call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L5796]               __ret_0_ := _decimals_ERC20Detailed[this];
[L7092]   RET         call __var_40 := decimals_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG);
[L7093]   COND FALSE  !(revert)
[L7099]               __var_39 := __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L7100]   COND TRUE   DType[this] == Wafl
[L7101]   CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L5474]               __var_11 := null;
[L5475]   COND FALSE  !(!(account_s587 != null))
[L5479]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5479]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s587);
[L5480]   COND FALSE  !(revert)
[L5483]               _totalSupply_ERC20[this] := __var_12;
[L5484]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L4578]               c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4579]   COND FALSE  !(!(c_s26 >= a_s26))
[L4583]               __ret_0_ := c_s26;
[L5484]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s587], amount_s587);
[L5485]   COND FALSE  !(revert)
[L5488]               sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s587];
[L5489]               _balances_ERC20[this][account_s587] := __var_13;
[L5490]               sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s587];
[L5491]               assert { :EventEmitted "Transfer_ERC20" } true;
[L7101]   RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 10000000000 * (nonlinearPow(10, __var_40 % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L7102]   COND FALSE  !(revert)
[L7204]   RET         call Wafl_Wafl_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7205]   COND FALSE  !(revert)
[L3165]   RET         call Wafl_Wafl__success(this, msgsender_MSG, msgvalue_MSG);
[L3166]               assume !revert && gas >= 0;
[L11218]  RET         call Wafl_Wafl(this, msgsender_MSG, msgvalue_MSG);
ERC20Pausable(115787428790991736226411098954254884178879543113989747471779898303288945549164).transferFrom~address~address~uint256.gas(3979002)({from : 115787428790991736226411098954254884178879543113989747471779898303288945549144, from : 0, to : 115787428790991736226411098954254884178879543113989747471779898303288945549145, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND FALSE  !(revert)
[L6410]   COND TRUE   __tmp__DType[this] == Wafl
[L6411]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5093]   COND TRUE   __tmp__DType[this] == Wafl
[L5094]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5386]               __var_7 := null;
[L5387]   COND TRUE   !(sender_s544 != null)
[L5388]               revert := true;
[L5094]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5095]   COND TRUE   revert
[L6411]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6412]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);

Loop:
ERC20Pausable(115787428790991736226411098954254884178879543113989747471779898303288945549164).transferFrom~address~address~uint256.gas(3979001)({from : 115787428790991736226411098954254884178879543113989747471779898303288945549167, from : 0, to : 115787428790991736226411098954254884178879543113989747471779898303288945549145, value : 0});
[L3]                  revert_hold := revert;
[L3]                  revert := false;
[L3]                  assume (((((((((((((p1 != from_s1061 && p1 != to_s1061) && (p2 != from_s1061 || p3 != msgsender_MSG)) && from_s1061 != to_s1061) && value_s1061 <= _balances_ERC20[this][from_s1061]) && value_s1061 <= _allowances_ERC20[this][from_s1061][msgsender_MSG]) && _balances_ERC20[this][to_s1061] + value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1061 >= 0) && value_s1061 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1061] >= 0) && _balances_ERC20[this][to_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1061] >= 0) && _balances_ERC20[this][from_s1061] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1061][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1061][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                  call_transferFrom_ERC20Pausable0 := true;
[L3]                  call_transferFrom_ERC20Pausable0 := false;
[L3]                  revert := revert_hold;
[L2227]               havoc __exception;
[L2228]               revert := false;
[L2229]   COND TRUE   __exception
[L2230]               __tmp__Balance := Balance;
[L2231]               __tmp__DType := DType;
[L2232]               __tmp__Alloc := Alloc;
[L2233]               __tmp__balance_ADDR := balance_ADDR;
[L2234]               __tmp__M_Ref_int := M_Ref_int;
[L2235]               __tmp__sum__balances0 := sum__balances0;
[L2236]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2237]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2238]               __tmp__sum__allowances1 := sum__allowances1;
[L2239]               __tmp__M_Ref_bool := M_Ref_bool;
[L2240]               __tmp__sum := sum;
[L2241]               __tmp__Length := Length;
[L2242]               __tmp__now := now;
[L2243]               __tmp___owner_Ownable := _owner_Ownable;
[L2244]               __tmp___balances_ERC20 := _balances_ERC20;
[L2245]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L2246]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L2247]               __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L2248]               __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L2249]               __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L2250]               __tmp__bearer_Roles.Role := bearer_Roles.Role;
[L2251]               __tmp___pausers_PauserRole := _pausers_PauserRole;
[L2252]               __tmp___paused_Pausable := _paused_Pausable;
[L2253]               __tmp___minters_MinterRole := _minters_MinterRole;
[L2254]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6406]   CALL        call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L9496]   COND FALSE  !(!!__tmp___paused_Pausable[this])
[L6406]   RET         call whenNotPaused_pre__fail(this, msgsender_MSG, msgvalue_MSG);
[L6407]   COND FALSE  !(revert)
[L6410]   COND TRUE   __tmp__DType[this] == Wafl
[L6411]   CALL        call __var_28 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L5093]   COND TRUE   __tmp__DType[this] == Wafl
[L5094]   CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5386]               __var_7 := null;
[L5387]   COND TRUE   !(sender_s544 != null)
[L5388]               revert := true;
[L5094]   RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s434, recipient_s434, amount_s434);
[L5095]   COND TRUE   revert
[L6411]   RET         call __var_28 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L6412]   COND TRUE   revert
[L2254]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20Pausable__fail(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);
[L2255]               assume revert || gas < 0;
[L11095]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, from_s1061, to_s1061, value_s1061);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
